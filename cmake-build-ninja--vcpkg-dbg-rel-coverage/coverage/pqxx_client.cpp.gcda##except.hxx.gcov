        -:    0:Source:/home/neo/.vcpkg-clion/vcpkg/installed/x64-linux/include/pqxx/except.hxx
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Definition of libpqxx exception classes.
        -:    2: *
        -:    3: * pqxx::sql_error, pqxx::broken_connection, pqxx::in_doubt_error, ...
        -:    4: *
        -:    5: * DO NOT INCLUDE THIS FILE DIRECTLY; include pqxx/except instead.
        -:    6: *
        -:    7: * Copyright (c) 2000-2024, Jeroen T. Vermeulen.
        -:    8: *
        -:    9: * See COPYING for copyright license.  If you did not receive a file called
        -:   10: * COPYING with this source code, please notify the distributor of this
        -:   11: * mistake, or contact the author.
        -:   12: */
        -:   13:#ifndef PQXX_H_EXCEPT
        -:   14:#define PQXX_H_EXCEPT
        -:   15:
        -:   16:#if !defined(PQXX_HEADER_PRE)
        -:   17:#  error "Include libpqxx headers as <pqxx/header>, not <pqxx/header.hxx>."
        -:   18:#endif
        -:   19:
        -:   20:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:   21:#  include <source_location>
        -:   22:#endif
        -:   23:
        -:   24:#include <stdexcept>
        -:   25:#include <string>
        -:   26:
        -:   27:
        -:   28:namespace pqxx
        -:   29:{
        -:   30:/**
        -:   31: * @addtogroup exception Exception classes
        -:   32: *
        -:   33: * These exception classes follow, roughly, the two-level hierarchy defined by
        -:   34: * the PostgreSQL SQLSTATE error codes (see Appendix A of the PostgreSQL
        -:   35: * documentation corresponding to your server version).  This is not a complete
        -:   36: * mapping though.  There are other differences as well, e.g. the error code
        -:   37: * for `statement_completion_unknown` has a separate status in libpqxx as
        -:   38: * @ref in_doubt_error, and `too_many_connections` is classified as a
        -:   39: * `broken_connection` rather than a subtype of `insufficient_resources`.
        -:   40: *
        -:   41: * @see http://www.postgresql.org/docs/9.4/interactive/errcodes-appendix.html
        -:   42: *
        -:   43: * @{
        -:   44: */
        -:   45:
        -:   46:/// Run-time failure encountered by libpqxx, similar to std::runtime_error.
        -:   47:struct PQXX_LIBEXPORT failure : std::runtime_error
        -:   48:{
        -:   49:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:   50:  explicit failure(
        -:   51:    std::string const &,
        -:   52:    std::source_location = std::source_location::current());
        -:   53:  std::source_location location;
        -:   54:#else
        -:   55:  explicit failure(std::string const &);
        -:   56:#endif
        -:   57:};
        -:   58:
        -:   59:
        -:   60:/// Exception class for lost or failed backend connection.
        -:   61:/**
        -:   62: * @warning When this happens on Unix-like systems, you may also get a SIGPIPE
        -:   63: * signal.  That signal aborts the program by default, so if you wish to be
        -:   64: * able to continue after a connection breaks, be sure to disarm this signal.
        -:   65: *
        -:   66: * If you're working on a Unix-like system, see the manual page for
        -:   67: * `signal` (2) on how to deal with SIGPIPE.  The easiest way to make this
        -:   68: * signal harmless is to make your program ignore it:
        -:   69: *
        -:   70: * ```cxx
        -:   71: * #include <csignal>
        -:   72: *
        -:   73: * int main()
        -:   74: * {
        -:   75: *   std::signal(SIGPIPE, SIG_IGN);
        -:   76: *   // ...
        -:   77: * }
        -:   78: * ```
        -:   79: */
        -:   80:struct PQXX_LIBEXPORT broken_connection : failure
        -:   81:{
        -:   82:  broken_connection();
        -:   83:  explicit broken_connection(
        -:   84:    std::string const &
        -:   85:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:   86:    ,
        -:   87:    std::source_location = std::source_location::current()
        -:   88:#endif
        -:   89:  );
        -:   90:};
        -:   91:
        -:   92:
        -:   93:/// Exception class for micommunication with the server.
        -:   94:/** This happens when the conversation between libpq and the server gets messed
        -:   95: * up.  There aren't many situations where this happens, but one known instance
        -:   96: * is when you call a parameterised or prepared statement with th ewrong number
        -:   97: * of parameters.
        -:   98: *
        -:   99: * So even though this is a `broken_connection`, it signals that retrying is
        -:  100: * _not_ likely to make the problem go away.
        -:  101: */
        -:  102:struct PQXX_LIBEXPORT protocol_violation : broken_connection
        -:  103:{
        -:  104:  explicit protocol_violation(
        -:  105:    std::string const &
        -:  106:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  107:    ,
        -:  108:    std::source_location = std::source_location::current()
        -:  109:#endif
        -:  110:  );
        -:  111:};
        -:  112:
        -:  113:
        -:  114:/// The caller attempted to set a variable to null, which is not allowed.
        -:  115:struct PQXX_LIBEXPORT variable_set_to_null : failure
        -:  116:{
        -:  117:  explicit variable_set_to_null(
        -:  118:    std::string const &
        -:  119:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  120:    ,
        -:  121:    std::source_location = std::source_location::current()
        -:  122:#endif
        -:  123:  );
        -:  124:};
        -:  125:
        -:  126:
        -:  127:/// Exception class for failed queries.
        -:  128:/** Carries, in addition to a regular error message, a copy of the failed query
        -:  129: * and (if available) the SQLSTATE value accompanying the error.
        -:  130: */
        -:  131:class PQXX_LIBEXPORT sql_error : public failure
        -:  132:{
        -:  133:  /// Query string.  Empty if unknown.
        -:  134:  std::string const m_query;
        -:  135:  /// SQLSTATE string describing the error type, if known; or empty string.
        -:  136:  std::string const m_sqlstate;
        -:  137:
        -:  138:public:
        -:  139:  explicit sql_error(
        -:  140:    std::string whatarg = "", std::string const &Q = "",
        -:  141:    char const sqlstate[] = nullptr
        -:  142:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  143:    ,
        -:  144:    std::source_location = std::source_location::current()
        -:  145:#endif
        -:  146:  );
        -:  147:  virtual ~sql_error() noexcept override;
        -:  148:
        -:  149:  /// The query whose execution triggered the exception
        -:  150:  [[nodiscard]] PQXX_PURE std::string const &query() const noexcept;
        -:  151:
        -:  152:  /// SQLSTATE error code if known, or empty string otherwise.
        -:  153:  [[nodiscard]] PQXX_PURE std::string const &sqlstate() const noexcept;
        -:  154:};
        -:  155:
        -:  156:
        -:  157:/// "Help, I don't know whether transaction was committed successfully!"
        -:  158:/** Exception that might be thrown in rare cases where the connection to the
        -:  159: * database is lost while finishing a database transaction, and there's no way
        -:  160: * of telling whether it was actually executed by the backend.  In this case
        -:  161: * the database is left in an indeterminate (but consistent) state, and only
        -:  162: * manual inspection will tell which is the case.
        -:  163: */
        -:  164:struct PQXX_LIBEXPORT in_doubt_error : failure
        -:  165:{
        -:  166:  explicit in_doubt_error(
        -:  167:    std::string const &
        -:  168:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  169:    ,
        -:  170:    std::source_location = std::source_location::current()
        -:  171:#endif
        -:  172:  );
        -:  173:};
        -:  174:
        -:  175:
        -:  176:/// The backend saw itself forced to roll back the ongoing transaction.
        -:  177:struct PQXX_LIBEXPORT transaction_rollback : sql_error
        -:  178:{
        -:  179:  explicit transaction_rollback(
        -:  180:    std::string const &whatarg, std::string const &q = "",
        -:  181:    char const sqlstate[] = nullptr
        -:  182:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  183:    ,
        -:  184:    std::source_location = std::source_location::current()
        -:  185:#endif
        -:  186:  );
        -:  187:};
        -:  188:
        -:  189:
        -:  190:/// Transaction failed to serialize.  Please retry it.
        -:  191:/** Can only happen at transaction isolation levels REPEATABLE READ and
        -:  192: * SERIALIZABLE.
        -:  193: *
        -:  194: * The current transaction cannot be committed without violating the guarantees
        -:  195: * made by its isolation level.  This is the effect of a conflict with another
        -:  196: * ongoing transaction.  The transaction may still succeed if you try to
        -:  197: * perform it again.
        -:  198: */
        -:  199:struct PQXX_LIBEXPORT serialization_failure : transaction_rollback
        -:  200:{
        -:  201:  explicit serialization_failure(
        -:  202:    std::string const &whatarg, std::string const &q,
        -:  203:    char const sqlstate[] = nullptr
        -:  204:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  205:    ,
        -:  206:    std::source_location = std::source_location::current()
        -:  207:#endif
        -:  208:  );
        -:  209:};
        -:  210:
        -:  211:
        -:  212:/// We can't tell whether our last statement succeeded.
        -:  213:struct PQXX_LIBEXPORT statement_completion_unknown : transaction_rollback
        -:  214:{
        -:  215:  explicit statement_completion_unknown(
        -:  216:    std::string const &whatarg, std::string const &q,
        -:  217:    char const sqlstate[] = nullptr
        -:  218:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  219:    ,
        -:  220:    std::source_location = std::source_location::current()
        -:  221:#endif
        -:  222:  );
        -:  223:};
        -:  224:
        -:  225:
        -:  226:/// The ongoing transaction has deadlocked.  Retrying it may help.
        -:  227:struct PQXX_LIBEXPORT deadlock_detected : transaction_rollback
        -:  228:{
        -:  229:  explicit deadlock_detected(
        -:  230:    std::string const &whatarg, std::string const &q,
        -:  231:    char const sqlstate[] = nullptr
        -:  232:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  233:    ,
        -:  234:    std::source_location = std::source_location::current()
        -:  235:#endif
        -:  236:  );
        -:  237:};
        -:  238:
        -:  239:
        -:  240:/// Internal error in libpqxx library
        -:  241:struct PQXX_LIBEXPORT internal_error : std::logic_error
        -:  242:{
        -:  243:  explicit internal_error(std::string const &);
        -:  244:};
        -:  245:
        -:  246:
        -:  247:/// Error in usage of libpqxx library, similar to std::logic_error
        -:  248:struct PQXX_LIBEXPORT usage_error : std::logic_error
        -:  249:{
        -:  250:  explicit usage_error(
        -:  251:    std::string const &
        -:  252:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  253:    ,
        -:  254:    std::source_location = std::source_location::current()
        -:  255:#endif
        -:  256:  );
        -:  257:
        -:  258:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  259:  std::source_location location;
        -:  260:#endif
        -:  261:};
        -:  262:
        -:  263:
        -:  264:/// Invalid argument passed to libpqxx, similar to std::invalid_argument
        -:  265:struct PQXX_LIBEXPORT argument_error : std::invalid_argument
        -:  266:{
        -:  267:  explicit argument_error(
        -:  268:    std::string const &
        -:  269:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  270:    ,
        -:  271:    std::source_location = std::source_location::current()
        -:  272:#endif
        -:  273:  );
        -:  274:
        -:  275:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  276:  std::source_location location;
        -:  277:#endif
        -:  278:};
        -:  279:
        -:  280:
        -:  281:/// Value conversion failed, e.g. when converting "Hello" to int.
        -:  282:struct PQXX_LIBEXPORT conversion_error : std::domain_error
        -:  283:{
        -:  284:  explicit conversion_error(
        -:  285:    std::string const &
        -:  286:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  287:    ,
        -:  288:    std::source_location = std::source_location::current()
        -:  289:#endif
        -:  290:  );
        -:  291:
        -:  292:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  293:  std::source_location location;
        -:  294:#endif
        -:  295:};
        -:  296:
        -:  297:
        -:  298:/// Could not convert null value: target type does not support null.
        -:  299:struct PQXX_LIBEXPORT unexpected_null : conversion_error
        -:  300:{
        -:  301:  explicit unexpected_null(
        -:  302:    std::string const &
        -:  303:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  304:    ,
        -:  305:    std::source_location = std::source_location::current()
        -:  306:#endif
        -:  307:  );
        -:  308:};
        -:  309:
        -:  310:
        -:  311:/// Could not convert value to string: not enough buffer space.
        -:  312:struct PQXX_LIBEXPORT conversion_overrun : conversion_error
        -:  313:{
        -:  314:  explicit conversion_overrun(
        -:  315:    std::string const &
        -:  316:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  317:    ,
        -:  318:    std::source_location = std::source_location::current()
        -:  319:#endif
        -:  320:  );
        -:  321:};
        -:  322:
        -:  323:
        -:  324:/// Something is out of range, similar to std::out_of_range
        -:  325:struct PQXX_LIBEXPORT range_error : std::out_of_range
        -:  326:{
        -:  327:  explicit range_error(
        -:  328:    std::string const &
        -:  329:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  330:    ,
        -:  331:    std::source_location = std::source_location::current()
        -:  332:#endif
        -:  333:  );
        -:  334:
        -:  335:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  336:  std::source_location location;
        -:  337:#endif
        -:  338:};
        -:  339:
        -:  340:
        -:  341:/// Query returned an unexpected number of rows.
        -:  342:struct PQXX_LIBEXPORT unexpected_rows : public range_error
        -:  343:{
        -:  344:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  345:  explicit unexpected_rows(
        -:  346:    std::string const &msg,
        -:  347:    std::source_location loc = std::source_location::current()) :
        -:  348:          range_error{msg, loc}
        -:  349:  {}
        -:  350:#else
        -:  351:  explicit unexpected_rows(std::string const &msg) : range_error{msg} {}
        -:  352:#endif
        -:  353:};
        -:  354:
        -:  355:
        -:  356:/// Database feature not supported in current setup.
        -:  357:struct PQXX_LIBEXPORT feature_not_supported : sql_error
        -:  358:{
        -:  359:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  360:  explicit feature_not_supported(
        -:  361:    std::string const &err, std::string const &Q = "",
        -:  362:    char const sqlstate[] = nullptr,
        -:  363:    std::source_location loc = std::source_location::current()) :
        -:  364:          sql_error{err, Q, sqlstate, loc}
        -:  365:  {}
        -:  366:#else
        -:  367:  explicit feature_not_supported(
        -:  368:    std::string const &err, std::string const &Q = "",
        -:  369:    char const sqlstate[] = nullptr) :
        -:  370:          sql_error{err, Q, sqlstate}
        -:  371:  {}
        -:  372:#endif
        -:  373:};
        -:  374:
        -:  375:/// Error in data provided to SQL statement.
        -:  376:struct PQXX_LIBEXPORT data_exception : sql_error
        -:  377:{
        -:  378:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  379:  explicit data_exception(
        -:  380:    std::string const &err, std::string const &Q = "",
        -:  381:    char const sqlstate[] = nullptr,
        -:  382:    std::source_location loc = std::source_location::current()) :
        -:  383:          sql_error{err, Q, sqlstate, loc}
        -:  384:  {}
        -:  385:#else
        -:  386:  explicit data_exception(
        -:  387:    std::string const &err, std::string const &Q = "",
        -:  388:    char const sqlstate[] = nullptr) :
        -:  389:          sql_error{err, Q, sqlstate}
        -:  390:  {}
        -:  391:#endif
        -:  392:};
        -:  393:
        -:  394:struct PQXX_LIBEXPORT integrity_constraint_violation : sql_error
        -:  395:{
        -:  396:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  397:  explicit integrity_constraint_violation(
        -:  398:    std::string const &err, std::string const &Q = "",
        -:  399:    char const sqlstate[] = nullptr,
        -:  400:    std::source_location loc = std::source_location::current()) :
        -:  401:          sql_error{err, Q, sqlstate, loc}
        -:  402:  {}
        -:  403:#else
        -:  404:  explicit integrity_constraint_violation(
        -:  405:    std::string const &err, std::string const &Q = "",
        -:  406:    char const sqlstate[] = nullptr) :
        -:  407:          sql_error{err, Q, sqlstate}
        -:  408:  {}
        -:  409:#endif
        -:  410:};
        -:  411:
        -:  412:struct PQXX_LIBEXPORT restrict_violation : integrity_constraint_violation
        -:  413:{
        -:  414:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  415:  explicit restrict_violation(
        -:  416:    std::string const &err, std::string const &Q = "",
        -:  417:    char const sqlstate[] = nullptr,
        -:  418:    std::source_location loc = std::source_location::current()) :
        -:  419:          integrity_constraint_violation{err, Q, sqlstate, loc}
        -:  420:  {}
        -:  421:#else
        -:  422:  explicit restrict_violation(
        -:  423:    std::string const &err, std::string const &Q = "",
        -:  424:    char const sqlstate[] = nullptr) :
        -:  425:          integrity_constraint_violation{err, Q, sqlstate}
        -:  426:  {}
        -:  427:#endif
        -:  428:};
        -:  429:
        -:  430:struct PQXX_LIBEXPORT not_null_violation : integrity_constraint_violation
        -:  431:{
        -:  432:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  433:  explicit not_null_violation(
        -:  434:    std::string const &err, std::string const &Q = "",
        -:  435:    char const sqlstate[] = nullptr,
        -:  436:    std::source_location loc = std::source_location::current()) :
        -:  437:          integrity_constraint_violation{err, Q, sqlstate, loc}
        -:  438:  {}
        -:  439:#else
        -:  440:  explicit not_null_violation(
        -:  441:    std::string const &err, std::string const &Q = "",
        -:  442:    char const sqlstate[] = nullptr) :
        -:  443:          integrity_constraint_violation{err, Q, sqlstate}
        -:  444:  {}
        -:  445:#endif
        -:  446:};
        -:  447:
        -:  448:struct PQXX_LIBEXPORT foreign_key_violation : integrity_constraint_violation
        -:  449:{
        -:  450:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  451:  explicit foreign_key_violation(
        -:  452:    std::string const &err, std::string const &Q = "",
        -:  453:    char const sqlstate[] = nullptr,
        -:  454:    std::source_location loc = std::source_location::current()) :
        -:  455:          integrity_constraint_violation{err, Q, sqlstate, loc}
        -:  456:  {}
        -:  457:#else
        -:  458:  explicit foreign_key_violation(
        -:  459:    std::string const &err, std::string const &Q = "",
        -:  460:    char const sqlstate[] = nullptr) :
        -:  461:          integrity_constraint_violation{err, Q, sqlstate}
        -:  462:  {}
        -:  463:#endif
        -:  464:};
        -:  465:
        -:  466:struct PQXX_LIBEXPORT unique_violation : integrity_constraint_violation
        -:  467:{
        -:  468:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  469:  explicit unique_violation(
        -:  470:    std::string const &err, std::string const &Q = "",
        -:  471:    char const sqlstate[] = nullptr,
        -:  472:    std::source_location loc = std::source_location::current()) :
        -:  473:          integrity_constraint_violation{err, Q, sqlstate, loc}
        -:  474:  {}
        -:  475:#else
        -:  476:  explicit unique_violation(
        -:  477:    std::string const &err, std::string const &Q = "",
        -:  478:    char const sqlstate[] = nullptr) :
        -:  479:          integrity_constraint_violation{err, Q, sqlstate}
        -:  480:  {}
        -:  481:#endif
        -:  482:};
        -:  483:
        -:  484:struct PQXX_LIBEXPORT check_violation : integrity_constraint_violation
        -:  485:{
        -:  486:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  487:  explicit check_violation(
        -:  488:    std::string const &err, std::string const &Q = "",
        -:  489:    char const sqlstate[] = nullptr,
        -:  490:    std::source_location loc = std::source_location::current()) :
        -:  491:          integrity_constraint_violation{err, Q, sqlstate, loc}
        -:  492:  {}
        -:  493:#else
        -:  494:  explicit check_violation(
        -:  495:    std::string const &err, std::string const &Q = "",
        -:  496:    char const sqlstate[] = nullptr) :
        -:  497:          integrity_constraint_violation{err, Q, sqlstate}
        -:  498:  {}
        -:  499:#endif
        -:  500:};
        -:  501:
        -:  502:struct PQXX_LIBEXPORT invalid_cursor_state : sql_error
        -:  503:{
        -:  504:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  505:  explicit invalid_cursor_state(
        -:  506:    std::string const &err, std::string const &Q = "",
        -:  507:    char const sqlstate[] = nullptr,
        -:  508:    std::source_location loc = std::source_location::current()) :
        -:  509:          sql_error{err, Q, sqlstate, loc}
        -:  510:  {}
        -:  511:#else
        -:  512:  explicit invalid_cursor_state(
        -:  513:    std::string const &err, std::string const &Q = "",
        -:  514:    char const sqlstate[] = nullptr) :
        -:  515:          sql_error{err, Q, sqlstate}
        -:  516:  {}
        -:  517:#endif
        -:  518:};
        -:  519:
        -:  520:struct PQXX_LIBEXPORT invalid_sql_statement_name : sql_error
        -:  521:{
        -:  522:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  523:  explicit invalid_sql_statement_name(
        -:  524:    std::string const &err, std::string const &Q = "",
        -:  525:    char const sqlstate[] = nullptr,
        -:  526:    std::source_location loc = std::source_location::current()) :
        -:  527:          sql_error{err, Q, sqlstate, loc}
        -:  528:  {}
        -:  529:#else
        -:  530:  explicit invalid_sql_statement_name(
        -:  531:    std::string const &err, std::string const &Q = "",
        -:  532:    char const sqlstate[] = nullptr) :
        -:  533:          sql_error{err, Q, sqlstate}
        -:  534:  {}
        -:  535:#endif
        -:  536:};
        -:  537:
        -:  538:struct PQXX_LIBEXPORT invalid_cursor_name : sql_error
        -:  539:{
        -:  540:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  541:  explicit invalid_cursor_name(
        -:  542:    std::string const &err, std::string const &Q = "",
        -:  543:    char const sqlstate[] = nullptr,
        -:  544:    std::source_location loc = std::source_location::current()) :
        -:  545:          sql_error{err, Q, sqlstate, loc}
        -:  546:  {}
        -:  547:#else
        -:  548:  explicit invalid_cursor_name(
        -:  549:    std::string const &err, std::string const &Q = "",
        -:  550:    char const sqlstate[] = nullptr) :
        -:  551:          sql_error{err, Q, sqlstate}
        -:  552:  {}
        -:  553:#endif
        -:  554:};
        -:  555:
        -:  556:struct PQXX_LIBEXPORT syntax_error : sql_error
        -:  557:{
        -:  558:  /// Approximate position in string where error occurred, or -1 if unknown.
        -:  559:  int const error_position;
        -:  560:
        -:  561:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  562:  explicit syntax_error(
        -:  563:    std::string const &err, std::string const &Q = "",
        -:  564:    char const sqlstate[] = nullptr, int pos = -1,
        -:  565:    std::source_location loc = std::source_location::current()) :
        -:  566:          sql_error{err, Q, sqlstate, loc}, error_position{pos}
        -:  567:  {}
        -:  568:#else
        -:  569:  explicit syntax_error(
        -:  570:    std::string const &err, std::string const &Q = "",
        -:  571:    char const sqlstate[] = nullptr, int pos = -1) :
        -:  572:          sql_error{err, Q, sqlstate}, error_position{pos}
        -:  573:  {}
        -:  574:#endif
        -:  575:};
        -:  576:
        -:  577:struct PQXX_LIBEXPORT undefined_column : syntax_error
        -:  578:{
        -:  579:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  580:  explicit undefined_column(
        -:  581:    std::string const &err, std::string const &Q = "",
        -:  582:    char const sqlstate[] = nullptr,
        -:  583:    std::source_location loc = std::source_location::current()) :
        -:  584:          // TODO: Can we get the column?
        -:  585:          syntax_error{err, Q, sqlstate, -1, loc}
        -:  586:  {}
        -:  587:#else
        -:  588:  explicit undefined_column(
        -:  589:    std::string const &err, std::string const &Q = "",
        -:  590:    char const sqlstate[] = nullptr) :
        -:  591:          syntax_error{err, Q, sqlstate}
        -:  592:  {}
        -:  593:#endif
        -:  594:};
        -:  595:
        -:  596:struct PQXX_LIBEXPORT undefined_function : syntax_error
        -:  597:{
        -:  598:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  599:  explicit undefined_function(
        -:  600:    std::string const &err, std::string const &Q = "",
        -:  601:    char const sqlstate[] = nullptr,
        -:  602:    std::source_location loc = std::source_location::current()) :
        -:  603:          // TODO: Can we get the column?
        -:  604:          syntax_error{err, Q, sqlstate, -1, loc}
        -:  605:  {}
        -:  606:#else
        -:  607:  explicit undefined_function(
        -:  608:    std::string const &err, std::string const &Q = "",
        -:  609:    char const sqlstate[] = nullptr) :
        -:  610:          syntax_error{err, Q, sqlstate}
        -:  611:  {}
        -:  612:#endif
        -:  613:};
        -:  614:
        -:  615:struct PQXX_LIBEXPORT undefined_table : syntax_error
        -:  616:{
        -:  617:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  618:  explicit undefined_table(
        -:  619:    std::string const &err, std::string const &Q = "",
        -:  620:    char const sqlstate[] = nullptr,
        -:  621:    std::source_location loc = std::source_location::current()) :
        -:  622:          // TODO: Can we get the column?
        -:  623:          syntax_error{err, Q, sqlstate, -1, loc}
        -:  624:  {}
        -:  625:#else
        -:  626:  explicit undefined_table(
        -:  627:    std::string const &err, std::string const &Q = "",
        -:  628:    char const sqlstate[] = nullptr) :
        -:  629:          syntax_error{err, Q, sqlstate}
        -:  630:  {}
        -:  631:#endif
        -:  632:};
        -:  633:
        -:  634:struct PQXX_LIBEXPORT insufficient_privilege : sql_error
        -:  635:{
        -:  636:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  637:  explicit insufficient_privilege(
        -:  638:    std::string const &err, std::string const &Q = "",
        -:  639:    char const sqlstate[] = nullptr,
        -:  640:    std::source_location loc = std::source_location::current()) :
        -:  641:          sql_error{err, Q, sqlstate, loc}
        -:  642:  {}
        -:  643:#else
        -:  644:  explicit insufficient_privilege(
        -:  645:    std::string const &err, std::string const &Q = "",
        -:  646:    char const sqlstate[] = nullptr) :
        -:  647:          sql_error{err, Q, sqlstate}
        -:  648:  {}
        -:  649:#endif
        -:  650:};
        -:  651:
        -:  652:/// Resource shortage on the server
        -:  653:struct PQXX_LIBEXPORT insufficient_resources : sql_error
        -:  654:{
        -:  655:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  656:  explicit insufficient_resources(
        -:  657:    std::string const &err, std::string const &Q = "",
        -:  658:    char const sqlstate[] = nullptr,
        -:  659:    std::source_location loc = std::source_location::current()) :
        -:  660:          sql_error{err, Q, sqlstate, loc}
        -:  661:  {}
        -:  662:#else
        -:  663:  explicit insufficient_resources(
        -:  664:    std::string const &err, std::string const &Q = "",
        -:  665:    char const sqlstate[] = nullptr) :
        -:  666:          sql_error{err, Q, sqlstate}
        -:  667:  {}
        -:  668:#endif
        -:  669:};
        -:  670:
        -:  671:struct PQXX_LIBEXPORT disk_full : insufficient_resources
        -:  672:{
        -:  673:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  674:  explicit disk_full(
        -:  675:    std::string const &err, std::string const &Q = "",
        -:  676:    char const sqlstate[] = nullptr,
        -:  677:    std::source_location loc = std::source_location::current()) :
        -:  678:          insufficient_resources{err, Q, sqlstate, loc}
        -:  679:  {}
        -:  680:#else
        -:  681:  explicit disk_full(
        -:  682:    std::string const &err, std::string const &Q = "",
        -:  683:    char const sqlstate[] = nullptr) :
        -:  684:          insufficient_resources{err, Q, sqlstate}
        -:  685:  {}
        -:  686:#endif
        -:  687:};
        -:  688:
        -:  689:struct PQXX_LIBEXPORT out_of_memory : insufficient_resources
        -:  690:{
        -:  691:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  692:  explicit out_of_memory(
        -:  693:    std::string const &err, std::string const &Q = "",
        -:  694:    char const sqlstate[] = nullptr,
        -:  695:    std::source_location loc = std::source_location::current()) :
        -:  696:          insufficient_resources{err, Q, sqlstate, loc}
        -:  697:  {}
        -:  698:#else
        -:  699:  explicit out_of_memory(
        -:  700:    std::string const &err, std::string const &Q = "",
        -:  701:    char const sqlstate[] = nullptr) :
        -:  702:          insufficient_resources{err, Q, sqlstate}
        -:  703:  {}
        -:  704:#endif
        -:  705:};
        -:  706:
        -:  707:struct PQXX_LIBEXPORT too_many_connections : broken_connection
        -:  708:{
        -:  709:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  710:  explicit too_many_connections(
        -:  711:    std::string const &err,
        -:  712:    std::source_location loc = std::source_location::current()) :
        -:  713:          broken_connection{err, loc}
        -:  714:  {}
        -:  715:#else
        -:  716:  explicit too_many_connections(std::string const &err) :
        -:  717:          broken_connection{err}
        -:  718:  {}
        -:  719:#endif
        -:  720:};
        -:  721:
        -:  722:/// PL/pgSQL error
        -:  723:/** Exceptions derived from this class are errors from PL/pgSQL procedures.
        -:  724: */
        -:  725:struct PQXX_LIBEXPORT plpgsql_error : sql_error
        -:  726:{
        -:  727:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  728:  explicit plpgsql_error(
        -:  729:    std::string const &err, std::string const &Q = "",
        -:  730:    char const sqlstate[] = nullptr,
        -:  731:    std::source_location loc = std::source_location::current()) :
        -:  732:          sql_error{err, Q, sqlstate, loc}
        -:  733:  {}
        -:  734:#else
        -:  735:  explicit plpgsql_error(
        -:  736:    std::string const &err, std::string const &Q = "",
        -:  737:    char const sqlstate[] = nullptr) :
        -:  738:          sql_error{err, Q, sqlstate}
        -:  739:  {}
        -:  740:#endif
        -:  741:};
        -:  742:
        -:  743:/// Exception raised in PL/pgSQL procedure
        -:  744:struct PQXX_LIBEXPORT plpgsql_raise : plpgsql_error
        -:  745:{
        -:  746:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  747:  explicit plpgsql_raise(
        -:  748:    std::string const &err, std::string const &Q = "",
        -:  749:    char const sqlstate[] = nullptr,
        -:  750:    std::source_location loc = std::source_location::current()) :
        -:  751:          plpgsql_error{err, Q, sqlstate, loc}
        -:  752:  {}
        -:  753:#else
        -:  754:  explicit plpgsql_raise(
        -:  755:    std::string const &err, std::string const &Q = "",
        -:  756:    char const sqlstate[] = nullptr) :
        -:  757:          plpgsql_error{err, Q, sqlstate}
        -:  758:  {}
        -:  759:#endif
        -:  760:};
        -:  761:
        -:  762:struct PQXX_LIBEXPORT plpgsql_no_data_found : plpgsql_error
        -:  763:{
        -:  764:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  765:  explicit plpgsql_no_data_found(
        -:  766:    std::string const &err, std::string const &Q = "",
        -:  767:    char const sqlstate[] = nullptr,
        -:  768:    std::source_location loc = std::source_location::current()) :
        -:  769:          plpgsql_error{err, Q, sqlstate, loc}
        -:  770:  {}
        -:  771:#else
        -:  772:  explicit plpgsql_no_data_found(
        -:  773:    std::string const &err, std::string const &Q = "",
        -:  774:    char const sqlstate[] = nullptr) :
        -:  775:          plpgsql_error{err, Q, sqlstate}
        -:  776:  {}
        -:  777:#endif
        -:  778:};
        -:  779:
        -:  780:struct PQXX_LIBEXPORT plpgsql_too_many_rows : plpgsql_error
        -:  781:{
        -:  782:#if defined(PQXX_HAVE_SOURCE_LOCATION)
        -:  783:  explicit plpgsql_too_many_rows(
        -:  784:    std::string const &err, std::string const &Q = "",
        -:  785:    char const sqlstate[] = nullptr,
        -:  786:    std::source_location loc = std::source_location::current()) :
        -:  787:          plpgsql_error{err, Q, sqlstate, loc}
        -:  788:  {}
        -:  789:#else
        -:  790:  explicit plpgsql_too_many_rows(
        -:  791:    std::string const &err, std::string const &Q = "",
        -:  792:    char const sqlstate[] = nullptr) :
        -:  793:          plpgsql_error{err, Q, sqlstate}
        -:  794:  {}
        -:  795:#endif
        -:  796:};
        -:  797:
        -:  798:/**
        -:  799: * @}
        -:  800: */
        -:  801:} // namespace pqxx
        -:  802:#endif
