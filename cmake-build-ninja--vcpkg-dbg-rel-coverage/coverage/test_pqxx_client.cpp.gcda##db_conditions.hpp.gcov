        -:    0:Source:/home/neo/MedicamentLibrary/common/db/base/db_conditions.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// db_conditions.hpp
        -:    2:
        -:    3:#pragma once
        -:    4:
        -:    5:#include <memory>
        -:    6:#include <optional>
        -:    7:#include <string>
        -:    8:#include <vector>
        -:    9:
        -:   10:#include "db_field.hpp"
        -:   11:
        -:   12:namespace drug_lib::common::database
        -:   13:{
        -:   14:    class FieldCondition
        -:   15:    {
        -:   16:    public:
function _ZN8drug_lib6common8database14FieldConditionD2Ev called 16 returned 100% blocks executed 100%
       16:   17:        ~FieldCondition() = default;
       16:   17-block  0
function _ZN8drug_lib6common8database14FieldConditionC2EOS2_ called 9 returned 100% blocks executed 100%
        9:   18:        FieldCondition(FieldCondition&&) noexcept = default;
        9:   18-block  0
        -:   19:        FieldCondition& operator=(FieldCondition&&) noexcept = default;
        -:   20:        FieldCondition(const FieldCondition&) = delete;
        -:   21:        FieldCondition& operator=(const FieldCondition&) = delete;
        -:   22:
function _ZN8drug_lib6common8database14FieldConditionC2ESt10unique_ptrINS1_9FieldBaseESt14default_deleteIS4_EENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 7 returned 100% blocks executed 100%
        7:   23:        FieldCondition(std::unique_ptr<FieldBase> field, std::string op, std::unique_ptr<FieldBase> value)
        7:   24:            : field_(std::move(field)), operator_(std::move(op)), value_(std::move(value))
        -:   25:        {
        7:   26:        }
        7:   26-block  0
        -:   27:
        -:   28:        [[nodiscard]] const std::unique_ptr<FieldBase>& field() const & { return field_; }
        -:   29:        [[nodiscard]] const std::string& op() const & { return operator_; }
        -:   30:        [[nodiscard]] const std::unique_ptr<FieldBase>& value() const & { return value_; }
        -:   31:
        -:   32:    private:
        -:   33:        std::unique_ptr<FieldBase> field_;
        -:   34:        std::string operator_;
        -:   35:        std::unique_ptr<FieldBase> value_;
        -:   36:    };
        -:   37:
function _ZN8drug_lib6common8database16PatternConditionC2ERKS2_ called 6 returned 100% blocks executed 100%
        -:   38:    class PatternCondition final
        -:   39:    {
        -:   40:    public:
function _ZN8drug_lib6common8database16PatternConditionC2EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   41:        explicit PatternCondition(std::string&& pattern) : pattern_(std::move(pattern))
        -:   42:        {
        1:   43:        }
        1:   43-block  0
        -:   44:
function _ZN8drug_lib6common8database16PatternConditionC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 100%
        5:   45:        explicit PatternCondition(const std::string& pattern) : pattern_(pattern)
        -:   46:        {
        5:   47:        }
        5:   47-block  0
        -:   48:
function _ZN8drug_lib6common8database16PatternConditionD2Ev called 12 returned 100% blocks executed 100%
       12:   49:        ~PatternCondition() = default;
       12:   49-block  0
        -:   50:
        -:   51:        [[nodiscard]] const std::string& get_pattern() const &
        -:   52:        {
        -:   53:            return pattern_;
        -:   54:        }
        -:   55:
        -:   56:        void set_pattern(std::string&& pattern) &
        -:   57:        {
        -:   58:            pattern_ = std::move(pattern);
        -:   59:        }
        -:   60:
        -:   61:        void set_pattern(const std::string& pattern) &
        -:   62:        {
        -:   63:            pattern_ = pattern;
        -:   64:        }
        -:   65:
        -:   66:    protected:
        -:   67:        std::string pattern_;
        -:   68:    };
        -:   69:
        -:   70:    enum class order_type
        -:   71:    {
        -:   72:        ascending,
        -:   73:        descending
        -:   74:    };
        -:   75:
        -:   76:    class OrderCondition final
        -:   77:    {
        -:   78:    public:
function _ZN8drug_lib6common8database14OrderConditionD2Ev called 2 returned 100% blocks executed 100%
        2:   79:        ~OrderCondition() = default;
        2:   79-block  0
function _ZN8drug_lib6common8database14OrderConditionC2EOS2_ called 1 returned 100% blocks executed 100%
        1:   80:        OrderCondition(OrderCondition&&) noexcept = default;
        1:   80-block  0
        -:   81:        OrderCondition& operator=(OrderCondition&&) noexcept = default;
        -:   82:        OrderCondition(const OrderCondition&) = delete;
        -:   83:        OrderCondition& operator=(const OrderCondition&) = delete;
        -:   84:
        -:   85:        explicit OrderCondition(std::unique_ptr<FieldBase>&& field,
        -:   86:                                const order_type order = order_type::ascending, std::string spec_ = {}) :
        -:   87:            column_(std::move(field)), order_(order), specifier_(std::move(spec_))
        -:   88:        {
        -:   89:        }
        -:   90:
function _ZN8drug_lib6common8database14OrderConditionC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_10order_typeES8_ called 1 returned 100% blocks executed 50%
        1:   91:        explicit OrderCondition(std::string column_name,
        -:   92:                                const order_type order = order_type::ascending, std::string spec_ = {}) :
        1:   93:            order_(order), specifier_(std::move(spec_))
        -:   94:        {
        1:   95:            column_ = std::make_unique<Field<int32_t>>(std::move(column_name), 0);
        1:   95-block  0
branch  0 taken 1
branch  1 taken 0
        1:   96:        }
        1:   96-block  0
    $$$$$:   96-block  1
    $$$$$:   96-block  2
        -:   97:
        -:   98:        [[nodiscard]] const std::unique_ptr<FieldBase>& get_column() const
        -:   99:        {
        -:  100:            return column_;
        -:  101:        }
        -:  102:
        -:  103:        void set_column(std::unique_ptr<FieldBase>&& column) &
        -:  104:        {
        -:  105:            column_ = std::move(column);
        -:  106:        }
        -:  107:
        -:  108:        [[nodiscard]] order_type get_order() const
        -:  109:        {
        -:  110:            return order_;
        -:  111:        }
        -:  112:
        -:  113:        void set_order(const order_type order) &
        -:  114:        {
        -:  115:            order_ = order;
        -:  116:        }
        -:  117:
        -:  118:        [[nodiscard]] const std::string& get_specifier() const
        -:  119:        {
        -:  120:            return specifier_;
        -:  121:        }
        -:  122:
        -:  123:        void set_specifier(const std::string& specifier) &
        -:  124:        {
        -:  125:            specifier_ = specifier;
        -:  126:        }
        -:  127:
        -:  128:        void set_specifier(std::string&& specifier) &
        -:  129:        {
        -:  130:            specifier_ = std::move(specifier);
        -:  131:        }
        -:  132:
        -:  133:    private:
        -:  134:        std::unique_ptr<FieldBase> column_;
        -:  135:        order_type order_ = order_type::ascending;
        -:  136:        std::string specifier_;
        -:  137:    };
        -:  138:
        -:  139:    class PageCondition final
        -:  140:    {
        -:  141:    public:
        -:  142:        ~PageCondition() = default;
        -:  143:        // Constructors
function _ZN8drug_lib6common8database13PageConditionC2Eii called 3 returned 100% blocks executed 100%
        3:  144:        explicit PageCondition(const int32_t limit, const int32_t offset = 0)
        3:  145:            : limit_(limit), offset_(offset)
        -:  146:        {
        3:  147:        }
        3:  147-block  0
        -:  148:
        -:  149:        // Accessors
        -:  150:        [[nodiscard]] uint32_t get_limit() const &
        -:  151:        {
        -:  152:            return limit_;
        -:  153:        }
        -:  154:
        -:  155:        [[nodiscard]] uint32_t get_offset() const &
        -:  156:        {
        -:  157:            return offset_;
        -:  158:        }
        -:  159:
        -:  160:        // Modifiers
        -:  161:        void set_limit(const uint32_t limit) &
        -:  162:        {
        -:  163:            limit_ = limit;
        -:  164:        }
        -:  165:
        -:  166:        PageCondition& set_limit(const uint32_t limit) &&
        -:  167:        {
        -:  168:            limit_ = limit;
        -:  169:            return *this;
        -:  170:        }
        -:  171:
        -:  172:        /// @warning accept 1-indexing
        -:  173:        PageCondition& set_page_number(const uint32_t page_number) &&
        -:  174:        {
        -:  175:            offset_ = limit_ * (page_number - 1);
        -:  176:            return *this;
        -:  177:        }
        -:  178:
function _ZNR8drug_lib6common8database13PageCondition15set_page_numberEi called 1 returned 100% blocks executed 100%
        1:  179:        void set_page_number(const int32_t page_number) &
        -:  180:        {
        1:  181:            offset_ = limit_ * (page_number - 1);
        1:  182:        }
        1:  182-block  0
        -:  183:
        -:  184:        void set_offset(const uint32_t offset)
        -:  185:        {
        -:  186:            offset_ = offset;
        -:  187:        }
        -:  188:
        -:  189:    private:
        -:  190:        uint32_t limit_; // Number of records per page
        -:  191:        uint32_t offset_; // Starting point in the dataset (calculated as page_number * limit)
        -:  192:    };
        -:  193:
function _ZN8drug_lib6common8database10ConditionsC2Ev called 12 returned 100% blocks executed 100%
        -:  194:    class Conditions final
        -:  195:    {
        -:  196:    public:
function _ZN8drug_lib6common8database10ConditionsD2Ev called 12 returned 100% blocks executed 100%
       12:  197:        ~Conditions() = default;
       12:  197-block  0
        -:  198:
function _ZNR8drug_lib6common8database10Conditions19add_field_conditionEONS1_14FieldConditionE called 7 returned 100% blocks executed 100%
        7:  199:        void add_field_condition(FieldCondition&& condition) &
        -:  200:        {
        7:  201:            conditions_.push_back(std::move(condition));
        7:  202:        }
        7:  202-block  0
        -:  203:
        -:  204:        template <typename... Args>
        -:  205:        void add_field_condition(Args&&... args) &
        -:  206:        {
        -:  207:            conditions_.emplace_back(std::forward<Args>(args)...);
        -:  208:        }
        -:  209:
function _ZNR8drug_lib6common8database10Conditions21add_pattern_conditionEONS1_16PatternConditionE called 6 returned 100% blocks executed 100%
        6:  210:        void add_pattern_condition(PatternCondition&& condition) &
        -:  211:        {
        6:  212:            patterns_.push_back(std::move(condition));
        6:  213:        }
        6:  213-block  0
        -:  214:
        -:  215:        template <typename... Args>
        -:  216:        void add_pattern_condition(Args&&... args) &
        -:  217:        {
        -:  218:            patterns_.emplace_back(std::forward<Args>(args)...);
        -:  219:        }
        -:  220:
function _ZNR8drug_lib6common8database10Conditions22add_order_by_conditionEONS1_14OrderConditionE called 1 returned 100% blocks executed 100%
        1:  221:        void add_order_by_condition(OrderCondition&& condition) &
        -:  222:        {
        1:  223:            orders_.push_back(std::move(condition));
        1:  224:        }
        1:  224-block  0
        -:  225:
        -:  226:        template <typename... Args>
        -:  227:        void add_order_by_condition(Args&&... args) &
        -:  228:        {
        -:  229:            orders_.emplace_back(std::forward<Args>(args)...);
        -:  230:        }
        -:  231:
        -:  232:
        -:  233:        template <typename... Args>
        -:  234:        void set_page_condition(Args&&... args) &
        -:  235:        {
        -:  236:            pages_ = PageCondition(std::forward<Args>(args)...);
        -:  237:        }
        -:  238:
        -:  239:
function _ZNR8drug_lib6common8database10Conditions18set_page_conditionENS1_13PageConditionE called 4 returned 100% blocks executed 100%
        4:  240:        void set_page_condition(PageCondition condition) &
        -:  241:        {
        4:  242:            pages_ = condition;
        4:  243:        }
        4:  243-block  0
        -:  244:
        -:  245:        void pop_field_condition() &
        -:  246:        {
        -:  247:            conditions_.pop_back();
        -:  248:        }
        -:  249:
function _ZNR8drug_lib6common8database10Conditions21pop_pattern_conditionEv called 3 returned 100% blocks executed 100%
        3:  250:        void pop_pattern_condition() &
        -:  251:        {
        3:  252:            patterns_.pop_back();
        3:  253:        }
        3:  253-block  0
        -:  254:
        -:  255:        void pop_order_by_condition() &
        -:  256:        {
        -:  257:            orders_.pop_back();
        -:  258:        }
        -:  259:
        -:  260:        void clear_field_conditions() &
        -:  261:        {
        -:  262:            conditions_.clear();
        -:  263:        }
        -:  264:
        -:  265:        void clear_pattern_conditions() &
        -:  266:        {
        -:  267:            patterns_.clear();
        -:  268:        }
        -:  269:
        -:  270:        void clear_order_by_conditions() &
        -:  271:        {
        -:  272:            orders_.clear();
        -:  273:        }
        -:  274:
        -:  275:        void clear_page_conditions() &
        -:  276:        {
        -:  277:            pages_.reset();
        -:  278:        }
        -:  279:
        -:  280:        [[nodiscard]] const std::vector<FieldCondition>& fields_conditions() const &
        -:  281:        {
        -:  282:            return conditions_;
        -:  283:        }
        -:  284:
        -:  285:        [[nodiscard]] const std::vector<PatternCondition>& pattern_conditions() const &
        -:  286:        {
        -:  287:            return patterns_;
        -:  288:        }
        -:  289:
        -:  290:        [[nodiscard]] const std::vector<OrderCondition>& order_by_conditions() const &
        -:  291:        {
        -:  292:            return orders_;
        -:  293:        }
        -:  294:
        -:  295:        [[nodiscard]] const std::optional<PageCondition>& page_condition() const &
        -:  296:        {
        -:  297:            return pages_;
        -:  298:        }
        -:  299:
        -:  300:        [[nodiscard]] bool empty() const
        -:  301:        {
        -:  302:            return conditions_.empty() && patterns_.empty() && orders_.empty() && !pages_.has_value();
        -:  303:        }
        -:  304:
        -:  305:    private:
        -:  306:        std::vector<FieldCondition> conditions_;
        -:  307:        std::vector<PatternCondition> patterns_;
        -:  308:        std::vector<OrderCondition> orders_;
        -:  309:        std::optional<PageCondition> pages_;
        -:  310:    };
        -:  311:}
