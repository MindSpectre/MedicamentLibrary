        -:    0:Source:/usr/include/c++/12/bits/allocator.h
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2022 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505L
        -:   53:
        -:   54:namespace std _GLIBCXX_VISIBILITY(default)
        -:   55:{
        -:   56:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   57:
        -:   58:  /**
        -:   59:   *  @addtogroup allocators
        -:   60:   *  @{
        -:   61:   */
        -:   62:
        -:   63:  // Since C++20 the primary template should be used for allocator<void>,
        -:   64:  // but then it would have a non-trivial default ctor and dtor for C++20,
        -:   65:  // but trivial for C++98-17, which would be an ABI incompatibiliy between
        -:   66:  // different standard dialects. So C++20 still uses the allocator<void>
        -:   67:  // explicit specialization, with the historical ABI properties, but with
        -:   68:  // the same members that are present in the primary template.
        -:   69:
        -:   70:  /// allocator<void> specialization.
        -:   71:  template<>
        -:   72:    class allocator<void>
        -:   73:    {
        -:   74:    public:
        -:   75:      typedef void        value_type;
        -:   76:      typedef size_t      size_type;
        -:   77:      typedef ptrdiff_t   difference_type;
        -:   78:
        -:   79:#if __cplusplus <= 201703L
        -:   80:      // These were removed for C++20, allocator_traits does the right thing.
        -:   81:      typedef void*       pointer;
        -:   82:      typedef const void* const_pointer;
        -:   83:
        -:   84:      template<typename _Tp1>
        -:   85:	struct rebind
        -:   86:	{ typedef allocator<_Tp1> other; };
        -:   87:#endif
        -:   88:
        -:   89:#if __cplusplus >= 201103L
        -:   90:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   91:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   92:      using propagate_on_container_move_assignment = true_type;
        -:   93:
        -:   94:      using is_always_equal
        -:   95:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:   96:	= true_type;
        -:   97:
        -:   98:#if __cplusplus >= 202002L
        -:   99:      // As noted above, these members are present for C++20 to provide the
        -:  100:      // same API as the primary template, but still trivial as in pre-C++20.
        -:  101:      allocator() = default;
        -:  102:      ~allocator() = default;
        -:  103:
        -:  104:      template<typename _Up>
        -:  105:	constexpr
        -:  106:	allocator(const allocator<_Up>&) noexcept { }
        -:  107:
        -:  108:      // No allocate member because it's ill-formed by LWG 3307.
        -:  109:      // No deallocate member because it would be undefined to call it
        -:  110:      // with any pointer which wasn't obtained from allocate.
        -:  111:#endif // C++20
        -:  112:#endif // C++11
        -:  113:    };
        -:  114:
        -:  115:  /**
        -:  116:   * @brief  The @a standard allocator, as per C++03 [20.4.1].
        -:  117:   *
        -:  118:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  119:   *  for further details.
        -:  120:   *
        -:  121:   *  @tparam  _Tp  Type of allocated object.
        -:  122:   */
        -:  123:  template<typename _Tp>
        -:  124:    class allocator : public __allocator_base<_Tp>
        -:  125:    {
        -:  126:    public:
        -:  127:      typedef _Tp        value_type;
        -:  128:      typedef size_t     size_type;
        -:  129:      typedef ptrdiff_t  difference_type;
        -:  130:
        -:  131:#if __cplusplus <= 201703L
        -:  132:      // These were removed for C++20.
        -:  133:      typedef _Tp*       pointer;
        -:  134:      typedef const _Tp* const_pointer;
        -:  135:      typedef _Tp&       reference;
        -:  136:      typedef const _Tp& const_reference;
        -:  137:
        -:  138:      template<typename _Tp1>
        -:  139:	struct rebind
        -:  140:	{ typedef allocator<_Tp1> other; };
        -:  141:#endif
        -:  142:
        -:  143:#if __cplusplus >= 201103L
        -:  144:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  145:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  146:      using propagate_on_container_move_assignment = true_type;
        -:  147:
        -:  148:      using is_always_equal
        -:  149:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:  150:	= true_type;
        -:  151:#endif
        -:  152:
        -:  153:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  154:      // 3035. std::allocator's constructors should be constexpr
        -:  155:      _GLIBCXX20_CONSTEXPR
function _ZNSaISt10shared_ptrIN8drug_lib6common8database9FieldBaseEEEC2Ev called 132 returned 100% blocks executed 100%
function _ZNSaIiEC2Ev called 100084 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEEC2Ev called 1188740 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14FieldConditionEEC2Ev called 12 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database16PatternConditionEEC2Ev called 12 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14OrderConditionEEC2Ev called 12 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEEC2Ev called 1 returned 100% blocks executed 100%
function _ZNSaISt6threadEC2Ev called 2 returned 100% blocks executed 100%
function _ZNSaISt19_Sp_counted_deleterIPN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_ESaIvELN9__gnu_cxx12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database6RecordEEC2Ev called 100046 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagEEC2Ev called 6 returned 100% blocks executed 100%
  1389049:  156:      allocator() _GLIBCXX_NOTHROW { }
      132:  156-block  0
   100084:  156-block  1
  1188740:  156-block  2
       12:  156-block  3
       12:  156-block  4
       12:  156-block  5
        1:  156-block  6
        2:  156-block  7
        2:  156-block  8
   100046:  156-block  9
        6:  156-block 10
        -:  157:
        -:  158:      _GLIBCXX20_CONSTEXPR
function _ZNSaISt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEEC2ERKS7_ called 1165431 returned 100% blocks executed 100%
function _ZNSaISt10shared_ptrIN8drug_lib6common8database9FieldBaseEEEC2ERKS5_ called 264 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database6RecordEEC2ERKS3_ called 200008 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EEEC2ERKS7_ called 2 returned 100% blocks executed 100%
function _ZNSaIiEC2ERKS_ called 1 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEEC2ERKS1_ called 1 returned 100% blocks executed 100%
  1365707:  159:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
  1365707:  160:      : __allocator_base<_Tp>(__a) { }
  1165431:  160-block  0
      264:  160-block  1
   200008:  160-block  2
        2:  160-block  3
        1:  160-block  4
        1:  160-block  5
        -:  161:
        -:  162:#if __cplusplus >= 201103L
        -:  163:      // Avoid implicit deprecation.
        -:  164:      allocator& operator=(const allocator&) = default;
        -:  165:#endif
        -:  166:
        -:  167:      template<typename _Tp1>
        -:  168:	_GLIBCXX20_CONSTEXPR
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database10PqxxClientESaIvELN9__gnu_cxx12_Lock_policyE2EEEC2IvEERKSaIT_E called 40 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database5FieldIiEESaIvELN9__gnu_cxx12_Lock_policyE2EEEC2IvEERKSaIT_E called 40 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEEC2IvEERKSaIT_E called 84 returned 100% blocks executed 100%
function _ZNSaISt19_Sp_counted_deleterIPN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_ESaIvELN9__gnu_cxx12_Lock_policyE2EEEC2IvEERKSaIT_E called 2 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEEC2IiEERKSaIT_E called 1 returned 100% blocks executed 100%
      167:  169:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
       40:  169-block  0
       40:  169-block  1
       84:  169-block  2
        2:  169-block  3
        1:  169-block  4
        -:  170:
        -:  171:#if __cpp_constexpr_dynamic_alloc
        -:  172:      constexpr
        -:  173:#endif
function _ZNSaISt10shared_ptrIN8drug_lib6common8database9FieldBaseEEED2Ev called 396 returned 100% blocks executed 100%
function _ZNSaIiED2Ev called 100085 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEED2Ev called 2414572 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14OrderConditionEED2Ev called 12 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database16PatternConditionEED2Ev called 12 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14FieldConditionEED2Ev called 12 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database6RecordEED2Ev called 300054 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EEED2Ev called 2437 returned 100% blocks executed 100%
function _ZNSaISt6threadED2Ev called 2 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEED2Ev called 3 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagEED2Ev called 6 returned 100% blocks executed 100%
  2817591:  174:      ~allocator() _GLIBCXX_NOTHROW { }
      396:  174-block  0
   100085:  174-block  1
  2414572:  174-block  2
       12:  174-block  3
       12:  174-block  4
       12:  174-block  5
   300054:  174-block  6
     2437:  174-block  7
        2:  174-block  8
        3:  174-block  9
        6:  174-block 10
        -:  175:
        -:  176:#if __cplusplus > 201703L
        -:  177:      [[nodiscard,__gnu__::__always_inline__]]
        -:  178:      constexpr _Tp*
function _ZNSaIcE8allocateEm called 25298024 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEE8allocateEm called 2942699 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database6RecordEE8allocateEm called 100064 returned 100% blocks executed 100%
function _ZNSaISt10shared_ptrIN8drug_lib6common8database9FieldBaseEEE8allocateEm called 113 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14FieldConditionEE8allocateEm called 7 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database16PatternConditionEE8allocateEm called 3 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14OrderConditionEE8allocateEm called 1 returned 100% blocks executed 100%
function _ZNSaISt6threadE8allocateEm called 2 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database10PqxxClientESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEm called 20 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database5FieldIiEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEm called 20 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEm called 42 returned 100% blocks executed 100%
function _ZNSaISt19_Sp_counted_deleterIPN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_ESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEm called 2 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEE8allocateEm called 4 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagEE8allocateEm called 6 returned 100% blocks executed 100%
 28341007:  179:      allocate(size_t __n)
        -:  180:      {
        -:  181:	if (std::__is_constant_evaluated())
        -:  182:	  {
        -:  183:	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
        -:  184:	      std::__throw_bad_array_new_length();
        -:  185:	    return static_cast<_Tp*>(::operator new(__n));
        -:  186:	  }
        -:  187:
 28341007:  188:	return __allocator_base<_Tp>::allocate(__n, 0);
 25298024:  188-block  0
  2942699:  188-block  1
   100064:  188-block  2
      113:  188-block  3
        7:  188-block  4
        3:  188-block  5
        1:  188-block  6
        2:  188-block  7
       20:  188-block  8
       20:  188-block  9
       42:  188-block 10
        2:  188-block 11
        4:  188-block 12
        6:  188-block 13
        -:  189:      }
        -:  190:
        -:  191:      [[__gnu__::__always_inline__]]
        -:  192:      constexpr void
function _ZNSaIcE10deallocateEPcm called 25211088 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEE10deallocateEPS6_m called 2956507 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database6RecordEE10deallocateEPS2_m called 100064 returned 100% blocks executed 100%
function _ZNSaISt10shared_ptrIN8drug_lib6common8database9FieldBaseEEE10deallocateEPS4_m called 113 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14FieldConditionEE10deallocateEPS2_m called 7 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database14OrderConditionEE10deallocateEPS2_m called 1 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common8database16PatternConditionEE10deallocateEPS2_m called 3 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEE10deallocateEPS0_m called 4 returned 100% blocks executed 100%
function _ZNSaISt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EEE10deallocateEPS6_m called 2435 returned 100% blocks executed 100%
function _ZNSaISt6threadE10deallocateEPS_m called 2 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database10PqxxClientESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS7_m called 20 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database5FieldIiEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPS8_m called 20 returned 100% blocks executed 100%
function _ZNSaISt23_Sp_counted_ptr_inplaceIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSE_m called 42 returned 100% blocks executed 100%
function _ZNSaISt19_Sp_counted_deleterIPN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_ESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSH_m called 2 returned 100% blocks executed 100%
function _ZNSaIN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagEE10deallocateEPS8_m called 6 returned 100% blocks executed 100%
 28270314:  193:      deallocate(_Tp* __p, size_t __n)
        -:  194:      {
        -:  195:	if (std::__is_constant_evaluated())
        -:  196:	  {
        -:  197:	    ::operator delete(__p);
        -:  198:	    return;
        -:  199:	  }
 28270314:  200:	__allocator_base<_Tp>::deallocate(__p, __n);
 28270314:  201:      }
 25211088:  201-block  0
  2956507:  201-block  1
   100064:  201-block  2
      113:  201-block  3
        7:  201-block  4
        1:  201-block  5
        3:  201-block  6
        4:  201-block  7
     2435:  201-block  8
        2:  201-block  9
       20:  201-block 10
       20:  201-block 11
       42:  201-block 12
        2:  201-block 13
        6:  201-block 14
        -:  202:#endif // C++20
        -:  203:
        -:  204:      friend _GLIBCXX20_CONSTEXPR bool
function _ZSteqRKSaIcES1_ called 0 returned 0% blocks executed 0%
    #####:  205:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
    #####:  206:      { return true; }
    $$$$$:  206-block  0
        -:  207:
        -:  208:#if __cpp_impl_three_way_comparison < 201907L
        -:  209:      friend _GLIBCXX20_CONSTEXPR bool
        -:  210:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  211:      { return false; }
        -:  212:#endif
        -:  213:
        -:  214:      // Inherit everything else.
        -:  215:    };
        -:  216:
        -:  217:  template<typename _T1, typename _T2>
        -:  218:    inline _GLIBCXX20_CONSTEXPR bool
        -:  219:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  220:    _GLIBCXX_NOTHROW
        -:  221:    { return true; }
        -:  222:
        -:  223:#if __cpp_impl_three_way_comparison < 201907L
        -:  224:  template<typename _T1, typename _T2>
        -:  225:    inline _GLIBCXX20_CONSTEXPR bool
        -:  226:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  227:    _GLIBCXX_NOTHROW
        -:  228:    { return false; }
        -:  229:#endif
        -:  230:
        -:  231:  // Invalid allocator<cv T> partial specializations.
        -:  232:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  233:  template<typename _Tp>
        -:  234:    class allocator<const _Tp>
        -:  235:    {
        -:  236:    public:
        -:  237:      typedef _Tp value_type;
        -:  238:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  239:    };
        -:  240:
        -:  241:  template<typename _Tp>
        -:  242:    class allocator<volatile _Tp>
        -:  243:    {
        -:  244:    public:
        -:  245:      typedef _Tp value_type;
        -:  246:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  247:    };
        -:  248:
        -:  249:  template<typename _Tp>
        -:  250:    class allocator<const volatile _Tp>
        -:  251:    {
        -:  252:    public:
        -:  253:      typedef _Tp value_type;
        -:  254:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  255:    };
        -:  256:
        -:  257:  /// @} group allocator
        -:  258:
        -:  259:  // Inhibit implicit instantiations for required instantiations,
        -:  260:  // which are defined via explicit instantiations elsewhere.
        -:  261:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  262:  extern template class allocator<char>;
        -:  263:  extern template class allocator<wchar_t>;
        -:  264:#endif
        -:  265:
        -:  266:  // Undefine.
        -:  267:#undef __allocator_base
        -:  268:
        -:  269:  // To implement Option 3 of DR 431.
        -:  270:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  271:    struct __alloc_swap
        -:  272:    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
        -:  273:
        -:  274:  template<typename _Alloc>
        -:  275:    struct __alloc_swap<_Alloc, false>
        -:  276:    {
        -:  277:      static void
        -:  278:      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
        -:  279:      {
        -:  280:	// Precondition: swappable allocators.
        -:  281:	if (__one != __two)
        -:  282:	  swap(__one, __two);
        -:  283:      }
        -:  284:    };
        -:  285:
        -:  286:  // Optimize for stateless allocators.
        -:  287:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  288:    struct __alloc_neq
        -:  289:    {
        -:  290:      static bool
        -:  291:      _S_do_it(const _Alloc&, const _Alloc&)
        -:  292:      { return false; }
        -:  293:    };
        -:  294:
        -:  295:  template<typename _Alloc>
        -:  296:    struct __alloc_neq<_Alloc, false>
        -:  297:    {
        -:  298:      static bool
        -:  299:      _S_do_it(const _Alloc& __one, const _Alloc& __two)
        -:  300:      { return __one != __two; }
        -:  301:    };
        -:  302:
        -:  303:#if __cplusplus >= 201103L
        -:  304:  template<typename _Tp, bool
        -:  305:    = __or_<is_copy_constructible<typename _Tp::value_type>,
        -:  306:            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
        -:  307:    struct __shrink_to_fit_aux
        -:  308:    { static bool _S_do_it(_Tp&) noexcept { return false; } };
        -:  309:
        -:  310:  template<typename _Tp>
        -:  311:    struct __shrink_to_fit_aux<_Tp, true>
        -:  312:    {
        -:  313:      _GLIBCXX20_CONSTEXPR
        -:  314:      static bool
        -:  315:      _S_do_it(_Tp& __c) noexcept
        -:  316:      {
        -:  317:#if __cpp_exceptions
        -:  318:	try
        -:  319:	  {
        -:  320:	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
        -:  321:		__make_move_if_noexcept_iterator(__c.end()),
        -:  322:		__c.get_allocator()).swap(__c);
        -:  323:	    return true;
        -:  324:	  }
        -:  325:	catch(...)
        -:  326:	  { return false; }
        -:  327:#else
        -:  328:	return false;
        -:  329:#endif
        -:  330:      }
        -:  331:    };
        -:  332:#endif
        -:  333:
        -:  334:_GLIBCXX_END_NAMESPACE_VERSION
        -:  335:} // namespace std
        -:  336:
        -:  337:#endif
