        -:    0:Source:/usr/include/c++/12/bits/unique_ptr.h
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// unique_ptr implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2008-2022 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/unique_ptr.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _UNIQUE_PTR_H
        -:   31:#define _UNIQUE_PTR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <debug/assertions.h>
        -:   35:#include <type_traits>
        -:   36:#include <tuple>
        -:   37:#include <bits/stl_function.h>
        -:   38:#include <bits/functional_hash.h>
        -:   39:#if __cplusplus > 201703L
        -:   40:# include <compare>
        -:   41:# include <ostream>
        -:   42:#endif
        -:   43:
        -:   44:#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
        -:   45:# if __cpp_lib_constexpr_memory < 202202L
        -:   46:// Defined with older value in bits/ptr_traits.h for C++20
        -:   47:#  undef __cpp_lib_constexpr_memory
        -:   48:#  define __cpp_lib_constexpr_memory 202202L
        -:   49:# endif
        -:   50:#endif
        -:   51:
        -:   52:namespace std _GLIBCXX_VISIBILITY(default)
        -:   53:{
        -:   54:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   55:
        -:   56:  /**
        -:   57:   * @addtogroup pointer_abstractions
        -:   58:   * @{
        -:   59:   */
        -:   60:
        -:   61:#if _GLIBCXX_USE_DEPRECATED
        -:   62:#pragma GCC diagnostic push
        -:   63:#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        -:   64:  template<typename> class auto_ptr;
        -:   65:#pragma GCC diagnostic pop
        -:   66:#endif
        -:   67:
        -:   68:  /// Primary template of default_delete, used by unique_ptr for single objects
        -:   69:  /// @since C++11
        -:   70:  template<typename _Tp>
        -:   71:    struct default_delete
        -:   72:    {
        -:   73:      /// Default constructor
        -:   74:      constexpr default_delete() noexcept = default;
        -:   75:
        -:   76:      /** @brief Converting constructor.
        -:   77:       *
        -:   78:       * Allows conversion from a deleter for objects of another type, `_Up`,
        -:   79:       * only if `_Up*` is convertible to `_Tp*`.
        -:   80:       */
        -:   81:      template<typename _Up,
        -:   82:	       typename = _Require<is_convertible<_Up*, _Tp*>>>
        -:   83:	_GLIBCXX23_CONSTEXPR
function _ZNSt14default_deleteIN8drug_lib6common8database9FieldBaseEEC2INS2_5FieldIiEEvEERKS_IT_E called 1189732 returned 100% blocks executed 100%
function _ZNSt14default_deleteIN8drug_lib6common8database9FieldBaseEEC2INS2_5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvEERKS_IT_E called 2772670 returned 100% blocks executed 100%
  3962402:   84:        default_delete(const default_delete<_Up>&) noexcept { }
  1189732:   84-block  0
  2772670:   84-block  1
        -:   85:
        -:   86:      /// Calls `delete __ptr`
        -:   87:      _GLIBCXX23_CONSTEXPR
        -:   88:      void
function _ZNKSt14default_deleteINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEEclEPS5_ called 72 returned 100% blocks executed 100%
function _ZNKSt14default_deleteINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclEPS5_ called 0 returned 0% blocks executed 0%
function _ZNKSt14default_deleteIN8drug_lib6common8database9FieldBaseEEclEPS3_ called 3977900 returned 100% blocks executed 100%
function _ZNKSt14default_deleteIN8drug_lib6common8database5FieldIiEEEclEPS4_ called 0 returned 0% blocks executed 0%
function _ZNKSt14default_deleteIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEclEPSA_ called 2 returned 100% blocks executed 100%
function _ZNKSt14default_deleteIN8drug_lib6common8database10ViewRecordEEclEPS3_ called 39301708 returned 100% blocks executed 100%
function _ZNKSt14default_deleteINSt6thread6_StateEEclEPS1_ called 0 returned 0% blocks executed 0%
function _ZNKSt14default_deleteIN4pqxx11transactionILNS0_15isolation_levelE0ELNS0_12write_policyE1EEEEclEPS4_ called 215 returned 100% blocks executed 100%
 43279897:   89:      operator()(_Tp* __ptr) const
        -:   90:      {
        -:   91:	static_assert(!is_void<_Tp>::value,
        -:   92:		      "can't delete pointer to incomplete type");
        -:   93:	static_assert(sizeof(_Tp)>0,
        -:   94:		      "can't delete pointer to incomplete type");
 43279897:   95:	delete __ptr;
       72:   95-block  0
branch  0 taken 0
branch  1 taken 72
       72:   95-block  1
    $$$$$:   95-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:   95-block  3
  3977900:   95-block  4
branch  4 taken 0
branch  5 taken 3977900
  3977900:   95-block  5
    $$$$$:   95-block  6
branch  6 never executed
branch  7 never executed
    $$$$$:   95-block  7
        2:   95-block  8
branch  8 taken 0
branch  9 taken 2
        2:   95-block  9
 39301708:   95-block 10
branch 10 taken 0
branch 11 taken 39301708
 39301708:   95-block 11
    $$$$$:   95-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:   95-block 13
      215:   95-block 14
branch 14 taken 0
branch 15 taken 215
      215:   95-block 15
 43279897:   96:      }
       72:   96-block  0
    $$$$$:   96-block  1
  3977900:   96-block  2
    $$$$$:   96-block  3
        2:   96-block  4
 39301708:   96-block  5
    $$$$$:   96-block  6
      215:   96-block  7
        -:   97:    };
        -:   98:
        -:   99:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  100:  // DR 740 - omit specialization for array objects with a compile time length
        -:  101:
        -:  102:  /// Specialization of default_delete for arrays, used by `unique_ptr<T[]>`
        -:  103:  template<typename _Tp>
        -:  104:    struct default_delete<_Tp[]>
        -:  105:    {
        -:  106:    public:
        -:  107:      /// Default constructor
        -:  108:      constexpr default_delete() noexcept = default;
        -:  109:
        -:  110:      /** @brief Converting constructor.
        -:  111:       *
        -:  112:       * Allows conversion from a deleter for arrays of another type, such as
        -:  113:       * a const-qualified version of `_Tp`.
        -:  114:       *
        -:  115:       * Conversions from types derived from `_Tp` are not allowed because
        -:  116:       * it is undefined to `delete[]` an array of derived types through a
        -:  117:       * pointer to the base type.
        -:  118:       */
        -:  119:      template<typename _Up,
        -:  120:	       typename = _Require<is_convertible<_Up(*)[], _Tp(*)[]>>>
        -:  121:	_GLIBCXX23_CONSTEXPR
        -:  122:        default_delete(const default_delete<_Up[]>&) noexcept { }
        -:  123:
        -:  124:      /// Calls `delete[] __ptr`
        -:  125:      template<typename _Up>
        -:  126:	_GLIBCXX23_CONSTEXPR
        -:  127:	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
function _ZNKSt14default_deleteIA_NSt14__tree_barrierISt18__empty_completionE9__state_tEEclIS3_EENSt9enable_ifIXsr14is_convertibleIPA_T_PS4_EE5valueEvE4typeEPS8_ called 2 returned 100% blocks executed 100%
        2:  128:	operator()(_Up* __ptr) const
        -:  129:	{
        -:  130:	  static_assert(sizeof(_Tp)>0,
        -:  131:			"can't delete pointer to incomplete type");
        2:  132:	  delete [] __ptr;
        2:  132-block  0
branch  0 taken 0
branch  1 taken 2
        2:  132-block  1
        2:  133:	}
        2:  133-block  0
        -:  134:    };
        -:  135:
        -:  136:  /// @cond undocumented
        -:  137:
        -:  138:  // Manages the pointer and deleter of a unique_ptr
        -:  139:  template <typename _Tp, typename _Dp>
        -:  140:    class __uniq_ptr_impl
        -:  141:    {
        -:  142:      template <typename _Up, typename _Ep, typename = void>
        -:  143:	struct _Ptr
        -:  144:	{
        -:  145:	  using type = _Up*;
        -:  146:	};
        -:  147:
        -:  148:      template <typename _Up, typename _Ep>
        -:  149:	struct
        -:  150:	_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
        -:  151:	{
        -:  152:	  using type = typename remove_reference<_Ep>::type::pointer;
        -:  153:	};
        -:  154:
        -:  155:    public:
        -:  156:      using _DeleterConstraint = enable_if<
        -:  157:        __and_<__not_<is_pointer<_Dp>>,
        -:  158:	       is_default_constructible<_Dp>>::value>;
        -:  159:
        -:  160:      using pointer = typename _Ptr<_Tp, _Dp>::type;
        -:  161:
        -:  162:      static_assert( !is_rvalue_reference<_Dp>::value,
        -:  163:		     "unique_ptr's deleter type must be a function object type"
        -:  164:		     " or an lvalue reference type" );
        -:  165:
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2Ev called 920635 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EEC2Ev called 2474 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EEC2Ev called 2 returned 100% blocks executed 100%
   923111:  166:      __uniq_ptr_impl() = default;
   920635:  166-block  0
     2474:  166-block  1
        2:  166-block  2
        -:  167:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EEC2EPS4_ called 1188752 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EEC2EPSA_ called 2773178 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt6thread6_StateESt14default_deleteIS1_EEC2EPS1_ called 13 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EEC2EPS3_ called 2 returned 100% blocks executed 100%
  3961945:  168:      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
  1188752:  168-block  0
  2773178:  168-block  1
       13:  168-block  2
        2:  168-block  3
        -:  169:
        -:  170:      template<typename _Del>
        -:  171:	_GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2IS4_INS2_5FieldIiEEEEEPS3_OT_ called 882240 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2IS4_INS2_5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEEPS3_OT_ called 2157981 returned 100% blocks executed 100%
  3040221:  172:	__uniq_ptr_impl(pointer __p, _Del&& __d)
  3040221:  173:	: _M_t(__p, std::forward<_Del>(__d)) { }
   882240:  173-block  0
  2157981:  173-block  1
        -:  174:
        -:  175:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2EOS6_ called 6975286 returned 100% blocks executed 100%
  6975286:  176:      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
  6975286:  177:      : _M_t(std::move(__u._M_t))
  6975286:  178:      { __u._M_ptr() = nullptr; }
  6975286:  178-block  0
        -:  179:
        -:  180:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EEaSEOS7_ called 2 returned 100% blocks executed 100%
        2:  181:      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
        -:  182:      {
        2:  183:	reset(__u.release());
        2:  184:	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
        2:  185:	return *this;
        2:  185-block  0
        -:  186:      }
        -:  187:
        -:  188:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE6_M_ptrEv called 144 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE6_M_ptrEv called 2474 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE6_M_ptrEv called 19711493 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EE6_M_ptrEv called 4741989 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE6_M_ptrEv called 11043315 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EE6_M_ptrEv called 14 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EE6_M_ptrEv called 117905124 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt6thread6_StateESt14default_deleteIS1_EE6_M_ptrEv called 26 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN4pqxx11transactionILNS0_15isolation_levelE0ELNS0_12write_policyE1EEESt14default_deleteIS4_EE6_M_ptrEv called 615562 returned 100% blocks executed 100%
154020141:  189:      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
      144:  189-block  0
     2474:  189-block  1
 19711493:  189-block  2
  4741989:  189-block  3
 11043315:  189-block  4
       14:  189-block  5
117905124:  189-block  6
       26:  189-block  7
   615562:  189-block  8
        -:  190:      _GLIBCXX23_CONSTEXPR
function _ZNKSt15__uniq_ptr_implINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE6_M_ptrEv called 0 returned 0% blocks executed 0%
function _ZNKSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE6_M_ptrEv called 2907986 returned 100% blocks executed 100%
function _ZNKSt15__uniq_ptr_implIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EE6_M_ptrEv called 396303 returned 100% blocks executed 100%
function _ZNKSt15__uniq_ptr_implINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE6_M_ptrEv called 630 returned 100% blocks executed 100%
function _ZNKSt15__uniq_ptr_implIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE6_M_ptrEv called 6 returned 100% blocks executed 100%
function _ZNKSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EE6_M_ptrEv called 2 returned 100% blocks executed 100%
  3304927:  191:      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
    $$$$$:  191-block  0
  2907986:  191-block  1
   396303:  191-block  2
      630:  191-block  3
        6:  191-block  4
        2:  191-block  5
        -:  192:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE10_M_deleterEv called 72 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE10_M_deleterEv called 0 returned 0% blocks executed 0%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EE10_M_deleterEv called 1188802 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE10_M_deleterEv called 4898535 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE10_M_deleterEv called 2771393 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EE10_M_deleterEv called 6 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EE10_M_deleterEv called 39301708 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt6thread6_StateESt14default_deleteIS1_EE10_M_deleterEv called 0 returned 0% blocks executed 0%
function _ZNSt15__uniq_ptr_implIN4pqxx11transactionILNS0_15isolation_levelE0ELNS0_12write_policyE1EEESt14default_deleteIS4_EE10_M_deleterEv called 205113 returned 100% blocks executed 100%
 48365629:  193:      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
       72:  193-block  0
    $$$$$:  193-block  1
  1188802:  193-block  2
  4898535:  193-block  3
  2771393:  193-block  4
        6:  193-block  5
 39301708:  193-block  6
    $$$$$:  193-block  7
   205113:  193-block  8
        -:  194:      _GLIBCXX23_CONSTEXPR
        -:  195:      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }
        -:  196:
        -:  197:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE5resetEPS3_ called 920635 returned 100% blocks executed 66%
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EE5resetEPS3_ called 2 returned 100% blocks executed 66%
   920637:  198:      void reset(pointer __p) noexcept
        -:  199:      {
   920637:  200:	const pointer __old_p = _M_ptr();
   920637:  201:	_M_ptr() = __p;
   920637:  202:	if (__old_p)
   920635:  202-block  0
branch  0 taken 920635
branch  1 taken 0
        2:  202-block  1
branch  2 taken 2
branch  3 taken 0
    #####:  203:	  _M_deleter()(__old_p);
    $$$$$:  203-block  0
    $$$$$:  203-block  1
   920637:  204:      }
   920635:  204-block  0
        2:  204-block  1
        -:  205:
        -:  206:      _GLIBCXX23_CONSTEXPR
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EE7releaseEv called 1189032 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE7releaseEv called 2773455 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_implINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_EE7releaseEv called 2 returned 100% blocks executed 100%
  3962489:  207:      pointer release() noexcept
        -:  208:      {
  3962489:  209:	pointer __p = _M_ptr();
  3962489:  210:	_M_ptr() = nullptr;
  3962489:  211:	return __p;
  1189032:  211-block  0
  2773455:  211-block  1
        2:  211-block  2
        -:  212:      }
        -:  213:
        -:  214:      _GLIBCXX23_CONSTEXPR
        -:  215:      void
        -:  216:      swap(__uniq_ptr_impl& __rhs) noexcept
        -:  217:      {
        -:  218:	using std::swap;
        -:  219:	swap(this->_M_ptr(), __rhs._M_ptr());
        -:  220:	swap(this->_M_deleter(), __rhs._M_deleter());
        -:  221:      }
        -:  222:
        -:  223:    private:
        -:  224:      tuple<pointer, _Dp> _M_t;
        -:  225:    };
        -:  226:
        -:  227:  // Defines move construction + assignment as either defaulted or deleted.
        -:  228:  template <typename _Tp, typename _Dp,
        -:  229:	    bool = is_move_constructible<_Dp>::value,
        -:  230:	    bool = is_move_assignable<_Dp>::value>
function _ZNSt15__uniq_ptr_dataIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_ELb1ELb1EEC2Ev called 920635 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_ELb1ELb1EEC2Ev called 2437 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_ELb1ELb1EEC2Ev called 2 returned 100% blocks executed 100%
        -:  231:    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
        -:  232:    {
function _ZNSt15__uniq_ptr_dataIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_ELb1ELb1EECI2St15__uniq_ptr_implIS4_S6_EEPS4_ called 1188715 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_ELb1ELb1EECI2St15__uniq_ptr_implIS3_S5_EIS4_INS2_5FieldIiEEEEEPS3_OT_ called 882700 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_ELb1ELb1EECI2St15__uniq_ptr_implISA_SC_EEPSA_ called 2772914 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_ELb1ELb1EECI2St15__uniq_ptr_implIS3_S5_EIS4_INS2_5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEEPS3_OT_ called 2158035 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataINSt6thread6_StateESt14default_deleteIS1_ELb1ELb1EECI2St15__uniq_ptr_implIS1_S3_EEPS1_ called 13 returned 100% blocks executed 100%
function _ZNSt15__uniq_ptr_dataINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_ELb1ELb1EECI2St15__uniq_ptr_implIS3_S6_EEPS3_ called 2 returned 100% blocks executed 100%
        -:  233:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
function _ZNSt15__uniq_ptr_dataIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_ELb1ELb1EEC2EOS6_ called 6973804 returned 100% blocks executed 100%
  6973804:  234:      __uniq_ptr_data(__uniq_ptr_data&&) = default;
  6973804:  234-block  0
function _ZNSt15__uniq_ptr_dataINSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIA_S3_ELb1ELb1EEaSEOS7_ called 2 returned 100% blocks executed 100%
        2:  235:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
        2:  235-block  0
        -:  236:    };
        -:  237:
        -:  238:  template <typename _Tp, typename _Dp>
        -:  239:    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
        -:  240:    {
        -:  241:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  242:      __uniq_ptr_data(__uniq_ptr_data&&) = default;
        -:  243:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
        -:  244:    };
        -:  245:
        -:  246:  template <typename _Tp, typename _Dp>
        -:  247:    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>
        -:  248:    {
        -:  249:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  250:      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
        -:  251:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
        -:  252:    };
        -:  253:
        -:  254:  template <typename _Tp, typename _Dp>
        -:  255:    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>
        -:  256:    {
        -:  257:      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
        -:  258:      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
        -:  259:      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
        -:  260:    };
        -:  261:  /// @endcond
        -:  262:
        -:  263:  // 20.7.1.2 unique_ptr for single objects.
        -:  264:
        -:  265:  /// A move-only smart pointer that manages unique ownership of a resource.
        -:  266:  /// @headerfile memory
        -:  267:  /// @since C++11
        -:  268:  template <typename _Tp, typename _Dp = default_delete<_Tp>>
        -:  269:    class unique_ptr
        -:  270:    {
        -:  271:      template <typename _Up>
        -:  272:	using _DeleterConstraint =
        -:  273:	  typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
        -:  274:
        -:  275:      __uniq_ptr_data<_Tp, _Dp> _M_t;
        -:  276:
        -:  277:    public:
        -:  278:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
        -:  279:      using element_type  = _Tp;
        -:  280:      using deleter_type  = _Dp;
        -:  281:
        -:  282:    private:
        -:  283:      // helper template for detecting a safe conversion from another
        -:  284:      // unique_ptr
        -:  285:      template<typename _Up, typename _Ep>
        -:  286:	using __safe_conversion_up = __and_<
        -:  287:	  is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
        -:  288:	  __not_<is_array<_Up>>
        -:  289:        >;
        -:  290:
        -:  291:    public:
        -:  292:      // Constructors.
        -:  293:
        -:  294:      /// Default constructor, creates a unique_ptr that owns nothing.
        -:  295:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2IS5_vEEv called 920635 returned 100% blocks executed 100%
function _ZNSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EEC2IS7_vEEv called 2437 returned 100% blocks executed 100%
   923072:  296:	constexpr unique_ptr() noexcept
   923072:  297:	: _M_t()
   923072:  298:	{ }
   920635:  298-block  0
     2437:  298-block  1
        -:  299:
        -:  300:      /** Takes ownership of a pointer.
        -:  301:       *
        -:  302:       * @param __p  A pointer to an object of @c element_type
        -:  303:       *
        -:  304:       * The deleter will be value-initialized.
        -:  305:       */
        -:  306:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  307:	_GLIBCXX23_CONSTEXPR
        -:  308:	explicit
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EEC2IS6_vEEPS4_ called 1188830 returned 100% blocks executed 66%
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EEC2ISC_vEEPSA_ called 2773213 returned 100% blocks executed 66%
function _ZNSt10unique_ptrINSt6thread6_StateESt14default_deleteIS1_EEC2IS3_vEEPS1_ called 13 returned 100% blocks executed 66%
  3962056:  309:	unique_ptr(pointer __p) noexcept
  3962056:  310:	: _M_t(__p)
  1188830:  310-block  0
branch  0 taken 1188830
branch  1 taken 0
    $$$$$:  310-block  1
  2773213:  310-block  2
branch  2 taken 2773213
branch  3 taken 0
    $$$$$:  310-block  3
       13:  310-block  4
branch  4 taken 13
branch  5 taken 0
    $$$$$:  310-block  5
  3962056:  311:        { }
  1188830:  311-block  0
  2773213:  311-block  1
       13:  311-block  2
        -:  312:
        -:  313:      /** Takes ownership of a pointer.
        -:  314:       *
        -:  315:       * @param __p  A pointer to an object of @c element_type
        -:  316:       * @param __d  A reference to a deleter.
        -:  317:       *
        -:  318:       * The deleter will be initialized with @p __d
        -:  319:       */
        -:  320:      template<typename _Del = deleter_type,
        -:  321:	       typename = _Require<is_copy_constructible<_Del>>>
        -:  322:	_GLIBCXX23_CONSTEXPR
        -:  323:	unique_ptr(pointer __p, const deleter_type& __d) noexcept
        -:  324:	: _M_t(__p, __d) { }
        -:  325:
        -:  326:      /** Takes ownership of a pointer.
        -:  327:       *
        -:  328:       * @param __p  A pointer to an object of @c element_type
        -:  329:       * @param __d  An rvalue reference to a (non-reference) deleter.
        -:  330:       *
        -:  331:       * The deleter will be initialized with @p std::move(__d)
        -:  332:       */
        -:  333:      template<typename _Del = deleter_type,
        -:  334:	       typename = _Require<is_move_constructible<_Del>>>
        -:  335:	_GLIBCXX23_CONSTEXPR
        -:  336:	unique_ptr(pointer __p,
        -:  337:		   __enable_if_t<!is_lvalue_reference<_Del>::value,
        -:  338:				 _Del&&> __d) noexcept
        -:  339:	: _M_t(__p, std::move(__d))
        -:  340:	{ }
        -:  341:
        -:  342:      template<typename _Del = deleter_type,
        -:  343:	       typename _DelUnref = typename remove_reference<_Del>::type>
        -:  344:	_GLIBCXX23_CONSTEXPR
        -:  345:	unique_ptr(pointer,
        -:  346:		   __enable_if_t<is_lvalue_reference<_Del>::value,
        -:  347:				 _DelUnref&&>) = delete;
        -:  348:
        -:  349:      /// Creates a unique_ptr that owns nothing.
        -:  350:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  351:	constexpr unique_ptr(nullptr_t) noexcept
        -:  352:	: _M_t()
        -:  353:	{ }
        -:  354:
        -:  355:      // Move constructors.
        -:  356:
        -:  357:      /// Move constructor.
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2EOS6_ called 6972716 returned 100% blocks executed 100%
  6972716:  358:      unique_ptr(unique_ptr&&) = default;
  6972716:  358-block  0
        -:  359:
        -:  360:      /** @brief Converting constructor from another type
        -:  361:       *
        -:  362:       * Requires that the pointer owned by @p __u is convertible to the
        -:  363:       * type of pointer owned by this object, @p __u does not own an array,
        -:  364:       * and @p __u has a compatible deleter type.
        -:  365:       */
        -:  366:      template<typename _Up, typename _Ep, typename = _Require<
        -:  367:               __safe_conversion_up<_Up, _Ep>,
        -:  368:	       __conditional_t<is_reference<_Dp>::value,
        -:  369:			       is_same<_Ep, _Dp>,
        -:  370:			       is_convertible<_Ep, _Dp>>>>
        -:  371:	_GLIBCXX23_CONSTEXPR
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2INS2_5FieldIiEES4_IS9_EvEEOS_IT_T0_E called 882433 returned 100% blocks executed 66%
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEC2INS2_5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEES4_ISF_EvEEOS_IT_T0_E called 2160105 returned 100% blocks executed 66%
  3042538:  372:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
  3042538:  373:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
   882433:  373-block  0
branch  0 taken 882433
branch  1 taken 0
    $$$$$:  373-block  1
  2160105:  373-block  2
branch  2 taken 2160105
branch  3 taken 0
    $$$$$:  373-block  3
  3042538:  374:	{ }
   882433:  374-block  0
  2160105:  374-block  1
        -:  375:
        -:  376:#if _GLIBCXX_USE_DEPRECATED
        -:  377:#pragma GCC diagnostic push
        -:  378:#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        -:  379:      /// Converting constructor from @c auto_ptr
        -:  380:      template<typename _Up, typename = _Require<
        -:  381:	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
        -:  382:	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
        -:  383:#pragma GCC diagnostic pop
        -:  384:#endif
        -:  385:
        -:  386:      /// Destructor, invokes the deleter if the stored pointer is not null.
        -:  387:#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
        -:  388:      constexpr
        -:  389:#endif
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EED2Ev called 10946367 returned 100% blocks executed 80%
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EED2Ev called 1189413 returned 100% blocks executed 40%
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EED2Ev called 2771174 returned 100% blocks executed 40%
function _ZNSt10unique_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EED2Ev called 2474 returned 100% blocks executed 40%
function _ZNSt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EED2Ev called 78603416 returned 100% blocks executed 80%
function _ZNSt10unique_ptrINSt6thread6_StateESt14default_deleteIS1_EED2Ev called 13 returned 100% blocks executed 40%
function _ZNSt10unique_ptrIN4pqxx11transactionILNS0_15isolation_levelE0ELNS0_12write_policyE1EEESt14default_deleteIS4_EED2Ev called 102678 returned 100% blocks executed 40%
 93615535:  390:      ~unique_ptr() noexcept
        -:  391:      {
        -:  392:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  393:		      "unique_ptr's deleter must be invocable with a pointer");
 93615535:  394:	auto& __ptr = _M_t._M_ptr();
 93615535:  395:	if (__ptr != nullptr)
 10946367:  395-block  0
branch  0 taken 6968467
branch  1 taken 3977900
  1189413:  395-block  1
branch  2 taken 1189413
branch  3 taken 0
  2771174:  395-block  2
branch  4 taken 2771174
branch  5 taken 0
    $$$$$:  395-block  3
branch  6 never executed
branch  7 never executed
     2474:  395-block  4
branch  8 taken 2474
branch  9 taken 0
 78603416:  395-block  5
branch 10 taken 39301708
branch 11 taken 39301708
       13:  395-block  6
branch 12 taken 13
branch 13 taken 0
   102678:  395-block  7
branch 14 taken 102678
branch 15 taken 0
 43279608:  396:	  get_deleter()(std::move(__ptr));
  3977900:  396-block  0
branch  0 taken 3977900
branch  1 taken 0
  3977900:  396-block  1
    $$$$$:  396-block  2
    $$$$$:  396-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:  396-block  4
    $$$$$:  396-block  5
    $$$$$:  396-block  6
branch  4 never executed
branch  5 never executed
    $$$$$:  396-block  7
    $$$$$:  396-block  8
    $$$$$:  396-block  9
branch  6 never executed
branch  7 never executed
    $$$$$:  396-block 10
    $$$$$:  396-block 11
    $$$$$:  396-block 12
branch  8 never executed
branch  9 never executed
    $$$$$:  396-block 13
    $$$$$:  396-block 14
 39301708:  396-block 15
branch 10 taken 39301708
branch 11 taken 0
 39301708:  396-block 16
    $$$$$:  396-block 17
    $$$$$:  396-block 18
branch 12 never executed
branch 13 never executed
    $$$$$:  396-block 19
    $$$$$:  396-block 20
    $$$$$:  396-block 21
branch 14 never executed
branch 15 never executed
    $$$$$:  396-block 22
    $$$$$:  396-block 23
 93615535:  397:	__ptr = pointer();
 93615535:  398:      }
 10946367:  398-block  0
  1189413:  398-block  1
  2771174:  398-block  2
    $$$$$:  398-block  3
     2474:  398-block  4
 78603416:  398-block  5
       13:  398-block  6
   102678:  398-block  7
        -:  399:
        -:  400:      // Assignment.
        -:  401:
        -:  402:      /** @brief Move assignment operator.
        -:  403:       *
        -:  404:       * Invokes the deleter if this object owns a pointer.
        -:  405:       */
        -:  406:      unique_ptr& operator=(unique_ptr&&) = default;
        -:  407:
        -:  408:      /** @brief Assignment from another type.
        -:  409:       *
        -:  410:       * @param __u  The object to transfer ownership from, which owns a
        -:  411:       *             convertible pointer to a non-array object.
        -:  412:       *
        -:  413:       * Invokes the deleter if this object owns a pointer.
        -:  414:       */
        -:  415:      template<typename _Up, typename _Ep>
        -:  416:	_GLIBCXX23_CONSTEXPR
        -:  417:        typename enable_if< __and_<
        -:  418:          __safe_conversion_up<_Up, _Ep>,
        -:  419:          is_assignable<deleter_type&, _Ep&&>
        -:  420:          >::value,
        -:  421:          unique_ptr&>::type
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEaSINS2_5FieldIiEES4_IS9_EEENSt9enable_ifIXsr6__and_ISt6__and_IJSt14is_convertibleINS_IT_T0_E7pointerEPS3_ESt6__not_ISt8is_arrayISE_EEEESt13is_assignableIRS5_OSF_EEE5valueERS6_E4typeEOSG_ called 306879 returned 100% blocks executed 100%
   306879:  422:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  423:	{
   306879:  424:	  reset(__u.release());
   306879:  425:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
   306879:  426:	  return *this;
   306879:  426-block  0
        -:  427:	}
        -:  428:
        -:  429:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
        -:  430:      _GLIBCXX23_CONSTEXPR
        -:  431:      unique_ptr&
        -:  432:      operator=(nullptr_t) noexcept
        -:  433:      {
        -:  434:	reset();
        -:  435:	return *this;
        -:  436:      }
        -:  437:
        -:  438:      // Observers.
        -:  439:
        -:  440:      /// Dereference the stored pointer.
        -:  441:      _GLIBCXX23_CONSTEXPR
        -:  442:      typename add_lvalue_reference<element_type>::type
function _ZNKSt10unique_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EEdeEv called 558 returned 100% blocks executed 100%
      558:  443:      operator*() const noexcept(noexcept(*std::declval<pointer>()))
        -:  444:      {
      558:  445:	__glibcxx_assert(get() != pointer());
      558:  445-block  0
      558:  445-block  1
      558:  445-block  2
      558:  446:	return *get();
      558:  446-block  0
        -:  447:      }
        -:  448:
        -:  449:      /// Return the stored pointer.
        -:  450:      _GLIBCXX23_CONSTEXPR
        -:  451:      pointer
function _ZNKSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EEptEv called 2907804 returned 100% blocks executed 100%
function _ZNKSt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EEptEv called 396303 returned 100% blocks executed 100%
function _ZNKSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EEptEv called 0 returned 0% blocks executed 0%
  3304107:  452:      operator->() const noexcept
        -:  453:      {
        -:  454:	_GLIBCXX_DEBUG_PEDASSERT(get() != pointer());
  3304107:  455:	return get();
  2907804:  455-block  0
   396303:  455-block  1
    $$$$$:  455-block  2
        -:  456:      }
        -:  457:
        -:  458:      /// Return the stored pointer.
        -:  459:      _GLIBCXX23_CONSTEXPR
        -:  460:      pointer
function _ZNKSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE3getEv called 0 returned 0% blocks executed 0%
function _ZNKSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE3getEv called 2907712 returned 100% blocks executed 100%
function _ZNKSt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EE3getEv called 396303 returned 100% blocks executed 100%
function _ZNKSt10unique_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE3getEv called 630 returned 100% blocks executed 100%
function _ZNKSt10unique_ptrIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE3getEv called 6 returned 100% blocks executed 100%
  3304651:  461:      get() const noexcept
  3304651:  462:      { return _M_t._M_ptr(); }
    $$$$$:  462-block  0
  2907712:  462-block  1
   396303:  462-block  2
      630:  462-block  3
        6:  462-block  4
        -:  463:
        -:  464:      /// Return a reference to the stored deleter.
        -:  465:      _GLIBCXX23_CONSTEXPR
        -:  466:      deleter_type&
function _ZNSt10unique_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE11get_deleterEv called 72 returned 100% blocks executed 100%
function _ZNSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EE11get_deleterEv called 0 returned 0% blocks executed 0%
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EE11get_deleterEv called 1188790 returned 100% blocks executed 100%
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE11get_deleterEv called 4898535 returned 100% blocks executed 100%
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE11get_deleterEv called 2771308 returned 100% blocks executed 100%
function _ZNSt10unique_ptrIN8drug_lib6common8database10ViewRecordESt14default_deleteIS3_EE11get_deleterEv called 39301708 returned 100% blocks executed 100%
function _ZNSt10unique_ptrINSt6thread6_StateESt14default_deleteIS1_EE11get_deleterEv called 0 returned 0% blocks executed 0%
function _ZNSt10unique_ptrIN4pqxx11transactionILNS0_15isolation_levelE0ELNS0_12write_policyE1EEESt14default_deleteIS4_EE11get_deleterEv called 0 returned 0% blocks executed 0%
 48160413:  467:      get_deleter() noexcept
 48160413:  468:      { return _M_t._M_deleter(); }
       72:  468-block  0
    $$$$$:  468-block  1
  1188790:  468-block  2
  4898535:  468-block  3
  2771308:  468-block  4
 39301708:  468-block  5
    $$$$$:  468-block  6
    $$$$$:  468-block  7
        -:  469:
        -:  470:      /// Return a reference to the stored deleter.
        -:  471:      _GLIBCXX23_CONSTEXPR
        -:  472:      const deleter_type&
        -:  473:      get_deleter() const noexcept
        -:  474:      { return _M_t._M_deleter(); }
        -:  475:
        -:  476:      /// Return @c true if the stored pointer is not null.
        -:  477:      _GLIBCXX23_CONSTEXPR
function _ZNKSt10unique_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EEcvbEv called 0 returned 0% blocks executed 0%
    #####:  478:      explicit operator bool() const noexcept
    #####:  479:      { return get() == pointer() ? false : true; }
    $$$$$:  479-block  0
        -:  480:
        -:  481:      // Modifiers.
        -:  482:
        -:  483:      /// Release ownership of any stored pointer.
        -:  484:      _GLIBCXX23_CONSTEXPR
        -:  485:      pointer
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldIiEESt14default_deleteIS4_EE7releaseEv called 1189185 returned 100% blocks executed 100%
function _ZNSt10unique_ptrIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESt14default_deleteISA_EE7releaseEv called 2773414 returned 100% blocks executed 100%
  3962599:  486:      release() noexcept
  3962599:  487:      { return _M_t.release(); }
  1189185:  487-block  0
  2773414:  487-block  1
        -:  488:
        -:  489:      /** @brief Replace the stored pointer.
        -:  490:       *
        -:  491:       * @param __p  The new pointer to store.
        -:  492:       *
        -:  493:       * The deleter will be invoked if a pointer is already owned.
        -:  494:       */
        -:  495:      _GLIBCXX23_CONSTEXPR
        -:  496:      void
function _ZNSt10unique_ptrIN8drug_lib6common8database9FieldBaseESt14default_deleteIS3_EE5resetEPS3_ called 920635 returned 100% blocks executed 100%
   920635:  497:      reset(pointer __p = pointer()) noexcept
        -:  498:      {
        -:  499:	static_assert(__is_invocable<deleter_type&, pointer>::value,
        -:  500:		      "unique_ptr's deleter must be invocable with a pointer");
   920635:  501:	_M_t.reset(std::move(__p));
   920635:  502:      }
   920635:  502-block  0
        -:  503:
        -:  504:      /// Exchange the pointer and deleter with another object.
        -:  505:      _GLIBCXX23_CONSTEXPR
        -:  506:      void
        -:  507:      swap(unique_ptr& __u) noexcept
        -:  508:      {
        -:  509:	static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
        -:  510:	_M_t.swap(__u._M_t);
        -:  511:      }
        -:  512:
        -:  513:      // Disable copy from lvalue.
        -:  514:      unique_ptr(const unique_ptr&) = delete;
        -:  515:      unique_ptr& operator=(const unique_ptr&) = delete;
        -:  516:  };
        -:  517:
        -:  518:  // 20.7.1.3 unique_ptr for array objects with a runtime length
        -:  519:  // [unique.ptr.runtime]
        -:  520:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  521:  // DR 740 - omit specialization for array objects with a compile time length
        -:  522:
        -:  523:  /// A move-only smart pointer that manages unique ownership of an array.
        -:  524:  /// @headerfile memory
        -:  525:  /// @since C++11
        -:  526:  template<typename _Tp, typename _Dp>
        -:  527:    class unique_ptr<_Tp[], _Dp>
        -:  528:    {
        -:  529:      template <typename _Up>
        -:  530:      using _DeleterConstraint =
        -:  531:	typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
        -:  532:
        -:  533:      __uniq_ptr_data<_Tp, _Dp> _M_t;
        -:  534:
        -:  535:      template<typename _Up>
        -:  536:	using __remove_cv = typename remove_cv<_Up>::type;
        -:  537:
        -:  538:      // like is_base_of<_Tp, _Up> but false if unqualified types are the same
        -:  539:      template<typename _Up>
        -:  540:	using __is_derived_Tp
        -:  541:	  = __and_< is_base_of<_Tp, _Up>,
        -:  542:		    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;
        -:  543:
        -:  544:    public:
        -:  545:      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
        -:  546:      using element_type  = _Tp;
        -:  547:      using deleter_type  = _Dp;
        -:  548:
        -:  549:      // helper template for detecting a safe conversion from another
        -:  550:      // unique_ptr
        -:  551:      template<typename _Up, typename _Ep,
        -:  552:               typename _UPtr = unique_ptr<_Up, _Ep>,
        -:  553:	       typename _UP_pointer = typename _UPtr::pointer,
        -:  554:	       typename _UP_element_type = typename _UPtr::element_type>
        -:  555:	using __safe_conversion_up = __and_<
        -:  556:          is_array<_Up>,
        -:  557:          is_same<pointer, element_type*>,
        -:  558:          is_same<_UP_pointer, _UP_element_type*>,
        -:  559:          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        -:  560:        >;
        -:  561:
        -:  562:      // helper template for detecting a safe conversion from a raw pointer
        -:  563:      template<typename _Up>
        -:  564:        using __safe_conversion_raw = __and_<
        -:  565:          __or_<__or_<is_same<_Up, pointer>,
        -:  566:                      is_same<_Up, nullptr_t>>,
        -:  567:                __and_<is_pointer<_Up>,
        -:  568:                       is_same<pointer, element_type*>,
        -:  569:                       is_convertible<
        -:  570:                         typename remove_pointer<_Up>::type(*)[],
        -:  571:                         element_type(*)[]>
        -:  572:                >
        -:  573:          >
        -:  574:        >;
        -:  575:
        -:  576:      // Constructors.
        -:  577:
        -:  578:      /// Default constructor, creates a unique_ptr that owns nothing.
        -:  579:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
function _ZNSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EEC2IS6_vEEv called 2 returned 100% blocks executed 100%
        2:  580:	constexpr unique_ptr() noexcept
        2:  581:	: _M_t()
        2:  582:	{ }
        2:  582-block  0
        -:  583:
        -:  584:      /** Takes ownership of a pointer.
        -:  585:       *
        -:  586:       * @param __p  A pointer to an array of a type safely convertible
        -:  587:       * to an array of @c element_type
        -:  588:       *
        -:  589:       * The deleter will be value-initialized.
        -:  590:       */
        -:  591:      template<typename _Up,
        -:  592:	       typename _Vp = _Dp,
        -:  593:	       typename = _DeleterConstraint<_Vp>,
        -:  594:	       typename = typename enable_if<
        -:  595:                 __safe_conversion_raw<_Up>::value, bool>::type>
        -:  596:	_GLIBCXX23_CONSTEXPR
        -:  597:	explicit
function _ZNSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EEC2IPS3_S6_vbEET_ called 2 returned 100% blocks executed 66%
        2:  598:	unique_ptr(_Up __p) noexcept
        2:  599:	: _M_t(__p)
        2:  599-block  0
branch  0 taken 2
branch  1 taken 0
    $$$$$:  599-block  1
        2:  600:        { }
        2:  600-block  0
        -:  601:
        -:  602:      /** Takes ownership of a pointer.
        -:  603:       *
        -:  604:       * @param __p  A pointer to an array of a type safely convertible
        -:  605:       * to an array of @c element_type
        -:  606:       * @param __d  A reference to a deleter.
        -:  607:       *
        -:  608:       * The deleter will be initialized with @p __d
        -:  609:       */
        -:  610:      template<typename _Up, typename _Del = deleter_type,
        -:  611:	       typename = _Require<__safe_conversion_raw<_Up>,
        -:  612:				   is_copy_constructible<_Del>>>
        -:  613:	_GLIBCXX23_CONSTEXPR
        -:  614:	unique_ptr(_Up __p, const deleter_type& __d) noexcept
        -:  615:	: _M_t(__p, __d) { }
        -:  616:
        -:  617:      /** Takes ownership of a pointer.
        -:  618:       *
        -:  619:       * @param __p  A pointer to an array of a type safely convertible
        -:  620:       * to an array of @c element_type
        -:  621:       * @param __d  A reference to a deleter.
        -:  622:       *
        -:  623:       * The deleter will be initialized with @p std::move(__d)
        -:  624:       */
        -:  625:      template<typename _Up, typename _Del = deleter_type,
        -:  626:	       typename = _Require<__safe_conversion_raw<_Up>,
        -:  627:				   is_move_constructible<_Del>>>
        -:  628:	_GLIBCXX23_CONSTEXPR
        -:  629:	unique_ptr(_Up __p,
        -:  630:		   __enable_if_t<!is_lvalue_reference<_Del>::value,
        -:  631:				 _Del&&> __d) noexcept
        -:  632:	: _M_t(std::move(__p), std::move(__d))
        -:  633:	{ }
        -:  634:
        -:  635:      template<typename _Up, typename _Del = deleter_type,
        -:  636:	       typename _DelUnref = typename remove_reference<_Del>::type,
        -:  637:	       typename = _Require<__safe_conversion_raw<_Up>>>
        -:  638:	unique_ptr(_Up,
        -:  639:		   __enable_if_t<is_lvalue_reference<_Del>::value,
        -:  640:				 _DelUnref&&>) = delete;
        -:  641:
        -:  642:      /// Move constructor.
        -:  643:      unique_ptr(unique_ptr&&) = default;
        -:  644:
        -:  645:      /// Creates a unique_ptr that owns nothing.
        -:  646:      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
        -:  647:	constexpr unique_ptr(nullptr_t) noexcept
        -:  648:	: _M_t()
        -:  649:        { }
        -:  650:
        -:  651:      template<typename _Up, typename _Ep, typename = _Require<
        -:  652:	       __safe_conversion_up<_Up, _Ep>,
        -:  653:	       __conditional_t<is_reference<_Dp>::value,
        -:  654:			       is_same<_Ep, _Dp>,
        -:  655:			       is_convertible<_Ep, _Dp>>>>
        -:  656:	_GLIBCXX23_CONSTEXPR
        -:  657:	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  658:	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
        -:  659:	{ }
        -:  660:
        -:  661:      /// Destructor, invokes the deleter if the stored pointer is not null.
        -:  662:#if __cplusplus > 202002L && __cpp_constexpr_dynamic_alloc
        -:  663:      constexpr
        -:  664:#endif
function _ZNSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EED2Ev called 4 returned 100% blocks executed 80%
        4:  665:      ~unique_ptr()
        -:  666:      {
        4:  667:	auto& __ptr = _M_t._M_ptr();
        4:  668:	if (__ptr != nullptr)
        4:  668-block  0
branch  0 taken 2
branch  1 taken 2
        2:  669:	  get_deleter()(__ptr);
        2:  669-block  0
branch  0 taken 2
branch  1 taken 0
        2:  669-block  1
    $$$$$:  669-block  2
        4:  670:	__ptr = pointer();
        4:  671:      }
        4:  671-block  0
        -:  672:
        -:  673:      // Assignment.
        -:  674:
        -:  675:      /** @brief Move assignment operator.
        -:  676:       *
        -:  677:       * Invokes the deleter if this object owns a pointer.
        -:  678:       */
        -:  679:      unique_ptr&
function _ZNSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EEaSEOS7_ called 2 returned 100% blocks executed 100%
        2:  680:      operator=(unique_ptr&&) = default;
        2:  680-block  0
        -:  681:
        -:  682:      /** @brief Assignment from another type.
        -:  683:       *
        -:  684:       * @param __u  The object to transfer ownership from, which owns a
        -:  685:       *             convertible pointer to an array object.
        -:  686:       *
        -:  687:       * Invokes the deleter if this object owns a pointer.
        -:  688:       */
        -:  689:      template<typename _Up, typename _Ep>
        -:  690:	_GLIBCXX23_CONSTEXPR
        -:  691:	typename
        -:  692:	enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
        -:  693:                         is_assignable<deleter_type&, _Ep&&>
        -:  694:                  >::value,
        -:  695:                  unique_ptr&>::type
        -:  696:	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
        -:  697:	{
        -:  698:	  reset(__u.release());
        -:  699:	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
        -:  700:	  return *this;
        -:  701:	}
        -:  702:
        -:  703:      /// Reset the %unique_ptr to empty, invoking the deleter if necessary.
        -:  704:      _GLIBCXX23_CONSTEXPR
        -:  705:      unique_ptr&
        -:  706:      operator=(nullptr_t) noexcept
        -:  707:      {
        -:  708:	reset();
        -:  709:	return *this;
        -:  710:      }
        -:  711:
        -:  712:      // Observers.
        -:  713:
        -:  714:      /// Access an element of owned array.
        -:  715:      _GLIBCXX23_CONSTEXPR
        -:  716:      typename std::add_lvalue_reference<element_type>::type
function _ZNKSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EEixEm called 2 returned 100% blocks executed 100%
        2:  717:      operator[](size_t __i) const
        -:  718:      {
        2:  719:	__glibcxx_assert(get() != pointer());
        2:  719-block  0
        2:  719-block  1
        2:  720:	return get()[__i];
        2:  720-block  0
        -:  721:      }
        -:  722:
        -:  723:      /// Return the stored pointer.
        -:  724:      _GLIBCXX23_CONSTEXPR
        -:  725:      pointer
function _ZNKSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EE3getEv called 2 returned 100% blocks executed 100%
        2:  726:      get() const noexcept
        2:  727:      { return _M_t._M_ptr(); }
        2:  727-block  0
        -:  728:
        -:  729:      /// Return a reference to the stored deleter.
        -:  730:      _GLIBCXX23_CONSTEXPR
        -:  731:      deleter_type&
function _ZNSt10unique_ptrIA_NSt14__tree_barrierISt18__empty_completionE9__state_tESt14default_deleteIS4_EE11get_deleterEv called 2 returned 100% blocks executed 100%
        2:  732:      get_deleter() noexcept
        2:  733:      { return _M_t._M_deleter(); }
        2:  733-block  0
        -:  734:
        -:  735:      /// Return a reference to the stored deleter.
        -:  736:      _GLIBCXX23_CONSTEXPR
        -:  737:      const deleter_type&
        -:  738:      get_deleter() const noexcept
        -:  739:      { return _M_t._M_deleter(); }
        -:  740:
        -:  741:      /// Return @c true if the stored pointer is not null.
        -:  742:      _GLIBCXX23_CONSTEXPR
        -:  743:      explicit operator bool() const noexcept
        -:  744:      { return get() == pointer() ? false : true; }
        -:  745:
        -:  746:      // Modifiers.
        -:  747:
        -:  748:      /// Release ownership of any stored pointer.
        -:  749:      _GLIBCXX23_CONSTEXPR
        -:  750:      pointer
        -:  751:      release() noexcept
        -:  752:      { return _M_t.release(); }
        -:  753:
        -:  754:      /** @brief Replace the stored pointer.
        -:  755:       *
        -:  756:       * @param __p  The new pointer to store.
        -:  757:       *
        -:  758:       * The deleter will be invoked if a pointer is already owned.
        -:  759:       */
        -:  760:      template <typename _Up,
        -:  761:                typename = _Require<
        -:  762:                  __or_<is_same<_Up, pointer>,
        -:  763:                        __and_<is_same<pointer, element_type*>,
        -:  764:                               is_pointer<_Up>,
        -:  765:                               is_convertible<
        -:  766:                                 typename remove_pointer<_Up>::type(*)[],
        -:  767:                                 element_type(*)[]
        -:  768:                               >
        -:  769:                        >
        -:  770:                  >
        -:  771:               >>
        -:  772:      _GLIBCXX23_CONSTEXPR
        -:  773:      void
        -:  774:      reset(_Up __p) noexcept
        -:  775:      { _M_t.reset(std::move(__p)); }
        -:  776:
        -:  777:      _GLIBCXX23_CONSTEXPR
        -:  778:      void reset(nullptr_t = nullptr) noexcept
        -:  779:      { reset(pointer()); }
        -:  780:
        -:  781:      /// Exchange the pointer and deleter with another object.
        -:  782:      _GLIBCXX23_CONSTEXPR
        -:  783:      void
        -:  784:      swap(unique_ptr& __u) noexcept
        -:  785:      {
        -:  786:	static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
        -:  787:	_M_t.swap(__u._M_t);
        -:  788:      }
        -:  789:
        -:  790:      // Disable copy from lvalue.
        -:  791:      unique_ptr(const unique_ptr&) = delete;
        -:  792:      unique_ptr& operator=(const unique_ptr&) = delete;
        -:  793:    };
        -:  794:
        -:  795:  /// @{
        -:  796:  /// @relates unique_ptr
        -:  797:
        -:  798:  /// Swap overload for unique_ptr
        -:  799:  template<typename _Tp, typename _Dp>
        -:  800:    inline
        -:  801:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
        -:  802:    // Constrained free swap overload, see p0185r1
        -:  803:    _GLIBCXX23_CONSTEXPR
        -:  804:    typename enable_if<__is_swappable<_Dp>::value>::type
        -:  805:#else
        -:  806:    void
        -:  807:#endif
        -:  808:    swap(unique_ptr<_Tp, _Dp>& __x,
        -:  809:	 unique_ptr<_Tp, _Dp>& __y) noexcept
        -:  810:    { __x.swap(__y); }
        -:  811:
        -:  812:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
        -:  813:  template<typename _Tp, typename _Dp>
        -:  814:    typename enable_if<!__is_swappable<_Dp>::value>::type
        -:  815:    swap(unique_ptr<_Tp, _Dp>&,
        -:  816:	 unique_ptr<_Tp, _Dp>&) = delete;
        -:  817:#endif
        -:  818:
        -:  819:  /// Equality operator for unique_ptr objects, compares the owned pointers
        -:  820:  template<typename _Tp, typename _Dp,
        -:  821:	   typename _Up, typename _Ep>
        -:  822:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  823:    inline bool
        -:  824:    operator==(const unique_ptr<_Tp, _Dp>& __x,
        -:  825:	       const unique_ptr<_Up, _Ep>& __y)
        -:  826:    { return __x.get() == __y.get(); }
        -:  827:
        -:  828:  /// unique_ptr comparison with nullptr
        -:  829:  template<typename _Tp, typename _Dp>
        -:  830:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  831:    inline bool
function _ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt14default_deleteIS5_EEbRKSt10unique_ptrIT_T0_EDn called 0 returned 0% blocks executed 0%
    #####:  832:    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    #####:  833:    { return !__x; }
    $$$$$:  833-block  0
        -:  834:
        -:  835:#ifndef __cpp_lib_three_way_comparison
        -:  836:  /// unique_ptr comparison with nullptr
        -:  837:  template<typename _Tp, typename _Dp>
        -:  838:    _GLIBCXX_NODISCARD
        -:  839:    inline bool
        -:  840:    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
        -:  841:    { return !__x; }
        -:  842:
        -:  843:  /// Inequality operator for unique_ptr objects, compares the owned pointers
        -:  844:  template<typename _Tp, typename _Dp,
        -:  845:	   typename _Up, typename _Ep>
        -:  846:    _GLIBCXX_NODISCARD
        -:  847:    inline bool
        -:  848:    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        -:  849:	       const unique_ptr<_Up, _Ep>& __y)
        -:  850:    { return __x.get() != __y.get(); }
        -:  851:
        -:  852:  /// unique_ptr comparison with nullptr
        -:  853:  template<typename _Tp, typename _Dp>
        -:  854:    _GLIBCXX_NODISCARD
        -:  855:    inline bool
        -:  856:    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
        -:  857:    { return (bool)__x; }
        -:  858:
        -:  859:  /// unique_ptr comparison with nullptr
        -:  860:  template<typename _Tp, typename _Dp>
        -:  861:    _GLIBCXX_NODISCARD
        -:  862:    inline bool
        -:  863:    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
        -:  864:    { return (bool)__x; }
        -:  865:#endif // three way comparison
        -:  866:
        -:  867:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  868:  template<typename _Tp, typename _Dp,
        -:  869:	   typename _Up, typename _Ep>
        -:  870:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  871:    inline bool
        -:  872:    operator<(const unique_ptr<_Tp, _Dp>& __x,
        -:  873:	      const unique_ptr<_Up, _Ep>& __y)
        -:  874:    {
        -:  875:      typedef typename
        -:  876:	std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
        -:  877:	                 typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
        -:  878:      return std::less<_CT>()(__x.get(), __y.get());
        -:  879:    }
        -:  880:
        -:  881:  /// unique_ptr comparison with nullptr
        -:  882:  template<typename _Tp, typename _Dp>
        -:  883:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  884:    inline bool
        -:  885:    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  886:    {
        -:  887:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
        -:  888:								 nullptr);
        -:  889:    }
        -:  890:
        -:  891:  /// unique_ptr comparison with nullptr
        -:  892:  template<typename _Tp, typename _Dp>
        -:  893:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  894:    inline bool
        -:  895:    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  896:    {
        -:  897:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
        -:  898:								 __x.get());
        -:  899:    }
        -:  900:
        -:  901:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  902:  template<typename _Tp, typename _Dp,
        -:  903:	   typename _Up, typename _Ep>
        -:  904:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  905:    inline bool
        -:  906:    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        -:  907:	       const unique_ptr<_Up, _Ep>& __y)
        -:  908:    { return !(__y < __x); }
        -:  909:
        -:  910:  /// unique_ptr comparison with nullptr
        -:  911:  template<typename _Tp, typename _Dp>
        -:  912:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  913:    inline bool
        -:  914:    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  915:    { return !(nullptr < __x); }
        -:  916:
        -:  917:  /// unique_ptr comparison with nullptr
        -:  918:  template<typename _Tp, typename _Dp>
        -:  919:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  920:    inline bool
        -:  921:    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  922:    { return !(__x < nullptr); }
        -:  923:
        -:  924:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  925:  template<typename _Tp, typename _Dp,
        -:  926:	   typename _Up, typename _Ep>
        -:  927:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  928:    inline bool
        -:  929:    operator>(const unique_ptr<_Tp, _Dp>& __x,
        -:  930:	      const unique_ptr<_Up, _Ep>& __y)
        -:  931:    { return (__y < __x); }
        -:  932:
        -:  933:  /// unique_ptr comparison with nullptr
        -:  934:  template<typename _Tp, typename _Dp>
        -:  935:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  936:    inline bool
        -:  937:    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  938:    {
        -:  939:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
        -:  940:								 __x.get());
        -:  941:    }
        -:  942:
        -:  943:  /// unique_ptr comparison with nullptr
        -:  944:  template<typename _Tp, typename _Dp>
        -:  945:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  946:    inline bool
        -:  947:    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  948:    {
        -:  949:      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
        -:  950:								 nullptr);
        -:  951:    }
        -:  952:
        -:  953:  /// Relational operator for unique_ptr objects, compares the owned pointers
        -:  954:  template<typename _Tp, typename _Dp,
        -:  955:	   typename _Up, typename _Ep>
        -:  956:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  957:    inline bool
        -:  958:    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        -:  959:	       const unique_ptr<_Up, _Ep>& __y)
        -:  960:    { return !(__x < __y); }
        -:  961:
        -:  962:  /// unique_ptr comparison with nullptr
        -:  963:  template<typename _Tp, typename _Dp>
        -:  964:    _GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR
        -:  965:    inline bool
        -:  966:    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  967:    { return !(__x < nullptr); }
        -:  968:
        -:  969:  /// unique_ptr comparison with nullptr
        -:  970:  template<typename _Tp, typename _Dp>
        -:  971:    _GLIBCXX_NODISCARD inline bool
        -:  972:    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
        -:  973:    { return !(nullptr < __x); }
        -:  974:
        -:  975:#ifdef __cpp_lib_three_way_comparison
        -:  976:  template<typename _Tp, typename _Dp, typename _Up, typename _Ep>
        -:  977:    requires three_way_comparable_with<typename unique_ptr<_Tp, _Dp>::pointer,
        -:  978:				       typename unique_ptr<_Up, _Ep>::pointer>
        -:  979:    _GLIBCXX23_CONSTEXPR
        -:  980:    inline
        -:  981:    compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer,
        -:  982:			       typename unique_ptr<_Up, _Ep>::pointer>
        -:  983:    operator<=>(const unique_ptr<_Tp, _Dp>& __x,
        -:  984:		const unique_ptr<_Up, _Ep>& __y)
        -:  985:    { return compare_three_way()(__x.get(), __y.get()); }
        -:  986:
        -:  987:  template<typename _Tp, typename _Dp>
        -:  988:    requires three_way_comparable<typename unique_ptr<_Tp, _Dp>::pointer>
        -:  989:    _GLIBCXX23_CONSTEXPR
        -:  990:    inline
        -:  991:    compare_three_way_result_t<typename unique_ptr<_Tp, _Dp>::pointer>
        -:  992:    operator<=>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
        -:  993:    {
        -:  994:      using pointer = typename unique_ptr<_Tp, _Dp>::pointer;
        -:  995:      return compare_three_way()(__x.get(), static_cast<pointer>(nullptr));
        -:  996:    }
        -:  997:#endif
        -:  998:  /// @} relates unique_ptr
        -:  999:
        -: 1000:  /// @cond undocumented
        -: 1001:  template<typename _Up, typename _Ptr = typename _Up::pointer,
        -: 1002:	   bool = __poison_hash<_Ptr>::__enable_hash_call>
        -: 1003:    struct __uniq_ptr_hash
        -: 1004:#if ! _GLIBCXX_INLINE_VERSION
        -: 1005:    : private __poison_hash<_Ptr>
        -: 1006:#endif
        -: 1007:    {
        -: 1008:      size_t
        -: 1009:      operator()(const _Up& __u) const
        -: 1010:      noexcept(noexcept(std::declval<hash<_Ptr>>()(std::declval<_Ptr>())))
        -: 1011:      { return hash<_Ptr>()(__u.get()); }
        -: 1012:    };
        -: 1013:
        -: 1014:  template<typename _Up, typename _Ptr>
        -: 1015:    struct __uniq_ptr_hash<_Up, _Ptr, false>
        -: 1016:    : private __poison_hash<_Ptr>
        -: 1017:    { };
        -: 1018:  /// @endcond
        -: 1019:
        -: 1020:  /// std::hash specialization for unique_ptr.
        -: 1021:  template<typename _Tp, typename _Dp>
        -: 1022:    struct hash<unique_ptr<_Tp, _Dp>>
        -: 1023:    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
        -: 1024:      public __uniq_ptr_hash<unique_ptr<_Tp, _Dp>>
        -: 1025:    { };
        -: 1026:
        -: 1027:#if __cplusplus >= 201402L
        -: 1028:#define __cpp_lib_make_unique 201304L
        -: 1029:
        -: 1030:  /// @cond undocumented
        -: 1031:namespace __detail
        -: 1032:{
        -: 1033:  template<typename _Tp>
        -: 1034:    struct _MakeUniq
        -: 1035:    { typedef unique_ptr<_Tp> __single_object; };
        -: 1036:
        -: 1037:  template<typename _Tp>
        -: 1038:    struct _MakeUniq<_Tp[]>
        -: 1039:    { typedef unique_ptr<_Tp[]> __array; };
        -: 1040:
        -: 1041:  template<typename _Tp, size_t _Bound>
        -: 1042:    struct _MakeUniq<_Tp[_Bound]>
        -: 1043:    { struct __invalid_type { }; };
        -: 1044:
        -: 1045:  template<typename _Tp>
        -: 1046:    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;
        -: 1047:  template<typename _Tp>
        -: 1048:    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;
        -: 1049:  template<typename _Tp>
        -: 1050:    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;
        -: 1051:}
        -: 1052:  /// @endcond
        -: 1053:
        -: 1054:  /** Create an object owned by a `unique_ptr`.
        -: 1055:   *  @tparam _Tp A non-array object type.
        -: 1056:   *  @param __args Constructor arguments for the new object.
        -: 1057:   *  @returns A `unique_ptr<_Tp>` that owns the new object.
        -: 1058:   *  @since C++14
        -: 1059:   *  @relates unique_ptr
        -: 1060:   */
        -: 1061:  template<typename _Tp, typename... _Args>
        -: 1062:    _GLIBCXX23_CONSTEXPR
        -: 1063:    inline __detail::__unique_ptr_t<_Tp>
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRA3_KciEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 47 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA5_KcRA1_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 21 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA1_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 543 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA5_KcRA6_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 882516 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA2_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 258211 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA5_KcRA4_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 2 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA14_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 2 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRA1_KciEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 3 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRA3_KcRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 510 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA5_KcS9_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 515 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA18_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 1 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA5_KcRA7_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 2 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA20_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 1 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA25_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 1 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRA3_KcRjEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 781796 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcS9_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 524288 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRA1_KcRKiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 4 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA3_KcRS9_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 132101 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA5_KcRS9_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 132101 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRS9_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 132101 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRKS4_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 0 returned 0% blocks executed 0%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRKSA_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 0 returned 0% blocks executed 0%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 1 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldIiEEJRA3_KcRmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 100000 returned 100% blocks executed 33%
function _ZSt11make_uniqueIN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEJRA12_KcRA23_SB_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_ called 100000 returned 100% blocks executed 33%
  3044767: 1064:    make_unique(_Args&&... __args)
  3044767: 1065:    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
       47: 1065-block  0
branch  0 taken 47
branch  1 taken 0
       47: 1065-block  1
branch  2 taken 47
branch  3 taken 0
       47: 1065-block  2
    $$$$$: 1065-block  3
    $$$$$: 1065-block  4
    $$$$$: 1065-block  5
branch  4 never executed
branch  5 never executed
    $$$$$: 1065-block  6
    $$$$$: 1065-block  7
    $$$$$: 1065-block  8
       21: 1065-block  9
branch  6 taken 21
branch  7 taken 0
       21: 1065-block 10
branch  8 taken 21
branch  9 taken 0
       21: 1065-block 11
branch 10 taken 21
branch 11 taken 0
       21: 1065-block 12
    $$$$$: 1065-block 13
    $$$$$: 1065-block 14
    $$$$$: 1065-block 15
    $$$$$: 1065-block 16
    $$$$$: 1065-block 17
branch 12 never executed
branch 13 never executed
    $$$$$: 1065-block 18
    $$$$$: 1065-block 19
    $$$$$: 1065-block 20
      543: 1065-block 21
branch 14 taken 543
branch 15 taken 0
      543: 1065-block 22
branch 16 taken 543
branch 17 taken 0
      543: 1065-block 23
branch 18 taken 543
branch 19 taken 0
      543: 1065-block 24
    $$$$$: 1065-block 25
    $$$$$: 1065-block 26
    $$$$$: 1065-block 27
    $$$$$: 1065-block 28
    $$$$$: 1065-block 29
branch 20 never executed
branch 21 never executed
    $$$$$: 1065-block 30
    $$$$$: 1065-block 31
    $$$$$: 1065-block 32
   882516: 1065-block 33
branch 22 taken 882516
branch 23 taken 0
   882516: 1065-block 34
branch 24 taken 882516
branch 25 taken 0
   882516: 1065-block 35
branch 26 taken 882516
branch 27 taken 0
   882516: 1065-block 36
    $$$$$: 1065-block 37
    $$$$$: 1065-block 38
    $$$$$: 1065-block 39
    $$$$$: 1065-block 40
    $$$$$: 1065-block 41
branch 28 never executed
branch 29 never executed
    $$$$$: 1065-block 42
    $$$$$: 1065-block 43
    $$$$$: 1065-block 44
   258211: 1065-block 45
branch 30 taken 258211
branch 31 taken 0
   258211: 1065-block 46
branch 32 taken 258211
branch 33 taken 0
   258211: 1065-block 47
branch 34 taken 258211
branch 35 taken 0
   258211: 1065-block 48
    $$$$$: 1065-block 49
    $$$$$: 1065-block 50
    $$$$$: 1065-block 51
    $$$$$: 1065-block 52
    $$$$$: 1065-block 53
branch 36 never executed
branch 37 never executed
    $$$$$: 1065-block 54
    $$$$$: 1065-block 55
    $$$$$: 1065-block 56
        2: 1065-block 57
branch 38 taken 2
branch 39 taken 0
        2: 1065-block 58
branch 40 taken 2
branch 41 taken 0
        2: 1065-block 59
branch 42 taken 2
branch 43 taken 0
        2: 1065-block 60
    $$$$$: 1065-block 61
    $$$$$: 1065-block 62
    $$$$$: 1065-block 63
    $$$$$: 1065-block 64
    $$$$$: 1065-block 65
branch 44 never executed
branch 45 never executed
    $$$$$: 1065-block 66
    $$$$$: 1065-block 67
    $$$$$: 1065-block 68
        2: 1065-block 69
branch 46 taken 2
branch 47 taken 0
        2: 1065-block 70
branch 48 taken 2
branch 49 taken 0
        2: 1065-block 71
branch 50 taken 2
branch 51 taken 0
        2: 1065-block 72
    $$$$$: 1065-block 73
    $$$$$: 1065-block 74
    $$$$$: 1065-block 75
    $$$$$: 1065-block 76
    $$$$$: 1065-block 77
branch 52 never executed
branch 53 never executed
    $$$$$: 1065-block 78
    $$$$$: 1065-block 79
    $$$$$: 1065-block 80
        3: 1065-block 81
branch 54 taken 3
branch 55 taken 0
        3: 1065-block 82
branch 56 taken 3
branch 57 taken 0
        3: 1065-block 83
    $$$$$: 1065-block 84
    $$$$$: 1065-block 85
    $$$$$: 1065-block 86
branch 58 never executed
branch 59 never executed
    $$$$$: 1065-block 87
    $$$$$: 1065-block 88
    $$$$$: 1065-block 89
      510: 1065-block 90
branch 60 taken 510
branch 61 taken 0
      510: 1065-block 91
branch 62 taken 510
branch 63 taken 0
      510: 1065-block 92
    $$$$$: 1065-block 93
    $$$$$: 1065-block 94
    $$$$$: 1065-block 95
branch 64 never executed
branch 65 never executed
    $$$$$: 1065-block 96
    $$$$$: 1065-block 97
    $$$$$: 1065-block 98
      515: 1065-block 99
branch 66 taken 515
branch 67 taken 0
      515: 1065-block 100
branch 68 taken 515
branch 69 taken 0
      515: 1065-block 101
    $$$$$: 1065-block 102
    $$$$$: 1065-block 103
    $$$$$: 1065-block 104
branch 70 never executed
branch 71 never executed
    $$$$$: 1065-block 105
    $$$$$: 1065-block 106
    $$$$$: 1065-block 107
        1: 1065-block 108
branch 72 taken 1
branch 73 taken 0
        1: 1065-block 109
branch 74 taken 1
branch 75 taken 0
        1: 1065-block 110
branch 76 taken 1
branch 77 taken 0
        1: 1065-block 111
    $$$$$: 1065-block 112
    $$$$$: 1065-block 113
    $$$$$: 1065-block 114
    $$$$$: 1065-block 115
    $$$$$: 1065-block 116
branch 78 never executed
branch 79 never executed
    $$$$$: 1065-block 117
    $$$$$: 1065-block 118
    $$$$$: 1065-block 119
        2: 1065-block 120
branch 80 taken 2
branch 81 taken 0
        2: 1065-block 121
branch 82 taken 2
branch 83 taken 0
        2: 1065-block 122
branch 84 taken 2
branch 85 taken 0
        2: 1065-block 123
    $$$$$: 1065-block 124
    $$$$$: 1065-block 125
    $$$$$: 1065-block 126
    $$$$$: 1065-block 127
    $$$$$: 1065-block 128
branch 86 never executed
branch 87 never executed
    $$$$$: 1065-block 129
    $$$$$: 1065-block 130
    $$$$$: 1065-block 131
        1: 1065-block 132
branch 88 taken 1
branch 89 taken 0
        1: 1065-block 133
branch 90 taken 1
branch 91 taken 0
        1: 1065-block 134
branch 92 taken 1
branch 93 taken 0
        1: 1065-block 135
    $$$$$: 1065-block 136
    $$$$$: 1065-block 137
    $$$$$: 1065-block 138
    $$$$$: 1065-block 139
    $$$$$: 1065-block 140
branch 94 never executed
branch 95 never executed
    $$$$$: 1065-block 141
    $$$$$: 1065-block 142
    $$$$$: 1065-block 143
        1: 1065-block 144
branch 96 taken 1
branch 97 taken 0
        1: 1065-block 145
branch 98 taken 1
branch 99 taken 0
        1: 1065-block 146
branch 100 taken 1
branch 101 taken 0
        1: 1065-block 147
    $$$$$: 1065-block 148
    $$$$$: 1065-block 149
    $$$$$: 1065-block 150
    $$$$$: 1065-block 151
    $$$$$: 1065-block 152
branch 102 never executed
branch 103 never executed
    $$$$$: 1065-block 153
    $$$$$: 1065-block 154
    $$$$$: 1065-block 155
   781796: 1065-block 156
branch 104 taken 781796
branch 105 taken 0
   781796: 1065-block 157
branch 106 taken 781796
branch 107 taken 0
   781796: 1065-block 158
    $$$$$: 1065-block 159
    $$$$$: 1065-block 160
    $$$$$: 1065-block 161
branch 108 never executed
branch 109 never executed
    $$$$$: 1065-block 162
    $$$$$: 1065-block 163
    $$$$$: 1065-block 164
   524288: 1065-block 165
branch 110 taken 524288
branch 111 taken 0
   524288: 1065-block 166
branch 112 taken 524288
branch 113 taken 0
   524288: 1065-block 167
    $$$$$: 1065-block 168
    $$$$$: 1065-block 169
    $$$$$: 1065-block 170
branch 114 never executed
branch 115 never executed
    $$$$$: 1065-block 171
    $$$$$: 1065-block 172
    $$$$$: 1065-block 173
        4: 1065-block 174
branch 116 taken 4
branch 117 taken 0
        4: 1065-block 175
branch 118 taken 4
branch 119 taken 0
        4: 1065-block 176
    $$$$$: 1065-block 177
    $$$$$: 1065-block 178
    $$$$$: 1065-block 179
branch 120 never executed
branch 121 never executed
    $$$$$: 1065-block 180
    $$$$$: 1065-block 181
    $$$$$: 1065-block 182
   132101: 1065-block 183
branch 122 taken 132101
branch 123 taken 0
   132101: 1065-block 184
branch 124 taken 132101
branch 125 taken 0
   132101: 1065-block 185
branch 126 taken 132101
branch 127 taken 0
   132101: 1065-block 186
    $$$$$: 1065-block 187
    $$$$$: 1065-block 188
    $$$$$: 1065-block 189
    $$$$$: 1065-block 190
    $$$$$: 1065-block 191
branch 128 never executed
branch 129 never executed
    $$$$$: 1065-block 192
    $$$$$: 1065-block 193
    $$$$$: 1065-block 194
   132101: 1065-block 195
branch 130 taken 132101
branch 131 taken 0
   132101: 1065-block 196
branch 132 taken 132101
branch 133 taken 0
   132101: 1065-block 197
branch 134 taken 132101
branch 135 taken 0
   132101: 1065-block 198
    $$$$$: 1065-block 199
    $$$$$: 1065-block 200
    $$$$$: 1065-block 201
    $$$$$: 1065-block 202
    $$$$$: 1065-block 203
branch 136 never executed
branch 137 never executed
    $$$$$: 1065-block 204
    $$$$$: 1065-block 205
    $$$$$: 1065-block 206
   132101: 1065-block 207
branch 138 taken 132101
branch 139 taken 0
   132101: 1065-block 208
branch 140 taken 132101
branch 141 taken 0
   132101: 1065-block 209
branch 142 taken 132101
branch 143 taken 0
   132101: 1065-block 210
    $$$$$: 1065-block 211
    $$$$$: 1065-block 212
    $$$$$: 1065-block 213
    $$$$$: 1065-block 214
    $$$$$: 1065-block 215
branch 144 never executed
branch 145 never executed
    $$$$$: 1065-block 216
    $$$$$: 1065-block 217
    $$$$$: 1065-block 218
    $$$$$: 1065-block 219
branch 146 never executed
branch 147 never executed
    $$$$$: 1065-block 220
    $$$$$: 1065-block 221
    $$$$$: 1065-block 222
    $$$$$: 1065-block 223
branch 148 never executed
branch 149 never executed
    $$$$$: 1065-block 224
    $$$$$: 1065-block 225
    $$$$$: 1065-block 226
        1: 1065-block 227
branch 150 taken 1
branch 151 taken 0
        1: 1065-block 228
    $$$$$: 1065-block 229
branch 152 never executed
branch 153 never executed
    $$$$$: 1065-block 230
    $$$$$: 1065-block 231
    $$$$$: 1065-block 232
   100000: 1065-block 233
branch 154 taken 100000
branch 155 taken 0
   100000: 1065-block 234
branch 156 taken 100000
branch 157 taken 0
   100000: 1065-block 235
    $$$$$: 1065-block 236
    $$$$$: 1065-block 237
    $$$$$: 1065-block 238
branch 158 never executed
branch 159 never executed
    $$$$$: 1065-block 239
    $$$$$: 1065-block 240
    $$$$$: 1065-block 241
   100000: 1065-block 242
branch 160 taken 100000
branch 161 taken 0
   100000: 1065-block 243
branch 162 taken 100000
branch 163 taken 0
   100000: 1065-block 244
branch 164 taken 100000
branch 165 taken 0
   100000: 1065-block 245
    $$$$$: 1065-block 246
    $$$$$: 1065-block 247
    $$$$$: 1065-block 248
    $$$$$: 1065-block 249
    $$$$$: 1065-block 250
branch 166 never executed
branch 167 never executed
    $$$$$: 1065-block 251
    $$$$$: 1065-block 252
    $$$$$: 1065-block 253
        -: 1066:
        -: 1067:  /** Create an array owned by a `unique_ptr`.
        -: 1068:   *  @tparam _Tp An array type of unknown bound, such as `U[]`.
        -: 1069:   *  @param __num The number of elements of type `U` in the new array.
        -: 1070:   *  @returns A `unique_ptr<U[]>` that owns the new array.
        -: 1071:   *  @since C++14
        -: 1072:   *  @relates unique_ptr
        -: 1073:   *
        -: 1074:   *  The array elements are value-initialized.
        -: 1075:   */
        -: 1076:  template<typename _Tp>
        -: 1077:    _GLIBCXX23_CONSTEXPR
        -: 1078:    inline __detail::__unique_ptr_array_t<_Tp>
function _ZSt11make_uniqueIA_NSt14__tree_barrierISt18__empty_completionE9__state_tEENSt8__detail9_MakeUniqIT_E7__arrayEm called 2 returned 100% blocks executed 100%
        2: 1079:    make_unique(size_t __num)
        2: 1080:    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
        2: 1080-block  0
        -: 1081:
        -: 1082:  /** Disable std::make_unique for arrays of known bound.
        -: 1083:   *  @tparam _Tp An array type of known bound, such as `U[N]`.
        -: 1084:   *  @since C++14
        -: 1085:   *  @relates unique_ptr
        -: 1086:   */
        -: 1087:  template<typename _Tp, typename... _Args>
        -: 1088:    __detail::__invalid_make_unique_t<_Tp>
        -: 1089:    make_unique(_Args&&...) = delete;
        -: 1090:
        -: 1091:#if __cplusplus > 201703L
        -: 1092:  /** Create a default-initialied object owned by a `unique_ptr`.
        -: 1093:   *  @tparam _Tp A non-array object type.
        -: 1094:   *  @returns A `unique_ptr<_Tp>` that owns the new object.
        -: 1095:   *  @since C++20
        -: 1096:   *  @relates unique_ptr
        -: 1097:   */
        -: 1098:  template<typename _Tp>
        -: 1099:    _GLIBCXX23_CONSTEXPR
        -: 1100:    inline __detail::__unique_ptr_t<_Tp>
        -: 1101:    make_unique_for_overwrite()
        -: 1102:    { return unique_ptr<_Tp>(new _Tp); }
        -: 1103:
        -: 1104:  /** Create a default-initialized array owned by a `unique_ptr`.
        -: 1105:   *  @tparam _Tp An array type of unknown bound, such as `U[]`.
        -: 1106:   *  @param __num The number of elements of type `U` in the new array.
        -: 1107:   *  @returns A `unique_ptr<U[]>` that owns the new array.
        -: 1108:   *  @since C++20
        -: 1109:   *  @relates unique_ptr
        -: 1110:   */
        -: 1111:  template<typename _Tp>
        -: 1112:    _GLIBCXX23_CONSTEXPR
        -: 1113:    inline __detail::__unique_ptr_array_t<_Tp>
        -: 1114:    make_unique_for_overwrite(size_t __num)
        -: 1115:    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]); }
        -: 1116:
        -: 1117:  /** Disable std::make_unique_for_overwrite for arrays of known bound.
        -: 1118:   *  @tparam _Tp An array type of known bound, such as `U[N]`.
        -: 1119:   *  @since C++20
        -: 1120:   *  @relates unique_ptr
        -: 1121:   */
        -: 1122:  template<typename _Tp, typename... _Args>
        -: 1123:    __detail::__invalid_make_unique_t<_Tp>
        -: 1124:    make_unique_for_overwrite(_Args&&...) = delete;
        -: 1125:#endif // C++20
        -: 1126:
        -: 1127:#endif // C++14
        -: 1128:
        -: 1129:#if __cplusplus > 201703L && __cpp_concepts
        -: 1130:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1131:  // 2948. unique_ptr does not define operator<< for stream output
        -: 1132:  /// Stream output operator for unique_ptr
        -: 1133:  /// @relates unique_ptr
        -: 1134:  /// @since C++20
        -: 1135:  template<typename _CharT, typename _Traits, typename _Tp, typename _Dp>
        -: 1136:    inline basic_ostream<_CharT, _Traits>&
        -: 1137:    operator<<(basic_ostream<_CharT, _Traits>& __os,
        -: 1138:	       const unique_ptr<_Tp, _Dp>& __p)
        -: 1139:    requires requires { __os << __p.get(); }
        -: 1140:    {
        -: 1141:      __os << __p.get();
        -: 1142:      return __os;
        -: 1143:    }
        -: 1144:#endif // C++20
        -: 1145:
        -: 1146:  /// @} group pointer_abstractions
        -: 1147:
        -: 1148:#if __cplusplus >= 201703L
        -: 1149:  namespace __detail::__variant
        -: 1150:  {
        -: 1151:    template<typename> struct _Never_valueless_alt; // see <variant>
        -: 1152:
        -: 1153:    // Provide the strong exception-safety guarantee when emplacing a
        -: 1154:    // unique_ptr into a variant.
        -: 1155:    template<typename _Tp, typename _Del>
        -: 1156:      struct _Never_valueless_alt<std::unique_ptr<_Tp, _Del>>
        -: 1157:      : std::true_type
        -: 1158:      { };
        -: 1159:  }  // namespace __detail::__variant
        -: 1160:#endif // C++17
        -: 1161:
        -: 1162:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1163:} // namespace
        -: 1164:
        -: 1165:#endif /* _UNIQUE_PTR_H */
