        -:    0:Source:/home/neo/.vcpkg-clion/vcpkg/installed/x64-linux/include/boost/container/throw_exception.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Medicament_Properties.dir/medicament/properties/properties_test.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Medicament_Properties.dir/medicament/properties/properties_test.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://////////////////////////////////////////////////////////////////////////////
        -:    2://
        -:    3:// (C) Copyright Ion Gaztanaga 2012-2013. Distributed under the Boost
        -:    4:// Software License, Version 1.0. (See accompanying file
        -:    5:// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    6://
        -:    7:// See http://www.boost.org/libs/container for documentation.
        -:    8://
        -:    9://////////////////////////////////////////////////////////////////////////////
        -:   10:
        -:   11:#ifndef BOOST_CONTAINER_THROW_EXCEPTION_HPP
        -:   12:#define BOOST_CONTAINER_THROW_EXCEPTION_HPP
        -:   13:
        -:   14:#ifndef BOOST_CONFIG_HPP
        -:   15:#  include <boost/config.hpp>
        -:   16:#endif
        -:   17:
        -:   18:#if defined(BOOST_HAS_PRAGMA_ONCE)
        -:   19:#  pragma once
        -:   20:#endif
        -:   21:
        -:   22:#include <boost/container/detail/config_begin.hpp>
        -:   23:#include <boost/container/detail/workaround.hpp>
        -:   24:
        -:   25:#ifndef BOOST_NO_EXCEPTIONS
        -:   26:#include <exception> //for std exception base
        -:   27:
        -:   28:#  if defined(BOOST_CONTAINER_USE_STD_EXCEPTIONS)
        -:   29:   #include <stdexcept> //for std::out_of_range, std::length_error, std::logic_error, std::runtime_error
        -:   30:   #include <string>    //for implicit std::string conversion
        -:   31:   #include <new>       //for std::bad_alloc
        -:   32:
        -:   33:namespace boost {
        -:   34:namespace container {
        -:   35:
        -:   36:typedef std::bad_alloc bad_alloc_t;
        -:   37:typedef std::out_of_range out_of_range_t;
        -:   38:typedef std::length_error length_error_t;
        -:   39:typedef std::logic_error logic_error_t;
        -:   40:typedef std::runtime_error runtime_error_t;
        -:   41:
        -:   42:}} //namespace boost::container
        -:   43:
        -:   44:#  else	//!BOOST_CONTAINER_USE_STD_EXCEPTIONS
        -:   45:
        -:   46:namespace boost {
        -:   47:namespace container {
        -:   48:
function _ZN5boost9container9exceptionD2Ev called 1 returned 100% blocks executed 100%
function _ZN5boost9container9exceptionD0Ev called 0 returned 0% blocks executed 0%
        -:   49:class BOOST_SYMBOL_VISIBLE exception
        -:   50:   : public ::std::exception
        -:   51:{
        -:   52:   typedef ::std::exception std_exception_t;
        -:   53:
        -:   54:   public:
        -:   55:
        -:   56:   //msg must be a static string (guaranteed by callers)
function _ZN5boost9container9exceptionC2EPKc called 1 returned 100% blocks executed 100%
        1:   57:   explicit exception(const char *msg)
        2:   58:      : std_exception_t(), m_msg(msg)
        2:   59:   {}
        1:   59-block  0
        1:   59-block  1
        -:   60:
function _ZNK5boost9container9exception4whatEv called 0 returned 0% blocks executed 0%
    #####:   61:   virtual const char *what() const BOOST_NOEXCEPT_OR_NOTHROW BOOST_OVERRIDE
    #####:   62:   {  return m_msg ? m_msg : "unknown boost::container exception"; }
    $$$$$:   62-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   62-block  1
    $$$$$:   62-block  2
    $$$$$:   62-block  3
        -:   63:
        -:   64:   private:
        -:   65:   const char *m_msg;
        -:   66:};
        -:   67:
function _ZN5boost9container9bad_allocD2Ev called 0 returned 0% blocks executed 0%
function _ZN5boost9container9bad_allocD0Ev called 0 returned 0% blocks executed 0%
        -:   68:class BOOST_SYMBOL_VISIBLE bad_alloc
        -:   69:   : public exception
        -:   70:{
        -:   71:   public:
function _ZN5boost9container9bad_allocC2Ev called 0 returned 0% blocks executed 0%
    #####:   72:   bad_alloc()
    #####:   73:      : exception("boost::container::bad_alloc thrown")
    #####:   74:   {}
    $$$$$:   74-block  0
        -:   75:};
        -:   76:
        -:   77:typedef bad_alloc bad_alloc_t;
        -:   78:
function _ZN5boost9container12out_of_rangeD2Ev called 1 returned 100% blocks executed 100%
function _ZN5boost9container12out_of_rangeD0Ev called 0 returned 0% blocks executed 0%
        -:   79:class BOOST_SYMBOL_VISIBLE out_of_range
        -:   80:   : public exception
        -:   81:{
        -:   82:   public:
function _ZN5boost9container12out_of_rangeC2EPKc called 1 returned 100% blocks executed 100%
        1:   83:   explicit out_of_range(const char *msg)
        1:   84:      : exception(msg)
        1:   85:   {}
        1:   85-block  0
        -:   86:};
        -:   87:
        -:   88:typedef out_of_range out_of_range_t;
        -:   89:
function _ZN5boost9container12length_errorD2Ev called 0 returned 0% blocks executed 0%
function _ZN5boost9container12length_errorD0Ev called 0 returned 0% blocks executed 0%
        -:   90:class BOOST_SYMBOL_VISIBLE length_error
        -:   91:   : public exception
        -:   92:{
        -:   93:   public:
function _ZN5boost9container12length_errorC2EPKc called 0 returned 0% blocks executed 0%
    #####:   94:   explicit length_error(const char *msg)
    #####:   95:      : exception(msg)
    #####:   96:   {}
    $$$$$:   96-block  0
        -:   97:};
        -:   98:
        -:   99:typedef length_error length_error_t;
        -:  100:
        -:  101:class BOOST_SYMBOL_VISIBLE logic_error
        -:  102:   : public exception
        -:  103:{
        -:  104:   public:
        -:  105:   explicit logic_error(const char *msg)
        -:  106:      : exception(msg)
        -:  107:   {}
        -:  108:};
        -:  109:
        -:  110:typedef logic_error logic_error_t;
        -:  111:
        -:  112:class BOOST_SYMBOL_VISIBLE runtime_error
        -:  113:   : public exception
        -:  114:{
        -:  115:   public:
        -:  116:   explicit runtime_error(const char *msg)
        -:  117:      : exception(msg)
        -:  118:   {}
        -:  119:};
        -:  120:
        -:  121:typedef runtime_error runtime_error_t;
        -:  122:
        -:  123:}  // namespace boost {
        -:  124:}  // namespace container {
        -:  125:
        -:  126:#  endif
        -:  127:#else
        -:  128:   #include <boost/assert.hpp>
        -:  129:   #include <cstdlib>   //for std::abort
        -:  130:#endif
        -:  131:
        -:  132:namespace boost {
        -:  133:namespace container {
        -:  134:
        -:  135:#if defined(BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS)
        -:  136:   //The user must provide definitions for the following functions
        -:  137:
        -:  138:   BOOST_NORETURN void throw_bad_alloc();
        -:  139:
        -:  140:   BOOST_NORETURN void throw_out_of_range(const char* str);
        -:  141:
        -:  142:   BOOST_NORETURN void throw_length_error(const char* str);
        -:  143:
        -:  144:   BOOST_NORETURN void throw_logic_error(const char* str);
        -:  145:
        -:  146:   BOOST_NORETURN void throw_runtime_error(const char* str);
        -:  147:
        -:  148:#elif defined(BOOST_NO_EXCEPTIONS)
        -:  149:
        -:  150:   BOOST_NORETURN inline void throw_bad_alloc()
        -:  151:   {
        -:  152:      BOOST_ASSERT(!"boost::container bad_alloc thrown");
        -:  153:      std::abort();
        -:  154:   }
        -:  155:
        -:  156:   BOOST_NORETURN inline void throw_out_of_range(const char* str)
        -:  157:   {
        -:  158:      boost::container::ignore(str);
        -:  159:      BOOST_ASSERT_MSG(!"boost::container out_of_range thrown", str);
        -:  160:      std::abort();
        -:  161:   }
        -:  162:
        -:  163:   BOOST_NORETURN inline void throw_length_error(const char* str)
        -:  164:   {
        -:  165:      boost::container::ignore(str);
        -:  166:      BOOST_ASSERT_MSG(!"boost::container length_error thrown", str);
        -:  167:      std::abort();
        -:  168:   }
        -:  169:
        -:  170:   BOOST_NORETURN inline void throw_logic_error(const char* str)
        -:  171:   {
        -:  172:      boost::container::ignore(str);
        -:  173:      BOOST_ASSERT_MSG(!"boost::container logic_error thrown", str);
        -:  174:      std::abort();
        -:  175:   }
        -:  176:
        -:  177:   BOOST_NORETURN inline void throw_runtime_error(const char* str)
        -:  178:   {
        -:  179:      boost::container::ignore(str);
        -:  180:      BOOST_ASSERT_MSG(!"boost::container runtime_error thrown", str);
        -:  181:      std::abort();
        -:  182:   }
        -:  183:
        -:  184:#else //defined(BOOST_NO_EXCEPTIONS)
        -:  185:
        -:  186:   //! Exception callback called by Boost.Container when fails to allocate the requested storage space.
        -:  187:   //! <ul>
        -:  188:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined
        -:  189:   //!   <code>boost::container::bad_alloc(str)</code> is thrown.</li>
        -:  190:   //!
        -:  191:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined
        -:  192:   //!   <code>std::bad_alloc(str)</code> is thrown.</li>
        -:  193:   //!
        -:  194:   //! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS
        -:  195:   //!   is NOT defined <code>BOOST_ASSERT(!"boost::container bad_alloc thrown")</code> is called
        -:  196:   //!   and <code>std::abort()</code> if the former returns.</li>
        -:  197:   //!
        -:  198:   //! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined
        -:  199:   //!   the user must provide an implementation and the function should not return.</li>
        -:  200:   //! </ul>
function _ZN5boost9container15throw_bad_allocEv called 0 returned 0% blocks executed 0%
    #####:  201:   BOOST_NORETURN inline void throw_bad_alloc()
        -:  202:   {
    #####:  203:      throw bad_alloc_t();
    $$$$$:  203-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  203-block  1
    $$$$$:  203-block  2
    $$$$$:  203-block  3
    #####:  204:   }
        -:  205:
        -:  206:   //! Exception callback called by Boost.Container to signal arguments out of range.
        -:  207:   //! <ul>
        -:  208:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined
        -:  209:   //!   <code>boost::container::out_of_range(str)</code> is thrown.</li>
        -:  210:   //!
        -:  211:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined
        -:  212:   //!   <code>std::out_of_range(str)</code> is thrown.</li>
        -:  213:   //!
        -:  214:   //! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS
        -:  215:   //!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container out_of_range thrown", str)</code> is called
        -:  216:   //!   and <code>std::abort()</code> if the former returns.</li>
        -:  217:   //!
        -:  218:   //! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined
        -:  219:   //!   the user must provide an implementation and the function should not return.</li>
        -:  220:   //! </ul>
function _ZN5boost9container18throw_out_of_rangeEPKc called 1 returned 100% blocks executed 50%
        1:  221:   BOOST_NORETURN inline void throw_out_of_range(const char* str)
        -:  222:   {
        1:  223:      throw out_of_range_t(str);
        1:  223-block  0
branch  0 taken 1
branch  1 taken 0
        1:  223-block  1
    $$$$$:  223-block  2
    $$$$$:  223-block  3
    #####:  224:   }
        -:  225:
        -:  226:   //! Exception callback called by Boost.Container to signal errors resizing.
        -:  227:   //! <ul>
        -:  228:   //!
        -:  229:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined
        -:  230:   //!   <code>boost::container::length_error(str)</code> is thrown.</li>
        -:  231:   //!
        -:  232:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined
        -:  233:   //!   <code>std::length_error(str)</code> is thrown.</li>
        -:  234:   //!
        -:  235:   //! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS
        -:  236:   //!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container length_error thrown", str)</code> is called
        -:  237:   //!   and <code>std::abort()</code> if the former returns.</li>
        -:  238:   //!
        -:  239:   //! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined
        -:  240:   //!   the user must provide an implementation and the function should not return.</li>
        -:  241:   //! </ul>
function _ZN5boost9container18throw_length_errorEPKc called 0 returned 0% blocks executed 0%
    #####:  242:   BOOST_NORETURN inline void throw_length_error(const char* str)
        -:  243:   {
    #####:  244:      throw length_error_t(str);
    $$$$$:  244-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  244-block  1
    $$$$$:  244-block  2
    $$$$$:  244-block  3
    #####:  245:   }
        -:  246:
        -:  247:   //! Exception callback called by Boost.Container  to report errors in the internal logical
        -:  248:   //! of the program, such as violation of logical preconditions or class invariants.
        -:  249:   //! <ul>
        -:  250:   //!
        -:  251:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined
        -:  252:   //!   <code>boost::container::logic_error(str)</code> is thrown.</li>
        -:  253:   //!
        -:  254:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined
        -:  255:   //!   <code>std::logic_error(str)</code> is thrown.</li>
        -:  256:   //!
        -:  257:   //! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS
        -:  258:   //!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container logic_error thrown", str)</code> is called
        -:  259:   //!   and <code>std::abort()</code> if the former returns.</li>
        -:  260:   //!
        -:  261:   //! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined
        -:  262:   //!   the user must provide an implementation and the function should not return.</li>
        -:  263:   //! </ul>
        -:  264:   BOOST_NORETURN inline void throw_logic_error(const char* str)
        -:  265:   {
        -:  266:      throw logic_error_t(str);
        -:  267:   }
        -:  268:
        -:  269:   //! Exception callback called by Boost.Container  to report errors that can only be detected during runtime.
        -:  270:   //! <ul>
        -:  271:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is NOT defined
        -:  272:   //!   <code>boost::container::runtime_error(str)</code> is thrown.</li>
        -:  273:   //!
        -:  274:   //! <li>If BOOST_NO_EXCEPTIONS is NOT defined and BOOST_CONTAINER_USE_STD_EXCEPTIONS is defined
        -:  275:   //!   <code>std::runtime_error(str)</code> is thrown.</li>
        -:  276:   //!
        -:  277:   //! <li>If BOOST_NO_EXCEPTIONS is defined and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS
        -:  278:   //!   is NOT defined <code>BOOST_ASSERT_MSG(!"boost::container runtime_error thrown", str)</code> is called
        -:  279:   //!   and <code>std::abort()</code> if the former returns.</li>
        -:  280:   //!
        -:  281:   //! <li>If BOOST_NO_EXCEPTIONS and BOOST_CONTAINER_USER_DEFINED_THROW_CALLBACKS are defined
        -:  282:   //!   the user must provide an implementation and the function should not return.</li>
        -:  283:   //! </ul>
        -:  284:   BOOST_NORETURN inline void throw_runtime_error(const char* str)
        -:  285:   {
        -:  286:      throw runtime_error_t(str);
        -:  287:   }
        -:  288:
        -:  289:#endif
        -:  290:
        -:  291:}}  //namespace boost { namespace container {
        -:  292:
        -:  293:#include <boost/container/detail/config_end.hpp>
        -:  294:
        -:  295:#endif //#ifndef BOOST_CONTAINER_THROW_EXCEPTION_HPP
