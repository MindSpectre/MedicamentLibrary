        -:    0:Source:/home/neo/.vcpkg-clion/vcpkg/installed/x64-linux/include/pqxx/transaction.hxx
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Definition of the pqxx::transaction class.
        -:    2: * pqxx::transaction represents a standard database transaction.
        -:    3: *
        -:    4: * DO NOT INCLUDE THIS FILE DIRECTLY; include pqxx/transaction instead.
        -:    5: *
        -:    6: * Copyright (c) 2000-2024, Jeroen T. Vermeulen.
        -:    7: *
        -:    8: * See COPYING for copyright license.  If you did not receive a file called
        -:    9: * COPYING with this source code, please notify the distributor of this
        -:   10: * mistake, or contact the author.
        -:   11: */
        -:   12:#ifndef PQXX_H_TRANSACTION
        -:   13:#define PQXX_H_TRANSACTION
        -:   14:
        -:   15:#if !defined(PQXX_HEADER_PRE)
        -:   16:#  error "Include libpqxx headers as <pqxx/header>, not <pqxx/header.hxx>."
        -:   17:#endif
        -:   18:
        -:   19:#include "pqxx/dbtransaction.hxx"
        -:   20:
        -:   21:namespace pqxx::internal
        -:   22:{
        -:   23:/// Helper base class for the @ref transaction class template.
        -:   24:class PQXX_LIBEXPORT basic_transaction : public dbtransaction
        -:   25:{
        -:   26:protected:
        -:   27:  basic_transaction(
        -:   28:    connection &c, zview begin_command, std::string_view tname);
        -:   29:  basic_transaction(connection &c, zview begin_command, std::string &&tname);
        -:   30:  basic_transaction(connection &c, zview begin_command);
        -:   31:
        -:   32:  virtual ~basic_transaction() noexcept override = 0;
        -:   33:
        -:   34:private:
        -:   35:  virtual void do_commit() override;
        -:   36:};
        -:   37:} // namespace pqxx::internal
        -:   38:
        -:   39:
        -:   40:namespace pqxx
        -:   41:{
        -:   42:/**
        -:   43: * @ingroup transactions
        -:   44: */
        -:   45://@{
        -:   46:
        -:   47:/// Standard back-end transaction, templatised on isolation level.
        -:   48:/** This is the type you'll normally want to use to represent a transaction on
        -:   49: * the database.
        -:   50: *
        -:   51: * Usage example: double all wages.
        -:   52: *
        -:   53: * ```cxx
        -:   54: * extern connection C;
        -:   55: * work T(C);
        -:   56: * try
        -:   57: * {
        -:   58: *   T.exec0("UPDATE employees SET wage=wage*2");
        -:   59: *   T.commit();  // NOTE: do this inside try block
        -:   60: * }
        -:   61: * catch (exception const &e)
        -:   62: * {
        -:   63: *   cerr << e.what() << endl;
        -:   64: *   T.abort();  // Usually not needed; same happens when T's life ends.
        -:   65: * }
        -:   66: * ```
        -:   67: */
        -:   68:template<
        -:   69:  isolation_level ISOLATION = isolation_level::read_committed,
        -:   70:  write_policy READWRITE = write_policy::read_write>
        -:   71:class transaction final : public internal::basic_transaction
        -:   72:{
        -:   73:public:
        -:   74:  /// Begin a transaction.
        -:   75:  /**
        -:   76:   * @param c Connection for this transaction to operate on.
        -:   77:   * @param tname Optional name for transaction.  Must begin with a letter and
        -:   78:   * may contain letters and digits only.
        -:   79:   */
        -:   80:  transaction(connection &c, std::string_view tname) :
        -:   81:          internal::basic_transaction{
        -:   82:            c, internal::begin_cmd<ISOLATION, READWRITE>, tname}
        -:   83:  {}
        -:   84:
        -:   85:  /// Begin a transaction.
        -:   86:  /**
        -:   87:   * @param c Connection for this transaction to operate on.
        -:   88:   * may contain letters and digits only.
        -:   89:   */
        -:   90:  explicit transaction(connection &c) :
        -:   91:          internal::basic_transaction{
        -:   92:            c, internal::begin_cmd<ISOLATION, READWRITE>}
        -:   93:  {}
        -:   94:
function _ZN4pqxx11transactionILNS_15isolation_levelE0ELNS_12write_policyE1EED2Ev called 215 returned 100% blocks executed 100%
      215:   95:  virtual ~transaction() noexcept override { close(); }
      215:   95-block  0
        -:   96:};
        -:   97:
        -:   98:
        -:   99:/// The default transaction type.
        -:  100:using work = transaction<>;
        -:  101:
        -:  102:/// Read-only transaction.
        -:  103:using read_transaction =
        -:  104:  transaction<isolation_level::read_committed, write_policy::read_only>;
        -:  105:
        -:  106://@}
        -:  107:} // namespace pqxx
        -:  108:#endif
