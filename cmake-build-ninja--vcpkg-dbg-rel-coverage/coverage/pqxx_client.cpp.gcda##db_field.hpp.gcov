        -:    0:Source:/home/neo/MedicamentLibrary/common/db/base/db_field.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <chrono>
        -:    4:#include <iomanip>
        -:    5:#include <memory>
        -:    6:#include <sstream>
        -:    7:#include <string>
        -:    8:#include <type_traits>
        -:    9:#include <json/json.h>
        -:   10:#include <json/value.h>
        -:   11:
        -:   12:namespace drug_lib::common::database
        -:   13:{
        -:   14:    template <typename T>
        -:   15:    class Field;
        -:   16:    /// @brief Base class representing a field in the database
        -:   17:
function _ZN8drug_lib6common8database9FieldBaseC2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database9FieldBaseC2ERKS2_ called 0 returned 0% blocks executed 0%
        -:   18:    class FieldBase
        -:   19:    {
        -:   20:    public:
function _ZN8drug_lib6common8database9FieldBaseD2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database9FieldBaseD0Ev called 0 returned 0% blocks executed 0%
    #####:   21:        virtual ~FieldBase() = default;
    $$$$$:   21-block  0
    $$$$$:   21-block  1
        -:   22:
        -:   23:        /// @return Column name of the field
        -:   24:        [[nodiscard]] virtual const std::string& get_name() const = 0;
        -:   25:
        -:   26:        /// @brief Converts the field value to a string for SQL queries
        -:   27:        [[nodiscard]] virtual std::string to_string() const & = 0;
        -:   28:
        -:   29:        /// @brief Converts the field value to a string for SQL queries
        -:   30:        /// @return moveable
        -:   31:        [[nodiscard]] virtual std::string to_string() && = 0;
        -:   32:
        -:   33:        /// @brief Gets the SQL data type of the field
        -:   34:        [[nodiscard]] virtual std::string get_sql_type() const = 0;
        -:   35:
        -:   36:        template <typename T>
        -:   37:        T as() const
        -:   38:        {
        -:   39:            // Ensure that T is a valid type, e.g., int, std::string, etc.
        -:   40:            static_assert(std::is_default_constructible_v<T>, "T must be default constructible");
        -:   41:
        -:   42:            // Attempt to dynamic cast this object to a Field<T> type
        -:   43:
        -:   44:            if (const auto* derivedField = dynamic_cast<const Field<T>*>(this))
        -:   45:            {
        -:   46:                return derivedField->value();
        -:   47:            }
        -:   48:            throw std::runtime_error("FieldBase::as(): Incorrect type requested for field " + get_name());
        -:   49:        }
        -:   50:
        -:   51:        [[nodiscard]] virtual std::unique_ptr<FieldBase> clone() const = 0;
        -:   52:    };
        -:   53:
        -:   54:    /// @brief Represents a field of a specific type in the database
        -:   55:    /// @tparam T Type of the value in the database
        -:   56:    template <typename T>
function _ZN8drug_lib6common8database5FieldIiED2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIiED0Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIiEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS9_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIlED2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIlED0Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIlEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIdED2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIdED0Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIdEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIbED2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIbED0Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIbEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEED0Ev called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEEC2ERKSC_ called 0 returned 0% blocks executed 0%
    #####:   57:    class Field final : public FieldBase
    $$$$$:   57-block  0
    $$$$$:   57-block  1
    $$$$$:   57-block  2
    $$$$$:   57-block  3
branch  0 never executed
branch  1 never executed
    $$$$$:   57-block  4
    $$$$$:   57-block  5
    $$$$$:   57-block  6
    $$$$$:   57-block  7
    $$$$$:   57-block  8
    $$$$$:   57-block  9
    $$$$$:   57-block 10
    $$$$$:   57-block 11
    $$$$$:   57-block 12
    $$$$$:   57-block 13
    $$$$$:   57-block 14
    $$$$$:   57-block 15
    $$$$$:   57-block 16
    $$$$$:   57-block 17
    $$$$$:   57-block 18
    $$$$$:   57-block 19
    $$$$$:   57-block 20
        -:   58:    {
        -:   59:    public:
function _ZN8drug_lib6common8database5FieldIiEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ES8_S8_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIlEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEl called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIdEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldIbEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_ called 0 returned 0% blocks executed 0%
    #####:   60:        Field(std::string name, T value)
    #####:   61:            : name_(std::move(name)), value_(std::move(value))
    #####:   62:        {
    #####:   63:        }
    $$$$$:   63-block  0
    $$$$$:   63-block  1
    $$$$$:   63-block  2
    $$$$$:   63-block  3
    $$$$$:   63-block  4
    $$$$$:   63-block  5
        -:   64:
        -:   65:        /// @return Column name of the field
function _ZNK8drug_lib6common8database5FieldIiE8get_nameB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8get_nameEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIlE8get_nameB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIdE8get_nameB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIbE8get_nameB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEE8get_nameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   66:        [[nodiscard]] const std::string& get_name() const override { return name_; }
    $$$$$:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
    $$$$$:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
        -:   67:
        -:   68:        void set_name(const std::string& name) { name_ = name; }
        -:   69:        void set_name(std::string&& name) { name_ = std::move(name); }
        -:   70:
        -:   71:        /// @return Value of the field
        -:   72:        const T& value() const { return value_; }
        -:   73:        void set_value(const T& value) { value_ = value; }
        -:   74:        void set_value(T&& value) { value_ = std::move(value); }
        -:   75:
        -:   76:        /// @brief Converts the field value to a string for SQL queries
function _ZNKR8drug_lib6common8database5FieldIiE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNKR8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9to_stringEv called 0 returned 0% blocks executed 0%
function _ZNKR8drug_lib6common8database5FieldIlE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNKR8drug_lib6common8database5FieldIdE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNKR8drug_lib6common8database5FieldIbE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNKR8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   77:        [[nodiscard]] std::string to_string() const & override
        -:   78:        {
        -:   79:            if constexpr (std::is_same_v<T, std::string>)
        -:   80:            {
    #####:   81:                return value_;
    $$$$$:   81-block  0
        -:   82:            }
        -:   83:            else if constexpr (std::is_same_v<T, bool>)
        -:   84:            {
    #####:   85:                return value_ ? "TRUE" : "FALSE";
    $$$$$:   85-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   85-block  1
    $$$$$:   85-block  2
    $$$$$:   85-block  3
        -:   86:            }
        -:   87:            else if constexpr (std::is_arithmetic_v<T>)
        -:   88:            {
    #####:   89:                return std::to_string(value_);
    $$$$$:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
        -:   90:            }
        -:   91:            else if constexpr (std::is_same_v<T, Json::Value>)
        -:   92:            {
        -:   93:                return value_.toStyledString();
        -:   94:            }
        -:   95:            else if constexpr (std::is_same_v<T, std::chrono::system_clock::time_point>)
        -:   96:            {
        -:   97:                // Convert time_point to string in ISO 8601 format
    #####:   98:                const std::time_t time = std::chrono::system_clock::to_time_t(value_);
    #####:   99:                const std::tm* tm_ptr = std::localtime(&time);
    #####:  100:                std::ostringstream oss;
    #####:  101:                oss << std::put_time(tm_ptr, "%Y-%m-%d %H:%M:%S");
    $$$$$:  101-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  101-block  1
branch  2 never executed
branch  3 never executed
    #####:  102:                return oss.str();
    $$$$$:  102-block  0
branch  0 never executed
branch  1 never executed
    #####:  103:            }
    $$$$$:  103-block  0
    $$$$$:  103-block  1
        -:  104:            else
        -:  105:            {
        -:  106:                static_assert(sizeof(T) == 0, "Unsupported field type for to_string()");
        -:  107:            }
        -:  108:            return {};
    #####:  109:        }
    $$$$$:  109-block  0
        -:  110:
        -:  111:        /// @brief Converts the field value to a string for SQL queries
function _ZNO8drug_lib6common8database5FieldIiE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNO8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9to_stringEv called 0 returned 0% blocks executed 0%
function _ZNO8drug_lib6common8database5FieldIlE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNO8drug_lib6common8database5FieldIdE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNO8drug_lib6common8database5FieldIbE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNO8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEE9to_stringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  112:        [[nodiscard]] std::string to_string() && override
        -:  113:        {
        -:  114:            if constexpr (std::is_same_v<T, std::string>)
        -:  115:            {
    #####:  116:                return std::move(value_); // Move the string instead of copying
    $$$$$:  116-block  0
        -:  117:            }
        -:  118:            else if constexpr (std::is_same_v<T, bool>)
        -:  119:            {
    #####:  120:                return value_ ? "TRUE" : "FALSE";
    $$$$$:  120-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  120-block  1
    $$$$$:  120-block  2
    $$$$$:  120-block  3
        -:  121:            }
        -:  122:            else if constexpr (std::is_arithmetic_v<T>)
        -:  123:            {
    #####:  124:                return std::to_string(value_); // No need to move arithmetic types
    $$$$$:  124-block  0
    $$$$$:  124-block  1
    $$$$$:  124-block  2
        -:  125:            }
        -:  126:            else if constexpr (std::is_same_v<T, Json::Value>)
        -:  127:            {
        -:  128:                return value_.toStyledString(); // Move the JSON string representation
        -:  129:            }
        -:  130:            else if constexpr (std::is_same_v<T, std::chrono::system_clock::time_point>)
        -:  131:            {
        -:  132:                // Convert time_point to string in ISO 8601 format
    #####:  133:                const std::time_t time = std::chrono::system_clock::to_time_t(value_);
    #####:  134:                const std::tm* tm_ptr = std::localtime(&time);
    #####:  135:                std::ostringstream oss;
    #####:  136:                oss << std::put_time(tm_ptr, "%Y-%m-%d %H:%M:%S");
    $$$$$:  136-block  0
branch  0 never executed
branch  1 never executed
    #####:  137:                return oss.str(); // No need to move, it's a local object
    $$$$$:  137-block  0
branch  0 never executed
branch  1 never executed
    #####:  138:            }
    $$$$$:  138-block  0
    $$$$$:  138-block  1
        -:  139:            else
        -:  140:            {
        -:  141:                static_assert(sizeof(T) == 0, "Unsupported field type for to_string()");
        -:  142:            }
        -:  143:            return {};
    #####:  144:        }
    $$$$$:  144-block  0
        -:  145:
        -:  146:        /// @brief Gets the SQL data type of the field
function _ZNK8drug_lib6common8database5FieldIiE12get_sql_typeB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE12get_sql_typeEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIlE12get_sql_typeB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIdE12get_sql_typeB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIbE12get_sql_typeB5cxx11Ev called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEE12get_sql_typeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  147:        [[nodiscard]] std::string get_sql_type() const override
        -:  148:        {
        -:  149:            if constexpr (std::is_same_v<T, int> || std::is_same_v<T, int32_t>)
        -:  150:            {
    #####:  151:                return "INT";
    $$$$$:  151-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  151-block  1
    $$$$$:  151-block  2
    $$$$$:  151-block  3
        -:  152:            }
        -:  153:            else if constexpr (std::is_same_v<T, int64_t>)
        -:  154:            {
    #####:  155:                return "BIGINT";
    $$$$$:  155-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  155-block  1
    $$$$$:  155-block  2
    $$$$$:  155-block  3
        -:  156:            }
        -:  157:            else if constexpr (std::is_same_v<T, double> || std::is_same_v<T, float>)
        -:  158:            {
    #####:  159:                return "DOUBLE PRECISION";
    $$$$$:  159-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  159-block  1
    $$$$$:  159-block  2
    $$$$$:  159-block  3
        -:  160:            }
        -:  161:            else if constexpr (std::is_same_v<T, std::string>)
        -:  162:            {
    #####:  163:                return "TEXT";
    $$$$$:  163-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  163-block  1
    $$$$$:  163-block  2
    $$$$$:  163-block  3
        -:  164:            }
        -:  165:            else if constexpr (std::is_same_v<T, Json::Value>)
        -:  166:            {
        -:  167:                return "JSONB";
        -:  168:            }
        -:  169:            else if constexpr (std::is_same_v<T, bool>)
        -:  170:            {
    #####:  171:                return "BOOLEAN";
    $$$$$:  171-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  171-block  1
    $$$$$:  171-block  2
    $$$$$:  171-block  3
        -:  172:            }
        -:  173:            else if constexpr (std::is_same_v<T, std::chrono::system_clock::time_point>)
        -:  174:            {
    #####:  175:                return "TIMESTAMP";
    $$$$$:  175-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  175-block  1
    $$$$$:  175-block  2
    $$$$$:  175-block  3
        -:  176:            }
        -:  177:            else
        -:  178:            {
        -:  179:                static_assert(sizeof(T) == 0, "Unsupported field type for get_sql_type()");
        -:  180:            }
        -:  181:            return {};
    #####:  182:        }
        -:  183:
function _ZNK8drug_lib6common8database5FieldIiE5cloneEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5cloneEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIlE5cloneEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIdE5cloneEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldIbE5cloneEv called 0 returned 0% blocks executed 0%
function _ZNK8drug_lib6common8database5FieldINSt6chrono10time_pointINS3_3_V212system_clockENS3_8durationIlSt5ratioILl1ELl1000000000EEEEEEE5cloneEv called 0 returned 0% blocks executed 0%
    #####:  184:        [[nodiscard]] std::unique_ptr<FieldBase> clone() const override
        -:  185:        {
    #####:  186:            return std::make_unique<Field>(*this);
    $$$$$:  186-block  0
    $$$$$:  186-block  1
    $$$$$:  186-block  2
    $$$$$:  186-block  3
    $$$$$:  186-block  4
    $$$$$:  186-block  5
        -:  187:        }
        -:  188:
        -:  189:    private:
        -:  190:        std::string name_;
        -:  191:        T value_;
        -:  192:    };
        -:  193:
        -:  194:    class ViewingField final : public FieldBase
        -:  195:    {
        -:  196:    public:
        -:  197:        ViewingField(std::string&& name, std::string_view&& value)
        -:  198:            : name_(std::move(name)), value_(value)
        -:  199:        {
        -:  200:        }
        -:  201:
        -:  202:        /// @return Column name of the field
        -:  203:        [[nodiscard]] const std::string& get_name() const override { return name_; }
        -:  204:
        -:  205:        void set_name(const std::string& name) { name_ = name; }
        -:  206:        void set_name(std::string&& name) { name_ = std::move(name); }
        -:  207:
        -:  208:        /// @return Value of the field
        -:  209:        [[nodiscard]] std::string_view value() const { return value_; }
        -:  210:        void set_value(const std::string_view& value) { value_ = value; }
        -:  211:        void set_value(std::string_view&& value) { value_ = value; }
        -:  212:
        -:  213:        /// @brief Converts the field value to a string for SQL queries
        -:  214:        [[nodiscard]] std::string to_string() const & override
        -:  215:        {
        -:  216:            return std::string(value_);
        -:  217:        }
        -:  218:
        -:  219:        /// @brief Converts the field value to a string for SQL queries
        -:  220:        [[nodiscard]] std::string to_string() && override
        -:  221:        {
        -:  222:            return std::string(value_);
        -:  223:        }
        -:  224:
        -:  225:        /// @brief Gets the SQL data type of the field
        -:  226:        [[nodiscard]] std::string get_sql_type() const override
        -:  227:        {
        -:  228:            throw std::runtime_error("get_sql_type() called in VIEWING field");
        -:  229:        }
        -:  230:
        -:  231:        [[nodiscard]] std::unique_ptr<FieldBase> clone() const override
        -:  232:        {
        -:  233:            return std::make_unique<ViewingField>(*this);
        -:  234:        }
        -:  235:
        -:  236:    private:
        -:  237:        std::string name_;
        -:  238:        std::string_view value_;
        -:  239:    };
        -:  240:}
