        -:    0:Source:/home/neo/MedicamentLibrary/data/objects/base/include/disease.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Disease_Base.dir/disease/test_disease_base.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Disease_Base.dir/disease/test_disease_base.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:
        -:    4:#include "common_object.hpp"
        -:    5:#include "properties_controller.hpp"
        -:    6:
        -:    7:namespace drug_lib::data::objects
        -:    8:{
        -:    9:    class Disease final : public ObjectBase, public PropertiesHolder
        -:   10:    {
        -:   11:    public:
        -:   12:        struct field_name : _common_fields_names
        -:   13:        {
        -:   14:            static constexpr auto type = "type";
        -:   15:            static constexpr auto is_infectious = "is_infectious";
        -:   16:        };
        -:   17:
function _ZNK8drug_lib4data7objects7Disease9to_recordEv called 1 returned 100% blocks executed 55%
        1:   18:        [[nodiscard]] common::database::Record to_record() const override
        -:   19:        {
        1:   20:            common::database::Record record;
        1:   21:            record.push_back(std::make_unique<common::database::Field<int32_t>>(field_name::id, id_));
        1:   21-block  0
branch  0 taken 1
branch  1 taken 0
        1:   21-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   21-block  2
        1:   22:            record.push_back(std::make_unique<common::database::Field<std::string>>(field_name::name, name_));
        1:   22-block  0
branch  0 taken 1
branch  1 taken 0
        1:   22-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   22-block  2
        1:   23:            record.push_back(std::make_unique<common::database::Field<std::string>>(field_name::type, type_));
        1:   23-block  0
branch  0 taken 1
branch  1 taken 0
        1:   23-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   23-block  2
        1:   24:            record.push_back(
        1:   24-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   24-block  1
        1:   25:                std::make_unique<common::database::Field<bool>>(field_name::is_infectious, is_infectious_));
        1:   25-block  0
branch  0 taken 1
branch  1 taken 0
        1:   26:            record.push_back(collection_.make_properties_field());
        1:   26-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   26-block  1
        1:   27:            return record;
        1:   28:        }
        1:   28-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   28-block  1
    $$$$$:   28-block  2
        1:   28-block  3
    $$$$$:   28-block  4
    $$$$$:   28-block  5
        -:   29:
function _ZN8drug_lib4data7objects7Disease11from_recordERKNS_6common8database6RecordE called 1 returned 100% blocks executed 55%
        1:   30:        void from_record(const common::database::Record& record) override
        -:   31:        {
        5:   32:            for (const auto& field : record.fields())
        1:   32-block  0
        5:   32-block  1
branch  0 taken 4
branch  1 taken 1
        4:   32-block  2
        4:   32-block  3
        -:   33:            {
        8:   34:                if (const auto& field_name = field->get_name();
        4:   34-block  0
branch  0 taken 1
branch  1 taken 3
        4:   34-block  1
branch  2 taken 1
branch  3 taken 3
        4:   35:                    field_name == field_name::id)
        -:   36:                {
        1:   37:                    id_ = field->as<int32_t>();
        1:   38:                }
        1:   38-block  0
        3:   39:                else if (field_name == field_name::name)
        3:   39-block  0
branch  0 taken 1
branch  1 taken 2
        -:   40:                {
        1:   41:                    name_ = field->as<std::string>();
        1:   42:                }
        1:   42-block  0
        2:   43:                else if (field_name == field_name::type)
        2:   43-block  0
branch  0 taken 1
branch  1 taken 1
        -:   44:                {
        1:   45:                    type_ = field->as<std::string>();
        1:   46:                }
        1:   46-block  0
        1:   47:                else if (field_name == field_name::is_infectious)
        1:   47-block  0
branch  0 taken 1
branch  1 taken 0
        -:   48:                {
        1:   49:                    is_infectious_ = field->as<bool>();
        1:   50:                }
        1:   50-block  0
    #####:   51:                else if (field_name == field_name::properties)
    $$$$$:   51-block  0
branch  0 never executed
branch  1 never executed
        -:   52:                {
    #####:   53:                    create_collection(field);
    #####:   54:                }
    $$$$$:   54-block  0
        -:   55:                else
        -:   56:                {
    #####:   57:                    throw std::invalid_argument("Unknown field name: " + field_name);
    $$$$$:   57-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   57-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   57-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   57-block  3
    $$$$$:   57-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   57-block  5
    $$$$$:   57-block  6
    $$$$$:   57-block  7
        -:   58:                }
        -:   59:            }
        1:   60:        }
    $$$$$:   60-block  0
        1:   60-block  1
        -:   61:
function _ZN8drug_lib4data7objects7Disease11from_recordERKSt10unique_ptrINS_6common8database10ViewRecordESt14default_deleteIS6_EE called 0 returned 0% blocks executed 0%
    #####:   62:        void from_record(const std::unique_ptr<common::database::ViewRecord>& viewed) override
        -:   63:        {
    #####:   64:            for (std::size_t i = 0; i < viewed->size(); i++)
    $$$$$:   64-block  0
    $$$$$:   64-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   64-block  2
        -:   65:            {
    #####:   66:                if (const auto& field_name = viewed->name(i);
    $$$$$:   66-block  0
branch  0 never executed
branch  1 never executed
    #####:   67:                    field_name == field_name::id)
    $$$$$:   67-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   67-block  1
    $$$$$:   67-block  2
        -:   68:                {
    #####:   69:                    id_ = std::stoi(viewed->extract(i));
    $$$$$:   69-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   69-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   69-block  2
    #####:   70:                }
    $$$$$:   70-block  0
    #####:   71:                else if (field_name == field_name::name)
    $$$$$:   71-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   71-block  1
branch  2 never executed
branch  3 never executed
        -:   72:                {
    #####:   73:                    name_ = viewed->extract(i);
    $$$$$:   73-block  0
branch  0 never executed
branch  1 never executed
    #####:   74:                }
    $$$$$:   74-block  0
    #####:   75:                else if (field_name == field_name::type)
    $$$$$:   75-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   75-block  1
branch  2 never executed
branch  3 never executed
        -:   76:                {
    #####:   77:                    type_ = viewed->extract(i);
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
    #####:   78:                }
    $$$$$:   78-block  0
    #####:   79:                else if (field_name == field_name::is_infectious)
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   79-block  1
branch  2 never executed
branch  3 never executed
        -:   80:                {
    #####:   81:                    is_infectious_ = viewed->extract(i) == "true";
    $$$$$:   81-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   81-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   81-block  2
    #####:   82:                }
    $$$$$:   82-block  0
    #####:   83:                else if (field_name == field_name::properties)
    $$$$$:   83-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   83-block  1
branch  2 never executed
branch  3 never executed
        -:   84:                {
    #####:   85:                    create_collection(viewed->extract(i));
    $$$$$:   85-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   85-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   85-block  2
    #####:   86:                }
    $$$$$:   86-block  0
        -:   87:                else
        -:   88:                {
    #####:   89:                    throw std::invalid_argument("Unknown field name: " + field_name);
    $$$$$:   89-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   89-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   89-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   89-block  3
    $$$$$:   89-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   89-block  5
    $$$$$:   89-block  6
        -:   90:                }
    #####:   91:            }
    $$$$$:   91-block  0
    #####:   92:        }
    $$$$$:   92-block  0
    $$$$$:   92-block  1
    $$$$$:   92-block  2
        -:   93:
function _ZN8drug_lib4data7objects7DiseaseC2Ev called 3 returned 100% blocks executed 100%
        9:   94:        Disease() = default;
        3:   94-block  0
        3:   94-block  1
        3:   94-block  2
        -:   95:
function _ZN8drug_lib4data7objects7DiseaseC2EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_b called 2 returned 100% blocks executed 100%
        4:   96:        Disease(const int32_t id, std::string name, std::string type, const bool is_infectious)
        2:   97:            : id_(id),
        2:   98:              name_(std::move(name)),
        2:   99:              type_(std::move(type)),
        2:  100:              is_infectious_(is_infectious)
        4:  101:        {
        2:  102:        }
        2:  102-block  0
        -:  103:
function _ZNK8drug_lib4data7objects7Disease6get_idEv called 4 returned 100% blocks executed 100%
        4:  104:        [[nodiscard]] int32_t get_id() const
        -:  105:        {
        4:  106:            return id_;
        4:  106-block  0
        -:  107:        }
        -:  108:
function _ZN8drug_lib4data7objects7Disease6set_idEi called 1 returned 100% blocks executed 100%
        1:  109:        void set_id(const int32_t id)
        -:  110:        {
        1:  111:            id_ = id;
        1:  112:        }
        1:  112-block  0
        -:  113:
function _ZNK8drug_lib4data7objects7Disease8get_nameB5cxx11Ev called 4 returned 100% blocks executed 100%
        4:  114:        [[nodiscard]] const std::string& get_name() const
        -:  115:        {
        4:  116:            return name_;
        4:  116-block  0
        -:  117:        }
        -:  118:
function _ZN8drug_lib4data7objects7Disease8set_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  119:        void set_name(const std::string& name)
        -:  120:        {
        1:  121:            name_ = name;
        1:  122:        }
        1:  122-block  0
        -:  123:
function _ZNK8drug_lib4data7objects7Disease8get_typeB5cxx11Ev called 4 returned 100% blocks executed 100%
        4:  124:        [[nodiscard]] const std::string& get_type() const
        -:  125:        {
        4:  126:            return type_;
        4:  126-block  0
        -:  127:        }
        -:  128:
function _ZN8drug_lib4data7objects7Disease8set_typeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  129:        void set_type(const std::string& type)
        -:  130:        {
        1:  131:            type_ = type;
        1:  132:        }
        1:  132-block  0
        -:  133:
        -:  134:
function _ZNK8drug_lib4data7objects7Disease16is_is_infectiousEv called 4 returned 100% blocks executed 100%
        4:  135:        [[nodiscard]] bool is_is_infectious() const
        -:  136:        {
        4:  137:            return is_infectious_;
        4:  137-block  0
        -:  138:        }
        -:  139:
function _ZN8drug_lib4data7objects7Disease17set_is_infectiousEb called 1 returned 100% blocks executed 100%
        1:  140:        void set_is_infectious(const bool is_infectious)
        -:  141:        {
        1:  142:            is_infectious_ = is_infectious;
        1:  143:        }
        1:  143-block  0
        -:  144:
        -:  145:
function _ZN8drug_lib4data7objects7DiseaseD2Ev called 5 returned 100% blocks executed 100%
function _ZN8drug_lib4data7objects7DiseaseD0Ev called 0 returned 0% blocks executed 0%
        5:  146:        ~Disease() override = default;
        5:  146-block  0
    $$$$$:  146-block  1
        -:  147:
        -:  148:    private:
        3:  149:        int32_t id_ = -1;
        -:  150:        std::string name_;
        -:  151:        std::string type_;
        3:  152:        bool is_infectious_ = false;
        -:  153:    };
        -:  154:}
