        -:    0:Source:/home/neo/MedicamentLibrary/data/objects/base/include/patient.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Patient_Properties.dir/patient/properties/properties_test.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Patient_Properties.dir/patient/properties/properties_test.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include "common_object.hpp"
        -:    4:#include "properties_controller.hpp"
        -:    5:
        -:    6:namespace drug_lib::data::objects
        -:    7:{
        -:    8:    class Patient final : public ObjectBase, public PropertiesHolder
        -:    9:    {
        -:   10:    public:
        -:   11:        struct field_name : _common_fields_names
        -:   12:        {
        -:   13:            static constexpr auto gender = "gender";
        -:   14:            static constexpr auto birth_date = "birth_date";
        -:   15:            static constexpr auto contact_information = "contact_information";
        -:   16:        };
        -:   17:
function _ZN8drug_lib4data7objects7PatientC2Ev called 4 returned 100% blocks executed 100%
       12:   18:        Patient() = default;
        4:   18-block  0
        4:   18-block  1
        4:   18-block  2
        -:   19:
        -:   20:
        -:   21:        Patient(const int32_t id, std::string name, std::string gender, std::chrono::year_month_day const birth_date,
        -:   22:                std::string contact_information)
        -:   23:            : id_(id),
        -:   24:              name_(std::move(name)),
        -:   25:              gender_(std::move(gender)),
        -:   26:              birth_date_(birth_date),
        -:   27:              contact_information_(std::move(contact_information))
        -:   28:        {
        -:   29:        }
        -:   30:
function _ZN8drug_lib4data7objects7PatientD2Ev called 4 returned 100% blocks executed 100%
function _ZN8drug_lib4data7objects7PatientD0Ev called 0 returned 0% blocks executed 0%
        4:   31:        ~Patient() override = default;
        4:   31-block  0
    $$$$$:   31-block  1
        -:   32:
function _ZNK8drug_lib4data7objects7Patient9to_recordEv called 1 returned 100% blocks executed 56%
        1:   33:        [[nodiscard]] common::database::Record to_record() const override
        -:   34:        {
        1:   35:            common::database::Record record;
        1:   36:            record.push_back(std::make_unique<common::database::Field<int32_t>>(field_name::id, id_));
        1:   36-block  0
branch  0 taken 1
branch  1 taken 0
        1:   36-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   36-block  2
        1:   37:            record.push_back(std::make_unique<common::database::Field<std::string>>(field_name::name, name_));
        1:   37-block  0
branch  0 taken 1
branch  1 taken 0
        1:   37-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   37-block  2
        1:   38:            record.push_back(std::make_unique<common::database::Field<std::string>>(field_name::gender, gender_));
        1:   38-block  0
branch  0 taken 1
branch  1 taken 0
        1:   38-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   38-block  2
        1:   39:            record.push_back(
        1:   39-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   39-block  1
        1:   40:                std::make_unique<common::database::Field<std::chrono::system_clock::time_point>>(
        1:   40-block  0
branch  0 taken 1
branch  1 taken 0
        1:   41:                    field_name::birth_date, std::chrono::sys_days{birth_date_}));
        1:   42:            record.push_back(
        1:   42-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   42-block  1
        1:   43:                std::make_unique<common::database::Field<std::string>>(field_name::contact_information,
        1:   43-block  0
branch  0 taken 1
branch  1 taken 0
        1:   44:                                                                       contact_information_));
        1:   45:            record.push_back(collection_.make_properties_field());
        1:   45-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   45-block  1
        1:   46:            return record;
        1:   47:        }
        1:   47-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   47-block  1
    $$$$$:   47-block  2
        1:   47-block  3
    $$$$$:   47-block  4
    $$$$$:   47-block  5
        -:   48:
function _ZN8drug_lib4data7objects7Patient11from_recordERKNS_6common8database6RecordE called 0 returned 0% blocks executed 0%
    #####:   49:        void from_record(const common::database::Record& record) override
        -:   50:        {
    #####:   51:            for (const auto& field : record.fields())
    $$$$$:   51-block  0
    $$$$$:   51-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   51-block  2
    $$$$$:   51-block  3
        -:   52:            {
    #####:   53:                if (const auto& field_name = field->get_name();
    $$$$$:   53-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   53-block  1
branch  2 never executed
branch  3 never executed
    #####:   54:                    field_name == field_name::id)
        -:   55:                {
    #####:   56:                    id_ = field->as<int32_t>();
    #####:   57:                }
    $$$$$:   57-block  0
    #####:   58:                else if (field_name == field_name::name)
    $$$$$:   58-block  0
branch  0 never executed
branch  1 never executed
        -:   59:                {
    #####:   60:                    name_ = field->as<std::string>();
    #####:   61:                }
    $$$$$:   61-block  0
        -:   62:
    #####:   63:                else if (field_name == field_name::gender)
    $$$$$:   63-block  0
branch  0 never executed
branch  1 never executed
        -:   64:                {
    #####:   65:                    gender_ = field->as<std::string>();
    #####:   66:                }
    $$$$$:   66-block  0
    #####:   67:                else if (field_name == field_name::birth_date)
    $$$$$:   67-block  0
branch  0 never executed
branch  1 never executed
        -:   68:                {
    #####:   69:                    auto time_point = field->as<std::chrono::system_clock::time_point>();
    #####:   70:                    birth_date_ = std::chrono::floor<std::chrono::days>(time_point);
    #####:   71:                }
    $$$$$:   71-block  0
    #####:   72:                else if (field_name == field_name::contact_information)
    $$$$$:   72-block  0
branch  0 never executed
branch  1 never executed
        -:   73:                {
    #####:   74:                    contact_information_ = field->as<std::string>();
    #####:   75:                }
    $$$$$:   75-block  0
    #####:   76:                else if (field_name == field_name::properties)
    $$$$$:   76-block  0
branch  0 never executed
branch  1 never executed
        -:   77:                {
    #####:   78:                    create_collection(field);
    #####:   79:                }
    $$$$$:   79-block  0
        -:   80:                else
        -:   81:                {
    #####:   82:                    throw std::invalid_argument("Unknown field name: " + field_name);
    $$$$$:   82-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   82-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   82-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   82-block  3
    $$$$$:   82-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:   82-block  5
    $$$$$:   82-block  6
    $$$$$:   82-block  7
        -:   83:                }
        -:   84:            }
    #####:   85:        }
    $$$$$:   85-block  0
    $$$$$:   85-block  1
        -:   86:
function _ZN8drug_lib4data7objects7Patient11from_recordERKSt10unique_ptrINS_6common8database10ViewRecordESt14default_deleteIS6_EE called 0 returned 0% blocks executed 0%
    #####:   87:        void from_record(const std::unique_ptr<common::database::ViewRecord>& viewed) override
        -:   88:        {
    #####:   89:            for (std::size_t i = 0; i < viewed->size(); i++)
    $$$$$:   89-block  0
    $$$$$:   89-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   89-block  2
        -:   90:            {
    #####:   91:                if (const auto& field_name = viewed->name(i); field_name == field_name::id)
    $$$$$:   91-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   91-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   91-block  2
    $$$$$:   91-block  3
        -:   92:                {
    #####:   93:                    id_ = std::stoi(viewed->extract(i));
    $$$$$:   93-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   93-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   93-block  2
    #####:   94:                }
    $$$$$:   94-block  0
    #####:   95:                else if (field_name == field_name::name)
    $$$$$:   95-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   95-block  1
branch  2 never executed
branch  3 never executed
        -:   96:                {
    #####:   97:                    name_ = viewed->extract(i);
    $$$$$:   97-block  0
branch  0 never executed
branch  1 never executed
    #####:   98:                }
    $$$$$:   98-block  0
    #####:   99:                else if (field_name == field_name::gender)
    $$$$$:   99-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   99-block  1
branch  2 never executed
branch  3 never executed
        -:  100:                {
    #####:  101:                    gender_ = viewed->extract(i);
    $$$$$:  101-block  0
branch  0 never executed
branch  1 never executed
    #####:  102:                }
    $$$$$:  102-block  0
    #####:  103:                else if (field_name == field_name::birth_date)
    $$$$$:  103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  103-block  1
branch  2 never executed
branch  3 never executed
        -:  104:                {
    #####:  105:                    std::istringstream iss(viewed->extract(i));
    $$$$$:  105-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  105-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  105-block  2
    #####:  106:                    std::tm tm = {};
        -:  107:
    #####:  108:                    if (iss.fail())
    $$$$$:  108-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  108-block  1
branch  2 never executed
branch  3 never executed
        -:  109:                    {
    #####:  110:                        throw std::runtime_error("Failed to parse date: " + viewed->extract(i));
    $$$$$:  110-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  110-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  110-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  110-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  110-block  4
    $$$$$:  110-block  5
    $$$$$:  110-block  6
branch  8 never executed
branch  9 never executed
    $$$$$:  110-block  7
    $$$$$:  110-block  8
        -:  111:                    }
    #####:  112:                    auto tp = std::chrono::system_clock::from_time_t(std::mktime(&tm));
    #####:  113:                    birth_date_ = std::chrono::floor<std::chrono::days>(tp);
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
    #####:  114:                }
    $$$$$:  114-block  0
    $$$$$:  114-block  1
    #####:  115:                else if (field_name == field_name::contact_information)
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
branch  2 never executed
branch  3 never executed
        -:  116:                {
    #####:  117:                    contact_information_ = viewed->extract(i);
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    #####:  118:                }
    $$$$$:  118-block  0
    #####:  119:                else if (field_name == field_name::properties)
    $$$$$:  119-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  119-block  1
branch  2 never executed
branch  3 never executed
        -:  120:                {
    #####:  121:                    create_collection(viewed->extract(i));
    $$$$$:  121-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  121-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  121-block  2
    #####:  122:                }
    $$$$$:  122-block  0
        -:  123:                else
        -:  124:                {
    #####:  125:                    throw std::invalid_argument("Unknown field name: " + field_name);
    $$$$$:  125-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  125-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  125-block  2
    $$$$$:  125-block  3
    $$$$$:  125-block  4
    $$$$$:  125-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  125-block  6
    $$$$$:  125-block  7
        -:  126:                }
    #####:  127:            }
    $$$$$:  127-block  0
    #####:  128:        }
    $$$$$:  128-block  0
    $$$$$:  128-block  1
    $$$$$:  128-block  2
    $$$$$:  128-block  3
    $$$$$:  128-block  4
    $$$$$:  128-block  5
        -:  129:
        -:  130:        [[nodiscard]] int32_t get_id() const
        -:  131:        {
        -:  132:            return id_;
        -:  133:        }
        -:  134:
        -:  135:        void set_id(const int32_t id)
        -:  136:        {
        -:  137:            id_ = id;
        -:  138:        }
        -:  139:
        -:  140:        [[nodiscard]] const std::string& get_name() const
        -:  141:        {
        -:  142:            return name_;
        -:  143:        }
        -:  144:
        -:  145:        void set_name(const std::string& name)
        -:  146:        {
        -:  147:            name_ = name;
        -:  148:        }
        -:  149:
        -:  150:        [[nodiscard]] const std::string& get_gender() const
        -:  151:        {
        -:  152:            return gender_;
        -:  153:        }
        -:  154:
        -:  155:        void set_gender(const std::string& gender)
        -:  156:        {
        -:  157:            gender_ = gender;
        -:  158:        }
        -:  159:
        -:  160:        [[nodiscard]] const std::chrono::year_month_day& get_birth_date() const
        -:  161:        {
        -:  162:            return birth_date_;
        -:  163:        }
        -:  164:
        -:  165:        void set_birth_date(const std::chrono::year_month_day& birth_date)
        -:  166:        {
        -:  167:            birth_date_ = birth_date;
        -:  168:        }
        -:  169:
        -:  170:        [[nodiscard]] const std::string& get_contact_information() const
        -:  171:        {
        -:  172:            return contact_information_;
        -:  173:        }
        -:  174:
        -:  175:        void set_contact_information(const std::string& contact_information)
        -:  176:        {
        -:  177:            contact_information_ = contact_information;
        -:  178:        }
        -:  179:
        -:  180:    private:
        4:  181:        int32_t id_ = -1;
        -:  182:        std::string name_;
        -:  183:        std::string gender_;
        4:  184:        std::chrono::year_month_day birth_date_{};
        -:  185:        std::string contact_information_;
        -:  186:    };
        -:  187:}
