        -:    0:Source:/home/neo/MedicamentLibrary/data/objects/base/include/medicament.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Medicament_Properties.dir/medicament/properties/properties_test.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/unit_tests/objects/CMakeFiles/DrugLib_Tests_Unit_Objects_Medicament_Properties.dir/medicament/properties/properties_test.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:
        -:    4:#include "common_object.hpp"
        -:    5:#include "properties_controller.hpp"
        -:    6:
        -:    7:namespace drug_lib::data::objects
        -:    8:{
        -:    9:    class Medicament final : public ObjectBase, public PropertiesHolder
        -:   10:    {
        -:   11:    public:
        -:   12:        struct field_name : _common_fields_names
        -:   13:        {
        -:   14:            static constexpr auto type = "type";
        -:   15:            static constexpr auto requires_prescription = "prescription";
        -:   16:            static constexpr auto manufacturer_id = "manufacturer_id";
        -:   17:        };
        -:   18:
        -:   19:        // Конструктор по умолчанию
function _ZN8drug_lib4data7objects10MedicamentC2Ev called 3 returned 100% blocks executed 100%
        9:   20:        Medicament() = default;
        3:   20-block  0
        3:   20-block  1
        3:   20-block  2
        -:   21:
        -:   22:        // Конструктор с параметрами
function _ZN8drug_lib4data7objects10MedicamentC2EiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_bi called 1 returned 100% blocks executed 100%
        2:   23:        Medicament(const int32_t id, std::string name, std::string type, const bool requires_prescription,
        -:   24:                   const int32_t manufacturer_id)
        1:   25:            : id_(id), name_(std::move(name)), type_(std::move(type)), requires_prescription_(requires_prescription),
        1:   26:              manufacturer_id_(manufacturer_id)
        2:   27:        {
        1:   28:        }
        1:   28-block  0
        -:   29:
function _ZN8drug_lib4data7objects10MedicamentD2Ev called 4 returned 100% blocks executed 100%
function _ZN8drug_lib4data7objects10MedicamentD0Ev called 0 returned 0% blocks executed 0%
        4:   30:        ~Medicament() override = default;
        4:   30-block  0
    $$$$$:   30-block  1
        -:   31:
        -:   32:        // Методы для получения и установки данных медикамента
        -:   33:        [[nodiscard]] const std::string& get_name() const
        -:   34:        {
        -:   35:            return name_;
        -:   36:        }
        -:   37:
        -:   38:        void set_name(const std::string& name)
        -:   39:        {
        -:   40:            name_ = name;
        -:   41:        }
        -:   42:
        -:   43:        [[nodiscard]] int32_t id() const
        -:   44:        {
        -:   45:            return id_;
        -:   46:        }
        -:   47:
        -:   48:        void set_id(const int32_t id)
        -:   49:        {
        -:   50:            id_ = id;
        -:   51:        }
        -:   52:
        -:   53:        [[nodiscard]] const std::string& get_type() const
        -:   54:        {
        -:   55:            return type_;
        -:   56:        }
        -:   57:
        -:   58:        void set_type(const std::string& type)
        -:   59:        {
        -:   60:            type_ = type;
        -:   61:        }
        -:   62:
        -:   63:        [[nodiscard]] bool is_requires_prescription() const
        -:   64:        {
        -:   65:            return requires_prescription_;
        -:   66:        }
        -:   67:
        -:   68:        void set_requires_prescription(const bool requires_prescription)
        -:   69:        {
        -:   70:            requires_prescription_ = requires_prescription;
        -:   71:        }
        -:   72:
        -:   73:        [[nodiscard]] int32_t get_manufacturer_id() const
        -:   74:        {
        -:   75:            return manufacturer_id_;
        -:   76:        }
        -:   77:
        -:   78:        void set_manufacturer_id(const int32_t manufacturer_id)
        -:   79:        {
        -:   80:            manufacturer_id_ = manufacturer_id;
        -:   81:        }
        -:   82:
        -:   83:        // Метод для преобразования медикамента в запись (Record)
function _ZNK8drug_lib4data7objects10Medicament9to_recordEv called 1 returned 100% blocks executed 56%
        1:   84:        [[nodiscard]] common::database::Record to_record() const override
        -:   85:        {
        1:   86:            common::database::Record record;
        1:   87:            record.push_back(std::make_unique<common::database::Field<int32_t>>(field_name::id, id_));
        1:   87-block  0
branch  0 taken 1
branch  1 taken 0
        1:   87-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   87-block  2
        1:   88:            record.push_back(std::make_unique<common::database::Field<std::string>>(field_name::name, name_));
        1:   88-block  0
branch  0 taken 1
branch  1 taken 0
        1:   88-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   88-block  2
        1:   89:            record.push_back(std::make_unique<common::database::Field<std::string>>(field_name::type, type_));
        1:   89-block  0
branch  0 taken 1
branch  1 taken 0
        1:   89-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   89-block  2
        1:   90:            record.push_back(
        1:   90-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   90-block  1
        1:   91:                std::make_unique<common::database::Field<bool>>(field_name::requires_prescription,
        1:   91-block  0
branch  0 taken 1
branch  1 taken 0
        1:   92:                                                                requires_prescription_));
        1:   93:            record.push_back(
        1:   93-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   93-block  1
        1:   94:                std::make_unique<common::database::Field<int32_t>>(field_name::manufacturer_id, manufacturer_id_));
        1:   94-block  0
branch  0 taken 1
branch  1 taken 0
        1:   95:            record.push_back(collection_.make_properties_field());
        1:   95-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   95-block  1
        1:   96:            return record;
        1:   97:        }
        1:   97-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:   97-block  1
    $$$$$:   97-block  2
        1:   97-block  3
    $$$$$:   97-block  4
    $$$$$:   97-block  5
        -:   98:
        -:   99:        // Метод для обновления данных медикамента на основе записи
function _ZN8drug_lib4data7objects10Medicament11from_recordERKNS_6common8database6RecordE called 0 returned 0% blocks executed 0%
    #####:  100:        void from_record(const common::database::Record& record) override
        -:  101:        {
    #####:  102:            for (const auto& field : record.fields())
    $$$$$:  102-block  0
    $$$$$:  102-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  102-block  2
    $$$$$:  102-block  3
        -:  103:            {
    #####:  104:                if (const auto& field_name = field->get_name();
    $$$$$:  104-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  104-block  1
branch  2 never executed
branch  3 never executed
    #####:  105:                    field_name == field_name::id)
        -:  106:                {
    #####:  107:                    id_ = field->as<int32_t>();
    #####:  108:                }
    $$$$$:  108-block  0
    #####:  109:                else if (field_name == field_name::name)
    $$$$$:  109-block  0
branch  0 never executed
branch  1 never executed
        -:  110:                {
    #####:  111:                    name_ = field->as<std::string>();
    #####:  112:                }
    $$$$$:  112-block  0
    #####:  113:                else if (field_name == field_name::type)
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
        -:  114:                {
    #####:  115:                    type_ = field->as<std::string>();
    #####:  116:                }
    $$$$$:  116-block  0
    #####:  117:                else if (field_name == field_name::requires_prescription)
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
        -:  118:                {
    #####:  119:                    requires_prescription_ = field->as<bool>();
    #####:  120:                }
    $$$$$:  120-block  0
    #####:  121:                else if (field_name == field_name::manufacturer_id)
    $$$$$:  121-block  0
branch  0 never executed
branch  1 never executed
        -:  122:                {
    #####:  123:                    manufacturer_id_ = field->as<int32_t>();
    #####:  124:                }
    $$$$$:  124-block  0
    #####:  125:                else if (field_name == field_name::properties)
    $$$$$:  125-block  0
branch  0 never executed
branch  1 never executed
        -:  126:                {
    #####:  127:                    create_collection(field);
    #####:  128:                }
    $$$$$:  128-block  0
        -:  129:                else
        -:  130:                {
    #####:  131:                    throw std::invalid_argument("Unknown field name: " + field_name);
    $$$$$:  131-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  131-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  131-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  131-block  3
    $$$$$:  131-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  131-block  5
    $$$$$:  131-block  6
    $$$$$:  131-block  7
        -:  132:                }
        -:  133:            }
    #####:  134:        }
    $$$$$:  134-block  0
    $$$$$:  134-block  1
        -:  135:
function _ZN8drug_lib4data7objects10Medicament11from_recordERKSt10unique_ptrINS_6common8database10ViewRecordESt14default_deleteIS6_EE called 0 returned 0% blocks executed 0%
    #####:  136:        void from_record(const std::unique_ptr<common::database::ViewRecord>& viewed) override
        -:  137:        {
    #####:  138:            for (std::size_t i = 0; i < viewed->size(); i++)
    $$$$$:  138-block  0
    $$$$$:  138-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  138-block  2
        -:  139:            {
    #####:  140:                if (const auto& field_name = viewed->name(i); field_name == field_name::id)
    $$$$$:  140-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  140-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  140-block  2
    $$$$$:  140-block  3
        -:  141:                {
    #####:  142:                    id_ = std::stoi(viewed->extract(i));
    $$$$$:  142-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  142-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  142-block  2
    #####:  143:                }
    $$$$$:  143-block  0
    #####:  144:                else if (field_name == field_name::name)
    $$$$$:  144-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  144-block  1
branch  2 never executed
branch  3 never executed
        -:  145:                {
    #####:  146:                    name_ = viewed->extract(i);
    $$$$$:  146-block  0
branch  0 never executed
branch  1 never executed
    #####:  147:                }
    $$$$$:  147-block  0
    #####:  148:                else if (field_name == field_name::type)
    $$$$$:  148-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  148-block  1
branch  2 never executed
branch  3 never executed
        -:  149:                {
    #####:  150:                    type_ = viewed->extract(i);
    $$$$$:  150-block  0
branch  0 never executed
branch  1 never executed
    #####:  151:                }
    $$$$$:  151-block  0
    #####:  152:                else if (field_name == field_name::requires_prescription)
    $$$$$:  152-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  152-block  1
branch  2 never executed
branch  3 never executed
        -:  153:                {
    #####:  154:                    requires_prescription_ = viewed->view(i) == "true";
    $$$$$:  154-block  0
branch  0 never executed
branch  1 never executed
    #####:  155:                }
    $$$$$:  155-block  0
    #####:  156:                else if (field_name == field_name::manufacturer_id)
    $$$$$:  156-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  156-block  1
branch  2 never executed
branch  3 never executed
        -:  157:                {
    #####:  158:                    manufacturer_id_ = std::stoi(viewed->extract(i));
    $$$$$:  158-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  158-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  158-block  2
    #####:  159:                }
    $$$$$:  159-block  0
    #####:  160:                else if (field_name == field_name::properties)
    $$$$$:  160-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  160-block  1
branch  2 never executed
branch  3 never executed
        -:  161:                {
    #####:  162:                    create_collection(viewed->extract(i));
    $$$$$:  162-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  162-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  162-block  2
    #####:  163:                }
    $$$$$:  163-block  0
        -:  164:                else
        -:  165:                {
    #####:  166:                    throw std::invalid_argument("Unknown field name: " + field_name);
    $$$$$:  166-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  166-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  166-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  166-block  3
    $$$$$:  166-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  166-block  5
    $$$$$:  166-block  6
        -:  167:                }
    #####:  168:            }
    $$$$$:  168-block  0
    #####:  169:        }
    $$$$$:  169-block  0
    $$$$$:  169-block  1
    $$$$$:  169-block  2
        -:  170:
        -:  171:    private:
        3:  172:        int32_t id_ = -1;
        -:  173:        std::string name_;
        -:  174:        std::string type_;
        3:  175:        bool requires_prescription_ = false;
        3:  176:        int32_t manufacturer_id_ = -1;
        -:  177:    };
        -:  178:}
