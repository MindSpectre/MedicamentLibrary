        -:    0:Source:/home/neo/MedicamentLibrary/common/db/postgres/pqxx_impl/include/pqxx_utilities.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:#include <thread>
        -:    3:
        -:    4:#include <pqxx_client.hpp>
        -:    5:
        -:    6:namespace drug_lib::common::database::utilities
        -:    7:{
        -:    8:    inline void multi_thread_insertion(const std::shared_ptr<PqxxClient>& client, const std::string_view table_name,
        -:    9:                                       std::vector<Record>&& records, const uint32_t flush = 1 << 10,
        -:   10:                                       const int8_t thread_count = 4)
        -:   11:    {
        -:   12:        auto poster_worker = [&](const int start_index)
        -:   13:        {
        -:   14:            std::vector<Record> pack;
        -:   15:            pack.reserve(flush);
        -:   16:            for (uint32_t i = start_index; i < records.size(); i += thread_count)
        -:   17:            {
        -:   18:                pack.push_back(std::move(records[i]));
        -:   19:                if (pack.size() >= flush)
        -:   20:                {
        -:   21:                    client->insert(table_name, std::move(pack));
        -:   22:                    pack.clear();
        -:   23:                }
        -:   24:            }
        -:   25:            if (!pack.empty())
        -:   26:            {
        -:   27:                client->insert(table_name, std::move(pack));
        -:   28:                pack.clear();
        -:   29:            }
        -:   30:        };
        -:   31:
        -:   32:        std::vector<std::thread> threads;
        -:   33:        threads.reserve(thread_count);
        -:   34:        client->start_transaction();
        -:   35:        for (int t = 0; t < thread_count; ++t)
        -:   36:        {
        -:   37:            threads.emplace_back(poster_worker, t); // Each thread handles a different starting point
        -:   38:        }
        -:   39:        for (auto& thread : threads)
        -:   40:        {
        -:   41:            thread.join();
        -:   42:        }
        -:   43:        client->commit_transaction();
        -:   44:    }
        -:   45:
function _ZN8drug_lib6common8database9utilities14bulk_insertionERKSt10shared_ptrINS1_10PqxxClientEESt17basic_string_viewIcSt11char_traitsIcEEOSt6vectorINS1_6RecordESaISD_EEja called 1 returned 100% blocks executed 88%
        1:   46:    inline void bulk_insertion(const std::shared_ptr<PqxxClient>& client, const std::string_view table_name,
        -:   47:                               std::vector<Record>&& records, const uint32_t flush = 1 << 14,
        -:   48:                               const int8_t thread_count = 4)
        -:   49:    {
function _ZZN8drug_lib6common8database9utilities14bulk_insertionERKSt10shared_ptrINS1_10PqxxClientEESt17basic_string_viewIcSt11char_traitsIcEEOSt6vectorINS1_6RecordESaISD_EEjaENKUliE_clEi called 6 returned 100% blocks executed 86%
        7:   50:        auto poster_worker = [&](const int start_index)
        -:   51:        {
        6:   52:            std::vector<Record> pack;
        6:   53:            pack.reserve(flush);
        6:   53-block  0
branch  0 taken 6
branch  1 taken 0
    75486:   54:            for (uint32_t i = start_index; i < records.size(); i += thread_count)
        6:   54-block  0
    75486:   54-block  1
branch  0 taken 75480
branch  1 taken 6
    75480:   54-block  2
        -:   55:            {
    75480:   56:                pack.push_back(std::move(records[i]));
    75480:   56-block  0
branch  0 taken 75480
branch  1 taken 0
    75480:   57:                if (pack.size() >= flush)
    75480:   57-block  0
branch  0 taken 6
branch  1 taken 75474
        -:   58:                {
        6:   59:                    client->insert(table_name, std::move(pack));
        6:   59-block  0
branch  0 taken 6
branch  1 taken 0
        6:   60:                    pack.clear();
        6:   61:                }
        6:   61-block  0
    75480:   62:            }
    75480:   62-block  0
        6:   63:            if (!pack.empty())
        6:   63-block  0
branch  0 taken 6
branch  1 taken 0
        -:   64:            {
        6:   65:                client->insert(table_name, std::move(pack));
        6:   65-block  0
branch  0 taken 6
branch  1 taken 0
        6:   66:                pack.clear();
        6:   67:            }
        6:   67-block  0
        6:   68:        };
    $$$$$:   68-block  0
        6:   68-block  1
    $$$$$:   68-block  2
        -:   69:
        1:   70:        std::vector<std::thread> threads;
        1:   71:        threads.reserve(thread_count);
        1:   71-block  0
branch  0 taken 1
branch  1 taken 0
        1:   72:        client->start_transaction();
        1:   72-block  0
branch  0 taken 1
branch  1 taken 0
        1:   73:        client->drop_fts_index(table_name);
        1:   73-block  0
branch  0 taken 1
branch  1 taken 0
        7:   74:        for (int t = 0; t < thread_count; ++t)
        1:   74-block  0
        7:   74-block  1
branch  0 taken 1
branch  1 taken 6
        6:   74-block  2
        -:   75:        {
        6:   76:            threads.emplace_back(poster_worker, t); // Each thread handles a different starting point
        6:   76-block  0
branch  0 taken 6
branch  1 taken 0
        6:   77:        }
        6:   77-block  0
        7:   78:        for (auto& thread : threads)
        1:   78-block  0
        7:   78-block  1
branch  0 taken 1
branch  1 taken 6
        6:   78-block  2
        6:   78-block  3
        -:   79:        {
        6:   80:            thread.join();
        6:   80-block  0
branch  0 taken 6
branch  1 taken 0
        -:   81:        }
        1:   82:        client->restore_fts_index(table_name);
        1:   82-block  0
branch  0 taken 1
branch  1 taken 0
        1:   83:        client->commit_transaction();
        1:   83-block  0
branch  0 taken 1
branch  1 taken 0
        1:   84:    }
    $$$$$:   84-block  0
        1:   84-block  1
    $$$$$:   84-block  2
        -:   85:}
