        -:    0:Source:/home/neo/MedicamentLibrary/common/db/postgres/pqxx_impl/include/pqxx_client.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_PqxxClient.dir/unit_tests/pqxx_client/test_pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// pqxx_client.hpp
        -:    2:#pragma once
        -:    3:
        -:    4:#include <memory>
        -:    5:#include <mutex>
        -:    6:#include <regex>
        -:    7:#include <string>
        -:    8:#include <string_view>
        -:    9:#include <vector>
        -:   10:#include <boost/container/flat_map.hpp>
        -:   11:#include <pqxx/pqxx>
        -:   12:
        -:   13:#include "db_interface.hpp"
        -:   14:#include "exceptions.hpp"
        -:   15:#include "pqxx_connect_params.hpp"
        -:   16:
        -:   17:
        -:   18:namespace drug_lib::common::database
        -:   19:{
        -:   20:    class PqxxClient final : public interfaces::DbInterface
        -:   21:    {
        -:   22:    public:
        -:   23:        /// @brief Creating database with given params using template db
        -:   24:        static void create_database(std::string_view host,
        -:   25:                                    uint32_t port,
        -:   26:                                    std::string_view db_name,
        -:   27:                                    std::string_view login,
        -:   28:                                    std::string_view password);
        -:   29:        static void create_database(const PqxxConnectParams& pr);
        -:   30:        /// @brief Explicitly close the connection. Destructor do the same, but this function can throw exception
        -:   31:        void drop_connect() override;
        -:   32:
        -:   33:
        -:   34:        /// @brief Trying to connect to the database, if connection is not open will throw exception
        -:   35:        /// @throws drug_lib::common::database::exceptions::ConnectionException
        -:   36:        PqxxClient(std::string_view host,
        -:   37:                   uint32_t port,
        -:   38:                   std::string_view db_name,
        -:   39:                   std::string_view login,
        -:   40:                   std::string_view password);
        -:   41:        explicit PqxxClient(const PqxxConnectParams& pr);
function _ZN8drug_lib6common8database10PqxxClientD2Ev called 20 returned 100% blocks executed 100%
       20:   42:        ~PqxxClient() override = default;
       20:   42-block  0
        -:   43:
        -:   44:        // Transaction Methods
        -:   45:        /// @brief Start a transaction. All queries before commiting/roll backing a transaction will use common transaction
        -:   46:        /// @throws  drug_lib::common::database::exceptions::TransactionException
        -:   47:        void start_transaction() override;
        -:   48:
        -:   49:        /// @brief Commit a transaction. If throws an exception, all transaction will be reverted
        -:   50:        /// @throws  drug_lib::common::database::exceptions::TransactionException
        -:   51:        void commit_transaction() override;
        -:   52:
        -:   53:        /// @brief Instantly cancel a transaction
        -:   54:        /// @throws  drug_lib::common::database::exceptions::TransactionException
        -:   55:        void rollback_transaction() override;
        -:   56:
        -:   57:        /// @brief Create unique index for the table
        -:   58:        /// @param table_name For which table created index.
        -:   59:        /// @param conflict_fields Fields which will be unique for each record
        -:   60:        void make_unique_constraint(std::string_view table_name,
        -:   61:                                    std::vector<std::shared_ptr<FieldBase>> conflict_fields) override;
        -:   62:
        -:   63:        /// @brief Create full test search index for given fields
        -:   64:        /// @param table_name For which table created index.
        -:   65:        /// @param fields Fts fields
        -:   66:        void setup_fts_index(
        -:   67:            std::string_view table_name,
        -:   68:            std::vector<std::shared_ptr<FieldBase>> fields) override;
        -:   69:
        -:   70:        /// @brief Drop index, but doesn't remove fts fields from this client. Allows to restore it(reindex) using restore_full_text_search method
        -:   71:        void drop_fts_index(std::string_view table_name) const override;
        -:   72:
        -:   73:        /// @brief Drop index + remove fields from this client. For using fts further setup_fulltext_search should be called again
        -:   74:        void remove_fts_index(std::string_view table_name) override;
        -:   75:
        -:   76:        /// @brief Restore index + reindex. Use previous declared fts fields
        -:   77:        void restore_fts_index(std::string_view table_name) const override;
        -:   78:        // Table Management
        -:   79:
        -:   80:        /// @param table_name new table name
        -:   81:        /// @param field_list properties of fields of new table
        -:   82:        void create_table(std::string_view table_name, const Record& field_list) override;
        -:   83:
        -:   84:        void remove_table(std::string_view table_name) override;
        -:   85:        void truncate_table(std::string_view table_name) override;
        -:   86:        /// @return Existence status of table
        -:   87:        [[nodiscard]] bool check_table(std::string_view table_name) override;
        -:   88:
        -:   89:        // Data Retrieval
        -:   90:
        -:   91:        /// @brief Select records follow conditions. Copy all data to own it
        -:   92:        /// @return Vector of records. Each element of vector - one row in a table
        -:   93:        [[nodiscard]] std::vector<Record> select(
        -:   94:            std::string_view table_name,
        -:   95:            const Conditions& conditions) const override;
        -:   96:        /// @brief Select all table records.
        -:   97:        /// @warning Slow, because of copying all fields
        -:   98:        [[nodiscard]] std::vector<Record> select(
        -:   99:            std::string_view table_name) const override;
        -:  100:
        -:  101:        /// @brief Faster than select, but doesn't transform and allows only one operation view field
        -:  102:        /// @return Vector of view records. Each element of vector - one row in a table
        -:  103:        /// @warning If u need not only view data, use select.
        -:  104:        [[nodiscard]] std::vector<std::unique_ptr<ViewRecord>> view(
        -:  105:            std::string_view table_name,
        -:  106:            const Conditions& conditions) const override;
        -:  107:
        -:  108:        /// @brief Faster than select, but doesn't transform and allows only one operation view field
        -:  109:        /// @return Vector of view records. Each element of vector - one row in a table
        -:  110:        /// @warning If u need not only view data, use select.
        -:  111:        [[nodiscard]] std::vector<std::unique_ptr<ViewRecord>> view(std::string_view table_name) const override;
        -:  112:        // Remove Data
        -:  113:        ///@brief remove data following conditions
        -:  114:        void remove(std::string_view table_name,
        -:  115:                    const Conditions& conditions) override;
        -:  116:
        -:  117:        // Get Record Count
        -:  118:        /// @return Count of records
        -:  119:        [[nodiscard]] uint32_t count(std::string_view table_name,
        -:  120:                                     const Conditions& conditions) const override;
        -:  121:        /// @return Count of all records in table
        -:  122:        [[nodiscard]] uint32_t count(std::string_view table_name) const override;
        -:  123:
        -:  124:    protected:
        -:  125:        // Implementation Methods for Data Manipulation
        -:  126:        void insert_implementation(std::string_view table_name, const std::vector<Record>& rows) override;
        -:  127:        void insert_implementation(std::string_view table_name, std::vector<Record>&& rows) override;
        -:  128:
        -:  129:        void upsert_implementation(std::string_view table_name,
        -:  130:                                   const std::vector<Record>& rows,
        -:  131:                                   const std::vector<std::shared_ptr<FieldBase>>& replace_fields) override;
        -:  132:
        -:  133:        void upsert_implementation(std::string_view table_name,
        -:  134:                                   std::vector<Record>&& rows,
        -:  135:                                   const std::vector<std::shared_ptr<FieldBase>>& replace_fields) override;
        -:  136:
        -:  137:    private:
        -:  138:        boost::container::flat_map<uint32_t, std::string> type_oids_; // id, name
        -:  139:        boost::container::flat_map<std::string, std::vector<std::shared_ptr<FieldBase>>> conflict_fields_ = {};
        -:  140:        boost::container::flat_map<std::string, std::vector<std::shared_ptr<FieldBase>>> fts_fields_ = {};
        -:  141:        std::shared_ptr<pqxx::connection> conn_;
        -:  142:        mutable std::recursive_mutex conn_mutex_;
        -:  143:        mutable std::unique_ptr<pqxx::work> open_transaction_;
        -:  144:        bool in_transaction_;
        -:  145:
        -:  146:        void _oid_preprocess();
        -:  147:        [[nodiscard]] std::unique_ptr<FieldBase> process_field(const pqxx::field& field) const;
        -:  148:        // Utility Methods
        -:  149:        [[nodiscard]] static bool is_valid_identifier(std::string_view identifier);
        -:  150:
        -:  151:        void execute_query(const std::string& query_string, const pqxx::params& params) const;
        -:  152:        void execute_query(const std::string& query_string) const;
        -:  153:        pqxx::result execute_query_with_result(const std::string& query_string, const pqxx::params& params) const;
        -:  154:        pqxx::result execute_query_with_result(const std::string& query_string) const;
        -:  155:
        -:  156:        template <interfaces::RecordContainer Rec>
        -:  157:        std::pair<std::string, pqxx::params> construct_insert_query(
        -:  158:            const std::string_view table_name,
        -:  159:            Rec&& rows) const
        -:  160:        {
        -:  161:            if (rows.empty())
        -:  162:            {
        -:  163:                throw exceptions::QueryException("No data provided for insert.", errors::db_error_code::INVALID_QUERY);
        -:  164:            }
        -:  165:            const std::string table = escape_identifier(table_name);
        -:  166:            std::ostringstream query_stream;
        -:  167:            query_stream << "INSERT INTO " << table << " (";
        -:  168:            // Get field names from the first record
        -:  169:            const auto& first_record = rows.front();
        -:  170:            std::vector<std::string> field_names;
        -:  171:            for (const auto& it : first_record)
        -:  172:            {
        -:  173:                field_names.push_back(it->get_name());
        -:  174:                query_stream << escape_identifier(field_names.back()) << ", ";
        -:  175:            }
        -:  176:            std::string query = query_stream.str();
        -:  177:            query.erase(query.size() - 2); // Remove last comma and space
        -:  178:            query += ") VALUES ";
        -:  179:
        -:  180:
        -:  181:            pqxx::params params;
        -:  182:            uint32_t param_counter = 1;
        -:  183:            for (auto&& record : std::forward<Rec>(rows))
        -:  184:            {
        -:  185:                query += "(";
        -:  186:                for (auto&& field : record)
        -:  187:                {
        -:  188:                    query += "$" + std::to_string(param_counter++) + ", ";
        -:  189:
        -:  190:                    // Call the correct version of to_string() depending on the value category
        -:  191:                    params.append(std::forward<decltype(field)>(field)->to_string());
        -:  192:                }
        -:  193:                query.erase(query.size() - 2); // Remove last comma and space
        -:  194:                query += "), ";
        -:  195:            }
        -:  196:            query.erase(query.size() - 2); // Remove last comma and space
        -:  197:            query += ";";
        -:  198:            return {query, params};
        -:  199:        }
        -:  200:
        -:  201:        std::string escape_identifier(std::string_view identifier) const;
        -:  202:
        -:  203:        std::unique_ptr<pqxx::work> initialize_transaction() const;
        -:  204:        void finish_transaction(std::unique_ptr<pqxx::work>&& current_transaction) const;
        -:  205:        static exceptions::DatabaseException adapt_exception(const std::exception& pqxxerr);
        -:  206:
        -:  207:        void build_conflict_clause_for_force_insert(std::string& query, std::string_view table_name,
        -:  208:                                                    const std::vector<std::shared_ptr<FieldBase>>& replace_fields)
        -:  209:        const &;
        -:  210:        void conditions_to_query(std::string_view table_name, std::ostringstream& query_stream,
        -:  211:                                 pqxx::params& params,
        -:  212:                                 uint32_t& param_index, const Conditions& conditions) const;
        -:  213:
        -:  214:        void create_fts_index_query(std::string_view table_name, std::ostringstream& index_query) const;
        -:  215:        static std::string make_fts_index_name(std::string_view table_name);
        -:  216:    };
        -:  217:}
