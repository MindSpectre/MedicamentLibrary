        -:    0:Source:/home/neo/MedicamentLibrary/common/db/postgres/pqxx_impl/source/pqxx_client.cpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// pqxx_client.cpp
        -:    2:
        -:    3:#include "pqxx_client.hpp"
        -:    4:
        -:    5:#include <chrono>
        -:    6:#include <iostream>
        -:    7:#include <regex>
        -:    8:#include <sstream>
        -:    9:
        -:   10:#include "db_conditions.hpp"
        -:   11:#include "db_field.hpp"
        -:   12:#include "pqxx_view_record.hpp"
        -:   13:#include "stopwatch.hpp"
        -:   14:
        -:   15:namespace drug_lib::common::database
        -:   16:{
        -:   17:    using namespace exceptions;
        -:   18:    using db_err = errors::db_error_code;
        -:   19:    //Constructors
function _ZN8drug_lib6common8database10PqxxClientC2ESt17basic_string_viewIcSt11char_traitsIcEEjS6_S6_S6_ called 0 returned 0% blocks executed 0%
    #####:   20:    PqxxClient::PqxxClient(const std::string_view host,
        -:   21:                           const uint32_t port,
        -:   22:                           const std::string_view db_name,
        -:   23:                           const std::string_view login,
        -:   24:                           const std::string_view password)
        -:   25:        : in_transaction_(false)
    #####:   26:    {
        -:   27:        try
        -:   28:        {
    #####:   29:            std::ostringstream conn_str;
    $$$$$:   29-block  0
branch  0 never executed
branch  1 never executed
    #####:   30:            conn_str << "host=" << host
    $$$$$:   30-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   30-block  1
branch  2 never executed
branch  3 never executed
    #####:   31:                << " port=" << port
    $$$$$:   31-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   31-block  1
branch  2 never executed
branch  3 never executed
    #####:   32:                << " user=" << login
    $$$$$:   32-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   32-block  1
branch  2 never executed
branch  3 never executed
    #####:   33:                << " password=" << password
    $$$$$:   33-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   33-block  1
branch  2 never executed
branch  3 never executed
    #####:   34:                << " dbname=" << db_name;
    $$$$$:   34-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   34-block  1
branch  2 never executed
branch  3 never executed
        -:   35:
    #####:   36:            this->conn_ = std::make_shared<pqxx::connection>(conn_str.str());
    $$$$$:   36-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   36-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   36-block  2
    #####:   37:            if (!this->conn_->is_open())
    $$$$$:   37-block  0
branch  0 never executed
branch  1 never executed
        -:   38:            {
    #####:   39:                throw ConnectionException("Failed to open database connection.",
    $$$$$:   39-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   39-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   39-block  2
    $$$$$:   39-block  3
    $$$$$:   39-block  4
    $$$$$:   39-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   39-block  6
    $$$$$:   39-block  7
        -:   40:                                          db_err::CONNECTION_FAILED);
        -:   41:            }
    #####:   42:            _oid_preprocess();
    $$$$$:   42-block  0
branch  0 never executed
branch  1 never executed
    #####:   43:        }
    $$$$$:   43-block  0
    $$$$$:   43-block  1
    $$$$$:   43-block  2
branch  0 never executed
branch  1 never executed
    $$$$$:   43-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:   43-block  4
branch  4 never executed
branch  5 never executed
        -:   44:        catch (const pqxx::too_many_connections& e)
        -:   45:        {
    #####:   46:            throw ConnectionException(e.what(), db_err::CONNECTION_POOL_EXHAUSTED);
    $$$$$:   46-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   46-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   46-block  2
    $$$$$:   46-block  3
    $$$$$:   46-block  4
    $$$$$:   46-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   46-block  6
    #####:   47:        }
    $$$$$:   47-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   47-block  1
        -:   48:        catch (const pqxx::sql_error& e)
        -:   49:        {
    #####:   50:            throw ConnectionException(e.what(), db_err::INVALID_QUERY);
    $$$$$:   50-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   50-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    $$$$$:   50-block  4
    $$$$$:   50-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   50-block  6
    #####:   51:        }
    $$$$$:   51-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   51-block  1
        -:   52:
        -:   53:        catch (const std::exception& e)
        -:   54:        {
    #####:   55:            throw ConnectionException(e.what(), db_err::PERMISSION_DENIED);
    $$$$$:   55-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   55-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   55-block  2
    $$$$$:   55-block  3
    $$$$$:   55-block  4
    $$$$$:   55-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   55-block  6
    #####:   56:        }
    $$$$$:   56-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   56-block  1
    $$$$$:   56-block  2
    #####:   57:    }
    $$$$$:   57-block  0
    $$$$$:   57-block  1
    $$$$$:   57-block  2
    $$$$$:   57-block  3
    $$$$$:   57-block  4
    $$$$$:   57-block  5
    $$$$$:   57-block  6
    $$$$$:   57-block  7
        -:   58:
        -:   59:
function _ZN8drug_lib6common8database10PqxxClientC2ERKNS1_17PqxxConnectParamsE called 20 returned 100% blocks executed 11%
       40:   60:    PqxxClient::PqxxClient(const PqxxConnectParams& pr)
        -:   61:        : in_transaction_(false)
       20:   62:    {
        -:   63:        try
        -:   64:        {
       20:   65:            this->conn_ = std::make_shared<pqxx::connection>(pr.make_connect_string());
       20:   65-block  0
branch  0 taken 20
branch  1 taken 0
       20:   65-block  1
branch  2 taken 20
branch  3 taken 0
    $$$$$:   65-block  2
       20:   66:            if (!this->conn_->is_open())
       20:   66-block  0
branch  0 taken 20
branch  1 taken 0
        -:   67:            {
    #####:   68:                throw ConnectionException("Failed to open database connection.",
    $$$$$:   68-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   68-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   68-block  2
    $$$$$:   68-block  3
    $$$$$:   68-block  4
    $$$$$:   68-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   68-block  6
    $$$$$:   68-block  7
        -:   69:                                          db_err::CONNECTION_FAILED);
        -:   70:            }
       20:   71:            _oid_preprocess();
       20:   71-block  0
branch  0 taken 20
branch  1 taken 0
       20:   72:        }
    $$$$$:   72-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   72-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   72-block  2
branch  4 never executed
branch  5 never executed
       20:   72-block  3
        -:   73:        catch (const pqxx::too_many_connections& e)
        -:   74:        {
    #####:   75:            throw ConnectionException(e.what(), db_err::CONNECTION_POOL_EXHAUSTED);
    $$$$$:   75-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   75-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   75-block  2
    $$$$$:   75-block  3
    $$$$$:   75-block  4
    $$$$$:   75-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   75-block  6
    #####:   76:        }
    $$$$$:   76-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   76-block  1
        -:   77:        catch (const pqxx::sql_error& e)
        -:   78:        {
    #####:   79:            throw ConnectionException(e.what(), db_err::INVALID_QUERY);
    $$$$$:   79-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   79-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   79-block  2
    $$$$$:   79-block  3
    $$$$$:   79-block  4
    $$$$$:   79-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   79-block  6
    #####:   80:        }
    $$$$$:   80-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   80-block  1
        -:   81:
        -:   82:        catch (const std::exception& e)
        -:   83:        {
    #####:   84:            throw ConnectionException(e.what(), db_err::PERMISSION_DENIED);
    $$$$$:   84-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   84-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   84-block  2
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:   84-block  6
    #####:   85:        }
    $$$$$:   85-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   85-block  1
    $$$$$:   85-block  2
    #####:   86:    }
    $$$$$:   86-block  0
    $$$$$:   86-block  1
    $$$$$:   86-block  2
    $$$$$:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
    $$$$$:   86-block  6
        -:   87:
        -:   88:    // Utility method to check if an identifier is valid
function _ZN8drug_lib6common8database10PqxxClient19is_valid_identifierESt17basic_string_viewIcSt11char_traitsIcEE called 402959 returned 100% blocks executed 71%
   402959:   89:    bool PqxxClient::is_valid_identifier(const std::string_view identifier)
        -:   90:    {
   402959:   91:        static const std::regex valid_identifier_regex("^[a-zA-Z_][a-zA-Z0-9_]*$");
   402959:   91-block  0
branch  0 taken 1
branch  1 taken 402958
        1:   91-block  1
branch  2 taken 0
branch  3 taken 1
        1:   91-block  2
branch  4 taken 1
branch  5 taken 0
        1:   91-block  3
    $$$$$:   91-block  4
    $$$$$:   91-block  5
   402959:   92:        return std::regex_match(identifier.begin(), identifier.end(), valid_identifier_regex);
   402959:   92-block  0
    #####:   93:    }
        -:   94:
        -:   95:    // Utility method to escape identifiers
function _ZNK8drug_lib6common8database10PqxxClient17escape_identifierB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEE called 402954 returned 100% blocks executed 23%
   402954:   96:    std::string PqxxClient::escape_identifier(const std::string_view identifier) const
        -:   97:    {
   402954:   98:        if (!is_valid_identifier(identifier))
   402954:   98-block  0
branch  0 taken 402954
branch  1 taken 0
        -:   99:        {
    #####:  100:            throw InvalidIdentifierException(std::string(identifier), db_err::INVALID_QUERY);
    $$$$$:  100-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  100-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  100-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  100-block  3
    $$$$$:  100-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  100-block  5
    $$$$$:  100-block  6
    $$$$$:  100-block  7
        -:  101:        }
   402954:  102:        return this->conn_->quote_name(std::string(identifier));
   402954:  102-block  0
branch  0 taken 402954
branch  1 taken 0
   402954:  102-block  1
branch  2 taken 402954
branch  3 taken 0
   402954:  102-block  2
    $$$$$:  102-block  3
    $$$$$:  102-block  4
    #####:  103:    }
    $$$$$:  103-block  0
    $$$$$:  103-block  1
        -:  104:
        -:  105:    // Static create postgreSQL Database
function _ZN8drug_lib6common8database10PqxxClient15create_databaseESt17basic_string_viewIcSt11char_traitsIcEEjS6_S6_S6_ called 0 returned 0% blocks executed 0%
    #####:  106:    void PqxxClient::create_database(const std::string_view host, const uint32_t port, const std::string_view db_name,
        -:  107:                                     const std::string_view login,
        -:  108:                                     const std::string_view password)
        -:  109:    // Build the connection string to connect to the 'template1' database
        -:  110:    {
    #####:  111:        std::ostringstream conn_str;
    #####:  112:        conn_str << "host=" << host
    $$$$$:  112-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  112-block  1
branch  2 never executed
branch  3 never executed
    #####:  113:            << " port=" << port
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  113-block  1
branch  2 never executed
branch  3 never executed
    #####:  114:            << " user=" << login
    $$$$$:  114-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  114-block  1
branch  2 never executed
branch  3 never executed
    #####:  115:            << " password=" << password
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
branch  2 never executed
branch  3 never executed
    #####:  116:            << " dbname=template1"; // Connect to 'template1' to create a new database
    $$$$$:  116-block  0
branch  0 never executed
branch  1 never executed
        -:  117:
        -:  118:        try
        -:  119:        {
        -:  120:            // Establish connection to the 'template1' database
        -:  121:
    #####:  122:            if (pqxx::connection trivial(conn_str.str()); trivial.is_open())
    $$$$$:  122-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  122-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  122-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  122-block  3
    $$$$$:  122-block  4
        -:  123:            {
        -:  124:                // Start a non-transactional query to create the database
    #####:  125:                pqxx::nontransaction db_creating(trivial);
    $$$$$:  125-block  0
branch  0 never executed
branch  1 never executed
        -:  126:
        -:  127:                // Prepare the SQL query
    #####:  128:                std::ostringstream query;
    $$$$$:  128-block  0
branch  0 never executed
branch  1 never executed
    #####:  129:                query << "CREATE DATABASE " << db_name
    $$$$$:  129-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  129-block  1
branch  2 never executed
branch  3 never executed
    #####:  130:                    << " WITH OWNER = " << login << " "
    $$$$$:  130-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  130-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  130-block  2
branch  4 never executed
branch  5 never executed
    #####:  131:                    << "ENCODING = 'UTF8' "
    $$$$$:  131-block  0
branch  0 never executed
branch  1 never executed
    #####:  132:                    << "TEMPLATE template0;"; // Use template0 for a clean database
    $$$$$:  132-block  0
branch  0 never executed
branch  1 never executed
        -:  133:
        -:  134:                // Execute the query
    #####:  135:                db_creating.exec(query.str());
    $$$$$:  135-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  135-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  135-block  2
    #####:  136:                db_creating.commit();
    $$$$$:  136-block  0
branch  0 never executed
branch  1 never executed
        -:  137:
    #####:  138:                std::cout << "Database " << db_name << " created successfully!" << std::endl;
    $$$$$:  138-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  138-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  138-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  138-block  3
branch  6 never executed
branch  7 never executed
    #####:  139:            }
    $$$$$:  139-block  0
    $$$$$:  139-block  1
    $$$$$:  139-block  2
        -:  140:            else
        -:  141:            {
    #####:  142:                std::cerr << "Connection to the database failed." << std::endl;
    $$$$$:  142-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  142-block  1
branch  2 never executed
branch  3 never executed
        -:  143:            }
    #####:  144:        }
    $$$$$:  144-block  0
    $$$$$:  144-block  1
branch  0 never executed
branch  1 never executed
        -:  145:        catch (const std::exception& e)
        -:  146:        {
    #####:  147:            std::cerr << "Error creating database: " << e.what() << std::endl;
    $$$$$:  147-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  147-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  147-block  2
branch  4 never executed
branch  5 never executed
    #####:  148:            throw; // Rethrow the exception if needed
    $$$$$:  148-block  0
branch  0 never executed
branch  1 never executed
    #####:  149:        }
    $$$$$:  149-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  149-block  1
    $$$$$:  149-block  2
    #####:  150:    }
    $$$$$:  150-block  0
    $$$$$:  150-block  1
    $$$$$:  150-block  2
    $$$$$:  150-block  3
    $$$$$:  150-block  4
    $$$$$:  150-block  5
    $$$$$:  150-block  6
    $$$$$:  150-block  7
        -:  151:
        -:  152:
function _ZN8drug_lib6common8database10PqxxClient15create_databaseERKNS1_17PqxxConnectParamsE called 0 returned 0% blocks executed 0%
    #####:  153:    void PqxxClient::create_database(const PqxxConnectParams& pr)
        -:  154:    {
    #####:  155:        create_database(pr.get_host(), pr.get_port(), pr.get_login(), pr.get_password(), pr.get_db_name());
    #####:  156:    }
    $$$$$:  156-block  0
        -:  157:
        -:  158:    //
function _ZN8drug_lib6common8database10PqxxClient12drop_connectEv called 0 returned 0% blocks executed 0%
    #####:  159:    void PqxxClient::drop_connect()
        -:  160:    {
    #####:  161:        std::lock_guard lock(this->conn_mutex_);
    #####:  162:        this->conn_->close();
    $$$$$:  162-block  0
branch  0 never executed
branch  1 never executed
    #####:  163:    }
    $$$$$:  163-block  0
    $$$$$:  163-block  1
    $$$$$:  163-block  2
        -:  164:
        -:  165:
function _ZNK8drug_lib6common8database10PqxxClient22initialize_transactionEv called 102652 returned 100% blocks executed 26%
   102652:  166:    std::unique_ptr<pqxx::work> PqxxClient::initialize_transaction() const
        -:  167:    {
   102652:  168:        if (this->in_transaction_)
   102652:  168-block  0
branch  0 taken 102443
branch  1 taken 209
        -:  169:        {
   102443:  170:            return std::move(this->open_transaction_);
   102443:  170-block  0
        -:  171:        }
        -:  172:
        -:  173:        try
        -:  174:        {
      209:  175:            auto one_query_transaction = std::make_unique<pqxx::work>(*this->conn_);
      209:  175-block  0
branch  0 taken 209
branch  1 taken 0
      209:  176:            return one_query_transaction;
      209:  177:        }
      209:  177-block  0
branch  0 taken 209
branch  1 taken 0
    $$$$$:  177-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  177-block  2
    $$$$$:  177-block  3
        -:  178:        catch (std::exception& e)
        -:  179:        {
    #####:  180:            throw TransactionException(std::string(e.what()).append("UNEXPECTED WORK THROWS ERROR"),
    $$$$$:  180-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  180-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  180-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  180-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  180-block  4
    $$$$$:  180-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:  180-block  6
        -:  181:                                       db_err::TRANSACTION_START_FAILED);
    #####:  182:        }
    $$$$$:  182-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  182-block  1
    $$$$$:  182-block  2
    $$$$$:  182-block  3
   102652:  183:    }
    $$$$$:  183-block  0
    $$$$$:  183-block  1
   102652:  183-block  2
        -:  184:
function _ZNK8drug_lib6common8database10PqxxClient18finish_transactionEOSt10unique_ptrIN4pqxx11transactionILNS4_15isolation_levelE0ELNS4_12write_policyE1EEESt14default_deleteIS8_EE called 102652 returned 100% blocks executed 25%
   102652:  185:    void PqxxClient::finish_transaction(std::unique_ptr<pqxx::work>&& current_transaction) const
        -:  186:    {
   102652:  187:        if (this->in_transaction_)
   102652:  187-block  0
branch  0 taken 102443
branch  1 taken 209
        -:  188:        {
   102443:  189:            this->open_transaction_ = std::move(current_transaction);
   102443:  190:            return;
   102443:  190-block  0
        -:  191:        }
        -:  192:        try
        -:  193:        {
      209:  194:            current_transaction->commit();
      209:  194-block  0
branch  0 taken 209
branch  1 taken 0
      209:  195:            current_transaction.reset();
      209:  196:        }
      209:  196-block  0
    $$$$$:  196-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  196-block  2
        -:  197:        catch (std::exception& e)
        -:  198:        {
    #####:  199:            throw TransactionException(std::string(e.what()).append("UNEXPECTED WORK THROWS ERROR"),
    $$$$$:  199-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  199-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  199-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  199-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  199-block  4
    $$$$$:  199-block  5
branch  8 never executed
branch  9 never executed
    $$$$$:  199-block  6
        -:  200:                                       db_err::TRANSACTION_START_FAILED);
    #####:  201:        }
    $$$$$:  201-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  201-block  1
    $$$$$:  201-block  2
   102652:  202:    }
    $$$$$:  202-block  0
    $$$$$:  202-block  1
   102652:  202-block  2
        -:  203:
function _ZN8drug_lib6common8database10PqxxClient15adapt_exceptionERKSt9exception called 0 returned 0% blocks executed 0%
    #####:  204:    DatabaseException PqxxClient::adapt_exception(const std::exception& pqxxerr)
        -:  205:    {
    #####:  206:        if (const auto* deadlock_error = dynamic_cast<const pqxx::deadlock_detected*>(&pqxxerr))
    $$$$$:  206-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  206-block  1
    $$$$$:  206-block  2
    $$$$$:  206-block  3
branch  2 never executed
branch  3 never executed
        -:  207:        {
    #####:  208:            return DatabaseException(deadlock_error->what(), db_err::DEADLOCK_DETECTED);
    $$$$$:  208-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  208-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  208-block  2
    $$$$$:  208-block  3
    $$$$$:  208-block  4
    $$$$$:  208-block  5
        -:  209:        }
        -:  210:
    #####:  211:        if (const auto* rollback_error = dynamic_cast<const pqxx::transaction_rollback*>(&pqxxerr))
    $$$$$:  211-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  211-block  1
    $$$$$:  211-block  2
    $$$$$:  211-block  3
branch  2 never executed
branch  3 never executed
        -:  212:        {
    #####:  213:            return DatabaseException(rollback_error->what(), db_err::SYSTEM_ROLLBACK);
    $$$$$:  213-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  213-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  213-block  2
    $$$$$:  213-block  3
    $$$$$:  213-block  4
        -:  214:        }
        -:  215:
    #####:  216:        if (const auto* syntax_error = dynamic_cast<const pqxx::syntax_error*>(&pqxxerr))
    $$$$$:  216-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  216-block  1
    $$$$$:  216-block  2
    $$$$$:  216-block  3
branch  2 never executed
branch  3 never executed
        -:  217:        {
    #####:  218:            return DatabaseException(syntax_error->what(), db_err::INVALID_QUERY);
    $$$$$:  218-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  218-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  218-block  2
    $$$$$:  218-block  3
    $$$$$:  218-block  4
        -:  219:        }
        -:  220:
    #####:  221:        if (const auto* data_error = dynamic_cast<const pqxx::data_exception*>(&pqxxerr))
    $$$$$:  221-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  221-block  1
    $$$$$:  221-block  2
    $$$$$:  221-block  3
branch  2 never executed
branch  3 never executed
        -:  222:        {
    #####:  223:            return DatabaseException(data_error->what(), db_err::INVALID_DATA);
    $$$$$:  223-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  223-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  223-block  2
    $$$$$:  223-block  3
    $$$$$:  223-block  4
        -:  224:        }
        -:  225:
    #####:  226:        if (const auto* sql_error = dynamic_cast<const pqxx::sql_error*>(&pqxxerr))
    $$$$$:  226-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  226-block  1
    $$$$$:  226-block  2
    $$$$$:  226-block  3
branch  2 never executed
branch  3 never executed
        -:  227:        {
    #####:  228:            return DatabaseException(sql_error->what(), db_err::QUERY_EXECUTION_FAILED);
    $$$$$:  228-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  228-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  228-block  2
    $$$$$:  228-block  3
    $$$$$:  228-block  4
        -:  229:        }
        -:  230:
        -:  231:        // If none of the specific exceptions match, return a generic exception
    #####:  232:        return DatabaseException(pqxxerr.what(), db_err::UNKNOWN_ERROR);
    $$$$$:  232-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  232-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  232-block  2
    $$$$$:  232-block  3
    $$$$$:  232-block  4
    #####:  233:    }
    $$$$$:  233-block  0
    $$$$$:  233-block  1
    $$$$$:  233-block  2
    $$$$$:  233-block  3
    $$$$$:  233-block  4
    $$$$$:  233-block  5
    $$$$$:  233-block  6
        -:  234:
function _ZNKR8drug_lib6common8database10PqxxClient38build_conflict_clause_for_force_insertERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt17basic_string_viewIcS6_ERKSt6vectorISt10shared_ptrINS1_9FieldBaseEESaISF_EE called 2 returned 100% blocks executed 56%
        2:  235:    void PqxxClient::build_conflict_clause_for_force_insert(std::string& query,
        -:  236:                                                            const std::string_view table_name,
        -:  237:                                                            const std::vector<std::shared_ptr<FieldBase>>&
        -:  238:                                                            replace_fields) const &
        -:  239:    {
        2:  240:        query.pop_back();
        -:  241:        // Build ON CONFLICT clause
        2:  242:        std::ostringstream conflict_stream;
        2:  243:        std::vector<std::shared_ptr<FieldBase>> conflict_fields;
        -:  244:        {
        2:  245:            std::lock_guard lock(this->conn_mutex_);
        2:  245-block  0
branch  0 taken 2
branch  1 taken 0
        -:  246:            try
        -:  247:            {
        2:  248:                conflict_fields = this->conflict_fields_.at(table_name.data());
        2:  248-block  0
branch  0 taken 2
branch  1 taken 0
        2:  248-block  1
branch  2 taken 2
branch  3 taken 0
        2:  248-block  2
branch  4 taken 2
branch  5 taken 0
    $$$$$:  248-block  3
    $$$$$:  248-block  4
        2:  249:            }
        2:  249-block  0
    $$$$$:  249-block  1
branch  0 never executed
branch  1 never executed
        -:  250:            catch (std::out_of_range&)
        -:  251:            {
    #####:  252:                throw QueryException(
    $$$$$:  252-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  252-block  2
    $$$$$:  252-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  252-block  4
    #####:  253:                    "For this table upsert clause is not set up. Or invalid table name credentials",
    $$$$$:  253-block  0
branch  0 never executed
branch  1 never executed
        -:  254:                    db_err::INVALID_DATA);
    #####:  255:            }
    $$$$$:  255-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  255-block  1
    $$$$$:  255-block  2
        2:  256:        }
    $$$$$:  256-block  0
        2:  257:        conflict_stream << " ON CONFLICT (";
        2:  257-block  0
branch  0 taken 2
branch  1 taken 0
        4:  258:        for (const auto& field : conflict_fields)
        2:  258-block  0
        4:  258-block  1
branch  0 taken 2
branch  1 taken 2
        2:  258-block  2
        2:  258-block  3
        -:  259:        {
        2:  260:            conflict_stream << escape_identifier(field->get_name()) << ", ";
        2:  260-block  0
branch  0 taken 2
branch  1 taken 0
        2:  260-block  1
branch  2 taken 2
branch  3 taken 0
        2:  260-block  2
branch  4 taken 2
branch  5 taken 0
        2:  260-block  3
branch  6 taken 2
branch  7 taken 0
    $$$$$:  260-block  4
        -:  261:        }
        2:  262:        std::string conflict_clause = conflict_stream.str();
        2:  262-block  0
branch  0 taken 2
branch  1 taken 0
        2:  263:        conflict_clause.erase(conflict_clause.size() - 2); // Remove last comma and space
        2:  263-block  0
branch  0 taken 2
branch  1 taken 0
        2:  264:        conflict_clause += ") DO UPDATE SET ";
        2:  264-block  0
branch  0 taken 2
branch  1 taken 0
        -:  265:
        -:  266:        // Build SET clause
        4:  267:        for (const auto& field : replace_fields)
        2:  267-block  0
        4:  267-block  1
branch  0 taken 2
branch  1 taken 2
        2:  267-block  2
        2:  267-block  3
        -:  268:        {
        2:  269:            std::string name = escape_identifier(field->get_name());
        2:  269-block  0
branch  0 taken 2
branch  1 taken 0
        2:  269-block  1
branch  2 taken 2
branch  3 taken 0
        2:  270:            conflict_clause.append(name).append(" = EXCLUDED.").append(name).append(", ");
        2:  270-block  0
branch  0 taken 2
branch  1 taken 0
        2:  270-block  1
branch  2 taken 2
branch  3 taken 0
        2:  270-block  2
branch  4 taken 2
branch  5 taken 0
        2:  270-block  3
branch  6 taken 2
branch  7 taken 0
        2:  271:        }
    $$$$$:  271-block  0
        2:  272:        conflict_clause.erase(conflict_clause.size() - 2); // Remove last comma and space
        2:  272-block  0
branch  0 taken 2
branch  1 taken 0
        -:  273:
        2:  274:        query += conflict_clause + ";";
        2:  274-block  0
branch  0 taken 2
branch  1 taken 0
        2:  274-block  1
branch  2 taken 2
branch  3 taken 0
    $$$$$:  274-block  2
        2:  275:    }
    $$$$$:  275-block  0
    $$$$$:  275-block  1
    $$$$$:  275-block  2
    $$$$$:  275-block  3
        2:  275-block  4
    $$$$$:  275-block  5
    $$$$$:  275-block  6
    $$$$$:  275-block  7
        -:  276:
function _ZNK8drug_lib6common8database10PqxxClient19conditions_to_queryESt17basic_string_viewIcSt11char_traitsIcEERNSt7__cxx1119basic_ostringstreamIcS5_SaIcEEERN4pqxx6paramsERjRKNS1_10ConditionsE called 15 returned 100% blocks executed 62%
       15:  277:    void PqxxClient::conditions_to_query(const std::string_view table_name, std::ostringstream& query_stream,
        -:  278:                                         pqxx::params& params,
        -:  279:                                         uint32_t& param_index, const Conditions& conditions) const
        -:  280:    {
        -:  281:        // lambdas
function _ZZNK8drug_lib6common8database10PqxxClient19conditions_to_queryESt17basic_string_viewIcSt11char_traitsIcEERNSt7__cxx1119basic_ostringstreamIcS5_SaIcEEERN4pqxx6paramsERjRKNS1_10ConditionsEENK3$_1clB5cxx11ERKSt6vectorINS1_14FieldConditionESaISL_EE called 15 returned 100% blocks executed 72%
       30:  282:        auto process_fields_clause = [&](const std::vector<FieldCondition>& fields_clause)
        -:  283:        {
       15:  284:            std::optional<std::string> query_;
       15:  285:            if (fields_clause.empty()) return query_;
       15:  285-block  0
branch  0 taken 11
branch  1 taken 4
       11:  285-block  1
        4:  286:            std::ostringstream local_stream;
        4:  286-block  0
branch  0 taken 4
branch  1 taken 0
       10:  287:            for (const auto& condition : fields_clause)
        4:  287-block  0
       10:  287-block  1
branch  0 taken 4
branch  1 taken 6
        6:  287-block  2
        6:  287-block  3
        -:  288:            {
        6:  289:                std::string field_name = escape_identifier(condition.field()->get_name());
        6:  289-block  0
branch  0 taken 6
branch  1 taken 0
        6:  289-block  1
branch  2 taken 6
branch  3 taken 0
        6:  289-block  2
branch  4 taken 6
branch  5 taken 0
        6:  290:                local_stream << field_name << " " << condition.op() << " $" << param_index++ << " AND ";
        6:  290-block  0
branch  0 taken 6
branch  1 taken 0
        6:  290-block  1
branch  2 taken 6
branch  3 taken 0
        6:  290-block  2
branch  4 taken 6
branch  5 taken 0
        6:  290-block  3
branch  6 taken 6
branch  7 taken 0
        6:  290-block  4
branch  8 taken 6
branch  9 taken 0
        6:  290-block  5
branch 10 taken 6
branch 11 taken 0
        6:  290-block  6
branch 12 taken 6
branch 13 taken 0
        6:  291:                params.append(condition.value()->to_string());
        6:  291-block  0
branch  0 taken 6
branch  1 taken 0
        6:  291-block  1
branch  2 taken 6
branch  3 taken 0
        6:  291-block  2
branch  4 taken 0
branch  5 taken 6
    $$$$$:  291-block  3
        6:  292:            }
    $$$$$:  292-block  0
        4:  293:            query_ = local_stream.str();
        4:  293-block  0
branch  0 taken 4
branch  1 taken 0
        4:  294:            return query_;
       15:  295:        };
    $$$$$:  295-block  0
    $$$$$:  295-block  1
    $$$$$:  295-block  2
        4:  295-block  3
    $$$$$:  295-block  4
       15:  295-block  5
branch  0 taken 15
branch  1 taken 0
    $$$$$:  295-block  6
       15:  295-block  7
    $$$$$:  295-block  8
    $$$$$:  295-block  9
        -:  296:
function _ZZNK8drug_lib6common8database10PqxxClient19conditions_to_queryESt17basic_string_viewIcSt11char_traitsIcEERNSt7__cxx1119basic_ostringstreamIcS5_SaIcEEERN4pqxx6paramsERjRKNS1_10ConditionsEENK3$_0clB5cxx11ERKSt6vectorINS1_16PatternConditionESaISL_EE called 15 returned 100% blocks executed 57%
       30:  297:        auto process_patterns_clause = [&](const std::vector<PatternCondition>& patterns_clause)
        -:  298:        {
       15:  299:            std::optional<std::string> query_;
       15:  300:            if (patterns_clause.empty())
       15:  300-block  0
branch  0 taken 9
branch  1 taken 6
        -:  301:            {
        9:  302:                return query_;
        9:  302-block  0
        -:  303:            }
        6:  304:            std::ostringstream local_stream;
        6:  304-block  0
branch  0 taken 6
branch  1 taken 0
        6:  305:            std::ostringstream fts_fields_stream;
        6:  305-block  0
branch  0 taken 6
branch  1 taken 0
        6:  306:            std::vector<std::shared_ptr<FieldBase>> fts_fields;
        -:  307:            {
        6:  308:                std::lock_guard lock(this->conn_mutex_);
        6:  308-block  0
branch  0 taken 6
branch  1 taken 0
        -:  309:                try
        -:  310:                {
        6:  311:                    fts_fields = this->fts_fields_.at(table_name.data());
        6:  311-block  0
branch  0 taken 6
branch  1 taken 0
        6:  311-block  1
branch  2 taken 6
branch  3 taken 0
        6:  311-block  2
branch  4 taken 6
branch  5 taken 0
    $$$$$:  311-block  3
    $$$$$:  311-block  4
        6:  312:                }
        6:  312-block  0
    $$$$$:  312-block  1
branch  0 never executed
branch  1 never executed
        -:  313:                catch (std::out_of_range&)
        -:  314:                {
    #####:  315:                    throw QueryException(
    $$$$$:  315-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  315-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  315-block  2
    $$$$$:  315-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  315-block  4
    #####:  316:                        "For this table fts index is not set up or disabled. Or invalid table name credentials",
    $$$$$:  316-block  0
branch  0 never executed
branch  1 never executed
        -:  317:                        db_err::INVALID_DATA);
    #####:  318:                }
    $$$$$:  318-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  318-block  1
    $$$$$:  318-block  2
        6:  319:            }
    $$$$$:  319-block  0
       18:  320:            for (const auto& field : fts_fields)
        6:  320-block  0
       18:  320-block  1
branch  0 taken 6
branch  1 taken 12
       12:  320-block  2
       12:  320-block  3
        -:  321:            {
       12:  322:                fts_fields_stream << "coalesce(" << field->get_name() << "::text, '') || ' ' || ";
       12:  322-block  0
branch  0 taken 12
branch  1 taken 0
       12:  322-block  1
branch  2 taken 12
branch  3 taken 0
       12:  322-block  2
branch  4 taken 12
branch  5 taken 0
       12:  322-block  3
branch  6 taken 12
branch  7 taken 0
        -:  323:            }
        6:  324:            std::string fields_concatenated = fts_fields_stream.str();
        6:  324-block  0
branch  0 taken 6
branch  1 taken 0
        6:  325:            fields_concatenated.erase(fields_concatenated.size() - 11); // Remove last " || ' ' || "
        6:  325-block  0
branch  0 taken 6
branch  1 taken 0
        6:  326:            std::ostringstream tsquery_stream;
        6:  326-block  0
branch  0 taken 6
branch  1 taken 0
       12:  327:            for (const auto& pattern : patterns_clause)
        6:  327-block  0
       12:  327-block  1
branch  0 taken 6
branch  1 taken 6
        6:  327-block  2
        6:  327-block  3
        -:  328:            {
        6:  329:                tsquery_stream << pattern.get_pattern() << " & ";
        6:  329-block  0
branch  0 taken 6
branch  1 taken 0
        6:  329-block  1
branch  2 taken 6
branch  3 taken 0
        6:  329-block  2
branch  4 taken 6
branch  5 taken 0
        -:  330:            }
        6:  331:            std::string tsquery = tsquery_stream.str();
        6:  331-block  0
branch  0 taken 6
branch  1 taken 0
        6:  332:            tsquery.erase(tsquery.size() - 3); // Remove last " & "
        6:  332-block  0
branch  0 taken 6
branch  1 taken 0
        6:  333:            local_stream << "to_tsvector('simple', " << fields_concatenated << ") @@ to_tsquery('simple', $"
        6:  333-block  0
branch  0 taken 6
branch  1 taken 0
        6:  333-block  1
branch  2 taken 6
branch  3 taken 0
        6:  333-block  2
branch  4 taken 6
branch  5 taken 0
        6:  334:                << param_index++ << ");";
        6:  334-block  0
branch  0 taken 6
branch  1 taken 0
        6:  334-block  1
branch  2 taken 6
branch  3 taken 0
        6:  335:            params.append(tsquery);
        6:  335-block  0
branch  0 taken 6
branch  1 taken 0
        6:  336:            query_ = local_stream.str();
        6:  336-block  0
branch  0 taken 6
branch  1 taken 0
        6:  337:            return query_;
       15:  338:        };
    $$$$$:  338-block  0
    $$$$$:  338-block  1
    $$$$$:  338-block  2
    $$$$$:  338-block  3
    $$$$$:  338-block  4
    $$$$$:  338-block  5
    $$$$$:  338-block  6
        6:  338-block  7
    $$$$$:  338-block  8
    $$$$$:  338-block  9
    $$$$$:  338-block 10
    $$$$$:  338-block 11
    $$$$$:  338-block 12
       15:  338-block 13
branch  0 taken 15
branch  1 taken 0
    $$$$$:  338-block 14
       15:  338-block 15
    $$$$$:  338-block 16
    $$$$$:  338-block 17
function _ZZNK8drug_lib6common8database10PqxxClient19conditions_to_queryESt17basic_string_viewIcSt11char_traitsIcEERNSt7__cxx1119basic_ostringstreamIcS5_SaIcEEERN4pqxx6paramsERjRKNS1_10ConditionsEENK3$_2clB5cxx11ERKSt6vectorINS1_14OrderConditionESaISL_EE called 15 returned 100% blocks executed 76%
       30:  339:        auto process_order_by_clause = [&](const std::vector<OrderCondition>& order_by_clause)
        -:  340:        {
       15:  341:            std::ostringstream local_stream;
       15:  342:            if (order_by_clause.empty()) return local_stream.str();
       15:  342-block  0
branch  0 taken 14
branch  1 taken 1
       14:  342-block  1
branch  2 taken 14
branch  3 taken 0
       14:  342-block  2
        1:  343:            local_stream << "ORDER BY ";
        1:  343-block  0
branch  0 taken 1
branch  1 taken 0
        2:  344:            for (const auto& condition : order_by_clause)
        1:  344-block  0
        2:  344-block  1
branch  0 taken 1
branch  1 taken 1
        1:  344-block  2
        1:  344-block  3
        -:  345:            {
        1:  346:                local_stream << escape_identifier(condition.get_column()->get_name()) << " ";
        1:  346-block  0
branch  0 taken 1
branch  1 taken 0
        1:  346-block  1
branch  2 taken 1
branch  3 taken 0
        1:  346-block  2
branch  4 taken 1
branch  5 taken 0
        1:  346-block  3
branch  6 taken 1
branch  7 taken 0
        1:  346-block  4
branch  8 taken 1
branch  9 taken 0
    $$$$$:  346-block  5
        1:  347:                switch (condition.get_order())
        1:  347-block  0
branch  0 taken 1
branch  1 taken 0
        1:  347-block  1
branch  2 taken 1
branch  3 taken 0
branch  4 taken 0
        -:  348:                {
        -:  349:                case order_type::ascending:
        -:  350:                    {
        1:  351:                        local_stream << "ASC ";
        1:  351-block  0
branch  0 taken 1
branch  1 taken 0
        1:  352:                        break;
        1:  352-block  0
        -:  353:                    }
        -:  354:                case order_type::descending:
        -:  355:                    {
    #####:  356:                        local_stream << "DESC ";
    $$$$$:  356-block  0
branch  0 never executed
branch  1 never executed
    #####:  357:                        break;
    $$$$$:  357-block  0
        -:  358:                    }
        -:  359:                }
        -:  360:            }
        1:  361:            return local_stream.str();
        1:  361-block  0
branch  0 taken 1
branch  1 taken 0
        1:  361-block  1
       15:  362:        };
    $$$$$:  362-block  0
       15:  362-block  1
    $$$$$:  362-block  2
    $$$$$:  362-block  3
        -:  363:
function _ZZNK8drug_lib6common8database10PqxxClient19conditions_to_queryESt17basic_string_viewIcSt11char_traitsIcEERNSt7__cxx1119basic_ostringstreamIcS5_SaIcEEERN4pqxx6paramsERjRKNS1_10ConditionsEENK3$_3clB5cxx11ERKNS1_13PageConditionE called 4 returned 100% blocks executed 80%
        4:  364:        auto process_paging_clause = [&](const PageCondition& paging)
        -:  365:        {
        4:  366:            std::ostringstream local_stream;
        4:  367:            local_stream << "LIMIT " << paging.get_limit() << " OFFSET " << paging.get_offset();
        4:  367-block  0
branch  0 taken 4
branch  1 taken 0
        4:  367-block  1
branch  2 taken 4
branch  3 taken 0
        4:  367-block  2
branch  4 taken 4
branch  5 taken 0
        4:  367-block  3
branch  6 taken 4
branch  7 taken 0
        4:  367-block  4
branch  8 taken 4
branch  9 taken 0
        4:  367-block  5
branch 10 taken 4
branch 11 taken 0
        4:  368:            return local_stream.str();
        4:  368-block  0
branch  0 taken 4
branch  1 taken 0
        4:  369:        };
        4:  369-block  0
    $$$$$:  369-block  1
    $$$$$:  369-block  2
        -:  370:
       19:  371:        if (const std::optional<std::string> patterns_clause = process_patterns_clause(conditions.pattern_conditions()),
        4:  371-block  0
branch  0 taken 4
branch  1 taken 0
       15:  372:                                             fields_clause = process_fields_clause(conditions.fields_conditions());
       15:  372-block  0
branch  0 taken 15
branch  1 taken 0
       15:  372-block  1
branch  2 taken 15
branch  3 taken 0
       30:  373:            fields_clause.has_value() && patterns_clause.has_value())
       15:  373-block  0
branch  0 taken 4
branch  1 taken 11
    $$$$$:  373-block  1
    $$$$$:  373-block  2
    $$$$$:  373-block  3
        -:  374:        {
    #####:  375:            query_stream << " WHERE ";
    $$$$$:  375-block  0
branch  0 never executed
branch  1 never executed
    #####:  376:            query_stream << fields_clause.value() << " " << patterns_clause.value() << " ";
    $$$$$:  376-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  376-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  376-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  376-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  376-block  4
branch  8 never executed
branch  9 never executed
    $$$$$:  376-block  5
branch 10 never executed
branch 11 never executed
    #####:  377:        }
    $$$$$:  377-block  0
       15:  378:        else if (fields_clause.has_value() && !patterns_clause.has_value())
       15:  378-block  0
branch  0 taken 4
branch  1 taken 11
        4:  378-block  1
branch  2 taken 4
branch  3 taken 0
        -:  379:        {
        4:  380:            query_stream << " WHERE ";
        4:  380-block  0
branch  0 taken 4
branch  1 taken 0
        4:  381:            std::string fields_clause_val = fields_clause.value();
        4:  381-block  0
branch  0 taken 4
branch  1 taken 0
        4:  381-block  1
branch  2 taken 4
branch  3 taken 0
        4:  382:            fields_clause_val.erase(fields_clause_val.size() - 5);
        4:  382-block  0
branch  0 taken 4
branch  1 taken 0
        4:  383:            query_stream << fields_clause_val;
        4:  383-block  0
branch  0 taken 4
branch  1 taken 0
        4:  384:        }
        4:  384-block  0
    $$$$$:  384-block  1
       11:  385:        else if (!fields_clause.has_value() && patterns_clause.has_value())
       11:  385-block  0
branch  0 taken 11
branch  1 taken 0
       11:  385-block  1
branch  2 taken 6
branch  3 taken 5
        -:  386:        {
        6:  387:            query_stream << " WHERE ";
        6:  387-block  0
branch  0 taken 6
branch  1 taken 0
        6:  388:            query_stream << patterns_clause.value() << " ";
        6:  388-block  0
branch  0 taken 6
branch  1 taken 0
        6:  388-block  1
branch  2 taken 6
branch  3 taken 0
        6:  388-block  2
branch  4 taken 6
branch  5 taken 0
        6:  389:        }
        6:  389-block  0
        -:  390:
       15:  391:        query_stream << process_order_by_clause(conditions.order_by_conditions()) << " ";
       15:  391-block  0
branch  0 taken 15
branch  1 taken 0
       15:  391-block  1
branch  2 taken 15
branch  3 taken 0
    $$$$$:  391-block  2
       15:  392:        if (conditions.page_condition().has_value())
       15:  392-block  0
branch  0 taken 11
branch  1 taken 4
        -:  393:        {
        4:  394:            query_stream << process_paging_clause(conditions.page_condition().value());
        4:  394-block  0
branch  0 taken 4
branch  1 taken 0
    $$$$$:  394-block  1
        4:  395:        }
        4:  395-block  0
       15:  396:        query_stream << ";";
       15:  397:    }
    $$$$$:  397-block  0
    $$$$$:  397-block  1
       15:  397-block  2
        -:  398:
        -:  399:    // Utility method to execute a query
function _ZNK8drug_lib6common8database10PqxxClient13execute_queryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4pqxx6paramsE called 100067 returned 100% blocks executed 27%
   100067:  400:    void PqxxClient::execute_query(const std::string& query_string, const pqxx::params& params) const
        -:  401:    {
   100067:  402:        std::lock_guard lock(this->conn_mutex_);
        -:  403:        try
        -:  404:        {
   100067:  405:            std::unique_ptr<pqxx::work> txn = initialize_transaction();
   100067:  405-block  0
branch  0 taken 100067
branch  1 taken 0
   100067:  406:            txn->exec_params(query_string, params);
   100067:  406-block  0
branch  0 taken 100067
branch  1 taken 0
   100067:  407:            finish_transaction(std::move(txn));
   100067:  407-block  0
branch  0 taken 100067
branch  1 taken 0
   100067:  408:        }
   100067:  408-block  0
    $$$$$:  408-block  1
    $$$$$:  408-block  2
branch  0 never executed
branch  1 never executed
        -:  409:        catch (const std::exception& e)
        -:  410:        {
    #####:  411:            throw adapt_exception(e);
    $$$$$:  411-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  411-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  411-block  2
    #####:  412:        }
    $$$$$:  412-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  412-block  1
    $$$$$:  412-block  2
   100067:  413:    }
    $$$$$:  413-block  0
    $$$$$:  413-block  1
   100067:  413-block  2
    $$$$$:  413-block  3
    $$$$$:  413-block  4
        -:  414:
        -:  415:
function _ZNK8drug_lib6common8database10PqxxClient13execute_queryERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 87 returned 100% blocks executed 27%
       87:  416:    void PqxxClient::execute_query(const std::string& query_string) const
        -:  417:    {
       87:  418:        std::lock_guard lock(this->conn_mutex_);
        -:  419:        try
        -:  420:        {
       87:  421:            std::unique_ptr<pqxx::work> txn = initialize_transaction();
       87:  421-block  0
branch  0 taken 87
branch  1 taken 0
       87:  422:            txn->exec(query_string);
       87:  422-block  0
branch  0 taken 87
branch  1 taken 0
       87:  423:            finish_transaction(std::move(txn));
       87:  423-block  0
branch  0 taken 87
branch  1 taken 0
       87:  424:        }
       87:  424-block  0
    $$$$$:  424-block  1
    $$$$$:  424-block  2
branch  0 never executed
branch  1 never executed
        -:  425:        catch (const std::exception& e)
        -:  426:        {
    #####:  427:            throw adapt_exception(e);
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  427-block  2
    #####:  428:        }
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
    $$$$$:  428-block  2
       87:  429:    }
    $$$$$:  429-block  0
    $$$$$:  429-block  1
       87:  429-block  2
    $$$$$:  429-block  3
    $$$$$:  429-block  4
        -:  430:
function _ZNK8drug_lib6common8database10PqxxClient25execute_query_with_resultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4pqxx6paramsE called 14 returned 100% blocks executed 22%
       14:  431:    pqxx::result PqxxClient::execute_query_with_result(const std::string& query_string,
        -:  432:                                                       const pqxx::params& params) const
        -:  433:    {
       14:  434:        std::lock_guard lock(this->conn_mutex_);
        -:  435:        try
        -:  436:        {
       14:  437:            std::unique_ptr<pqxx::work> txn = initialize_transaction();
       14:  437-block  0
branch  0 taken 14
branch  1 taken 0
       14:  438:            const pqxx::result response = txn->exec_params(query_string, params);
       14:  438-block  0
branch  0 taken 14
branch  1 taken 0
       14:  439:            finish_transaction(std::move(txn));
       14:  439-block  0
branch  0 taken 14
branch  1 taken 0
       14:  440:            return response;
       14:  441:        }
       14:  441-block  0
branch  0 taken 14
branch  1 taken 0
    $$$$$:  441-block  1
    $$$$$:  441-block  2
    $$$$$:  441-block  3
    $$$$$:  441-block  4
branch  2 never executed
branch  3 never executed
        -:  442:        catch (const std::exception& e)
        -:  443:        {
    #####:  444:            throw adapt_exception(e);
    $$$$$:  444-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  444-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  444-block  2
    #####:  445:        }
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    $$$$$:  445-block  2
    $$$$$:  445-block  3
       14:  446:    }
    $$$$$:  446-block  0
    $$$$$:  446-block  1
       14:  446-block  2
    $$$$$:  446-block  3
    $$$$$:  446-block  4
    $$$$$:  446-block  5
        -:  447:
function _ZNK8drug_lib6common8database10PqxxClient25execute_query_with_resultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2484 returned 100% blocks executed 22%
     2484:  448:    pqxx::result PqxxClient::execute_query_with_result(const std::string& query_string) const
        -:  449:    {
     2484:  450:        std::lock_guard lock(this->conn_mutex_);
        -:  451:        try
        -:  452:        {
     2484:  453:            std::unique_ptr<pqxx::work> txn = initialize_transaction();
     2484:  453-block  0
branch  0 taken 2484
branch  1 taken 0
     2484:  454:            const pqxx::result response = txn->exec(query_string);
     2484:  454-block  0
branch  0 taken 2484
branch  1 taken 0
     2484:  455:            finish_transaction(std::move(txn));
     2484:  455-block  0
branch  0 taken 2484
branch  1 taken 0
     2484:  456:            return response;
     2484:  457:        }
     2484:  457-block  0
branch  0 taken 2484
branch  1 taken 0
    $$$$$:  457-block  1
    $$$$$:  457-block  2
    $$$$$:  457-block  3
    $$$$$:  457-block  4
branch  2 never executed
branch  3 never executed
        -:  458:        catch (const std::exception& e)
        -:  459:        {
    #####:  460:            throw adapt_exception(e);
    $$$$$:  460-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  460-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  460-block  2
    #####:  461:        }
    $$$$$:  461-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  461-block  1
    $$$$$:  461-block  2
    $$$$$:  461-block  3
     2484:  462:    }
    $$$$$:  462-block  0
    $$$$$:  462-block  1
     2484:  462-block  2
    $$$$$:  462-block  3
    $$$$$:  462-block  4
    $$$$$:  462-block  5
        -:  463:
function _ZN8drug_lib6common8database10PqxxClient15_oid_preprocessEv called 20 returned 100% blocks executed 42%
       20:  464:    void PqxxClient::_oid_preprocess()
        -:  465:    {
        -:  466:        try
        -:  467:        {
       20:  468:            std::lock_guard lock(this->conn_mutex_);
       20:  468-block  0
branch  0 taken 20
branch  1 taken 0
       20:  469:            pqxx::nontransaction txn(*this->conn_);
       20:  469-block  0
branch  0 taken 20
branch  1 taken 0
       20:  470:            const pqxx::result r = txn.exec(
       20:  470-block  0
branch  0 taken 20
branch  1 taken 0
       20:  471:                "SELECT typname, oid FROM pg_type WHERE typname IN ('bool', 'int2', 'int4', 'int8', 'float4', 'float8', 'text', 'varchar', 'bpchar', 'timestamp', 'timestamptz')");
      240:  472:            for (const auto& row : r)
       20:  472-block  0
      240:  472-block  1
branch  0 taken 240
branch  1 taken 0
      240:  472-block  2
branch  2 taken 220
branch  3 taken 20
       20:  472-block  3
      220:  472-block  4
branch  4 taken 220
branch  5 taken 0
      220:  472-block  5
      220:  472-block  6
branch  6 taken 220
branch  7 taken 0
      220:  472-block  7
        -:  473:            {
      220:  474:                this->type_oids_.insert({row["oid"].as<uint32_t>(), row["typname"].c_str()});
      220:  474-block  0
branch  0 taken 0
branch  1 taken 220
      220:  474-block  1
branch  2 taken 220
branch  3 taken 0
      220:  474-block  2
branch  4 taken 220
branch  5 taken 0
      220:  474-block  3
branch  6 taken 0
branch  7 taken 220
      220:  474-block  4
branch  8 taken 220
branch  9 taken 0
    $$$$$:  474-block  5
    $$$$$:  474-block  6
    $$$$$:  474-block  7
      220:  475:            }
    $$$$$:  475-block  0
       20:  476:        }
    $$$$$:  476-block  0
       20:  476-block  1
    $$$$$:  476-block  2
    $$$$$:  476-block  3
    $$$$$:  476-block  4
branch  0 never executed
branch  1 never executed
    $$$$$:  476-block  5
        -:  477:        catch (const std::exception& e)
        -:  478:        {
    #####:  479:            throw adapt_exception(e);
    $$$$$:  479-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  479-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  479-block  2
    #####:  480:        }
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  480-block  1
    $$$$$:  480-block  2
       20:  481:    }
    $$$$$:  481-block  0
    $$$$$:  481-block  1
    $$$$$:  481-block  2
    $$$$$:  481-block  3
    $$$$$:  481-block  4
    $$$$$:  481-block  5
    $$$$$:  481-block  6
    $$$$$:  481-block  7
       20:  481-block  8
        -:  482:
function _ZNK8drug_lib6common8database10PqxxClient13process_fieldERKN4pqxx5fieldE called 920634 returned 100% blocks executed 27%
   920634:  483:    std::unique_ptr<FieldBase> PqxxClient::process_field(const pqxx::field& field) const
        -:  484:    {
   920634:  485:        std::unique_ptr<FieldBase> field_ptr;
        -:  486:
        -:  487:        // Get the field's PostgreSQL type OID
   920634:  488:        boost::container::flat_map<uint32_t, std::string>::const_iterator type_oid;
        -:  489:        {
   920634:  490:            std::lock_guard lock(this->conn_mutex_);
   920634:  490-block  0
branch  0 taken 920634
branch  1 taken 0
   920634:  491:            type_oid = this->type_oids_.find(field.type());
   920634:  491-block  0
branch  0 taken 920634
branch  1 taken 0
   920634:  492:            if (type_oid == this->type_oids_.end())
   920634:  492-block  0
branch  0 taken 920634
branch  1 taken 0
        -:  493:            {
    #####:  494:                throw std::invalid_argument("field type not found");
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  494-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  494-block  2
        -:  495:            }
   920634:  496:        }
    $$$$$:  496-block  0
        -:  497:
        -:  498:        // Determine the C++ type based on the PostgreSQL type OID and create the appropriate Field object
   920634:  499:        if (type_oid->second == "int4") // 32-bit integer
   920634:  499-block  0
branch  0 taken 920634
branch  1 taken 0
   920634:  499-block  1
branch  2 taken 306878
branch  3 taken 613756
        -:  500:        {
   306878:  501:            field_ptr = std::make_unique<Field<int>>(field.name(), field.as<int32_t>());
   306878:  501-block  0
branch  0 taken 306878
branch  1 taken 0
   306878:  501-block  1
branch  2 taken 306878
branch  3 taken 0
   306878:  502:            return field_ptr;
   306878:  502-block  0
        -:  503:        }
        -:  504:        // Handle string types (text, varchar, char)
   613756:  505:        if (type_oid->second == "text") // Text type
   613756:  505-block  0
branch  0 taken 613756
branch  1 taken 0
   613756:  505-block  1
branch  2 taken 613756
branch  3 taken 0
        -:  506:        {
   613756:  507:            field_ptr = std::make_unique<Field<std::string>>(field.name(), field.as<std::string>());
   613756:  507-block  0
branch  0 taken 613756
branch  1 taken 0
   613756:  507-block  1
branch  2 taken 613756
branch  3 taken 0
    $$$$$:  507-block  2
   613756:  508:            return field_ptr;
   613756:  508-block  0
        -:  509:        }
        -:  510:
    #####:  511:        if (type_oid->second == "int8") // 64-bit integer (Bigint)
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  511-block  1
branch  2 never executed
branch  3 never executed
        -:  512:        {
    #####:  513:            field_ptr = std::make_unique<Field<int64_t>>(field.name(), field.as<int64_t>());
    $$$$$:  513-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  513-block  1
branch  2 never executed
branch  3 never executed
    #####:  514:            return field_ptr;
    $$$$$:  514-block  0
        -:  515:        }
        -:  516:
        -:  517:        // Handle float types
    #####:  518:        if (type_oid->second == "float8") // Double precision (64-bit float)
    $$$$$:  518-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  518-block  1
branch  2 never executed
branch  3 never executed
        -:  519:        {
    #####:  520:            field_ptr = std::make_unique<Field<double>>(field.name(), field.as<double>());
    $$$$$:  520-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  520-block  1
branch  2 never executed
branch  3 never executed
    #####:  521:            return field_ptr;
    $$$$$:  521-block  0
        -:  522:        }
        -:  523:
        -:  524:
        -:  525:        // Handle boolean type
    #####:  526:        if (type_oid->second == "bool") // Boolean type
    $$$$$:  526-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  526-block  1
branch  2 never executed
branch  3 never executed
        -:  527:        {
    #####:  528:            field_ptr = std::make_unique<Field<bool>>(field.name(), field.as<bool>());
    $$$$$:  528-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  528-block  1
branch  2 never executed
branch  3 never executed
    #####:  529:            return field_ptr;
    $$$$$:  529-block  0
        -:  530:        }
        -:  531:
        -:  532:        // Handle timestamp types (with or without timezone)
    #####:  533:        if (type_oid->second == "timestamptz" || type_oid->second == "timestamp") // Timestamp type
    $$$$$:  533-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  533-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  533-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  533-block  3
branch  6 never executed
branch  7 never executed
        -:  534:        {
    #####:  535:            const auto value = field.as<std::string>();
    $$$$$:  535-block  0
branch  0 never executed
branch  1 never executed
        -:  536:            // Parse the timestamp string into std::chrono::system_clock::time_point
    #####:  537:            std::istringstream iss(value);
    $$$$$:  537-block  0
branch  0 never executed
branch  1 never executed
    #####:  538:            std::tm tm = {};
    #####:  539:            iss >> std::get_time(&tm, "%Y-%m-%d %H:%M:%S"); // Parse the string to fill the tm structure
    $$$$$:  539-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  539-block  1
branch  2 never executed
branch  3 never executed
    #####:  540:            auto tp = std::chrono::system_clock::from_time_t(std::mktime(&tm)); // Convert to time_point
    #####:  541:            field_ptr = std::make_unique<Field<std::chrono::system_clock::time_point>>(field.name(), tp);
    $$$$$:  541-block  0
branch  0 never executed
branch  1 never executed
    #####:  542:            return field_ptr;
    #####:  543:        }
    $$$$$:  543-block  0
    $$$$$:  543-block  1
    $$$$$:  543-block  2
        -:  544:
        -:  545:        // Return the field pointer (nullptr if no matching type was found)
    #####:  546:        return field_ptr;
    $$$$$:  546-block  0
   920634:  547:    }
    $$$$$:  547-block  0
    $$$$$:  547-block  1
    $$$$$:  547-block  2
   920634:  547-block  3
branch  0 taken 920634
branch  1 taken 0
    $$$$$:  547-block  4
   920634:  547-block  5
    $$$$$:  547-block  6
    $$$$$:  547-block  7
        -:  548:
function _ZN8drug_lib6common8database10PqxxClient22make_unique_constraintESt17basic_string_viewIcSt11char_traitsIcEESt6vectorISt10shared_ptrINS1_9FieldBaseEESaISA_EE called 20 returned 100% blocks executed 60%
       20:  549:    void PqxxClient::make_unique_constraint(const std::string_view table_name,
        -:  550:                                            std::vector<std::shared_ptr<FieldBase>> conflict_fields)
        -:  551:    {
       20:  552:        std::vector<std::shared_ptr<FieldBase>> conflict_fields_it;
        -:  553:        {
       20:  554:            std::lock_guard lock(this->conn_mutex_);
       20:  554-block  0
branch  0 taken 20
branch  1 taken 0
       20:  555:            std::string tb = table_name.data();
       20:  555-block  0
branch  0 taken 20
branch  1 taken 0
    $$$$$:  555-block  1
       20:  556:            this->conflict_fields_[tb] = std::move(conflict_fields);
       20:  556-block  0
branch  0 taken 20
branch  1 taken 0
       20:  557:            conflict_fields_it = this->conflict_fields_.at(tb);
       20:  557-block  0
branch  0 taken 20
branch  1 taken 0
       20:  557-block  1
branch  2 taken 20
branch  3 taken 0
       20:  558:        }
    $$$$$:  558-block  0
    $$$$$:  558-block  1
       20:  559:        const std::string table = escape_identifier(table_name);
       20:  559-block  0
branch  0 taken 20
branch  1 taken 0
       20:  560:        std::ostringstream query_stream;
       20:  560-block  0
branch  0 taken 20
branch  1 taken 0
       20:  561:        std::ostringstream sub_query;
       20:  561-block  0
branch  0 taken 20
branch  1 taken 0
       20:  562:        query_stream << "ALTER TABLE " << table << " ADD CONSTRAINT ";
       20:  562-block  0
branch  0 taken 20
branch  1 taken 0
       20:  562-block  1
branch  2 taken 20
branch  3 taken 0
       20:  562-block  2
branch  4 taken 20
branch  5 taken 0
       20:  563:        std::ostringstream name_constraint;
       20:  563-block  0
branch  0 taken 20
branch  1 taken 0
       20:  564:        sub_query << " UNIQUE (";
       20:  564-block  0
branch  0 taken 20
branch  1 taken 0
       40:  565:        for (const auto& column : conflict_fields_it)
       20:  565-block  0
       40:  565-block  1
branch  0 taken 20
branch  1 taken 20
       20:  565-block  2
       20:  565-block  3
        -:  566:        {
       20:  567:            sub_query << escape_identifier(column->get_name()) << ",";
       20:  567-block  0
branch  0 taken 20
branch  1 taken 0
       20:  567-block  1
branch  2 taken 20
branch  3 taken 0
       20:  567-block  2
branch  4 taken 20
branch  5 taken 0
       20:  567-block  3
branch  6 taken 20
branch  7 taken 0
    $$$$$:  567-block  4
       20:  568:            name_constraint << column->get_name() << "_";
       20:  568-block  0
branch  0 taken 20
branch  1 taken 0
       20:  568-block  1
branch  2 taken 20
branch  3 taken 0
       20:  568-block  2
branch  4 taken 20
branch  5 taken 0
        -:  569:        }
       20:  570:        name_constraint << table_name;
       20:  570-block  0
branch  0 taken 20
branch  1 taken 0
       20:  571:        std::string query = query_stream.str();
       20:  571-block  0
branch  0 taken 20
branch  1 taken 0
       20:  572:        query.append(escape_identifier(name_constraint.str())).append(sub_query.str());
       20:  572-block  0
branch  0 taken 20
branch  1 taken 0
       20:  572-block  1
branch  2 taken 20
branch  3 taken 0
       20:  572-block  2
branch  4 taken 20
branch  5 taken 0
       20:  572-block  3
branch  6 taken 20
branch  7 taken 0
       20:  572-block  4
branch  8 taken 20
branch  9 taken 0
    $$$$$:  572-block  5
    $$$$$:  572-block  6
    $$$$$:  572-block  7
       20:  573:        query.pop_back();
       20:  574:        query += ");";
       20:  574-block  0
branch  0 taken 20
branch  1 taken 0
        -:  575:
       20:  576:        execute_query(query);
       20:  576-block  0
branch  0 taken 20
branch  1 taken 0
       20:  577:    }
    $$$$$:  577-block  0
    $$$$$:  577-block  1
    $$$$$:  577-block  2
    $$$$$:  577-block  3
    $$$$$:  577-block  4
       20:  577-block  5
    $$$$$:  577-block  6
    $$$$$:  577-block  7
    $$$$$:  577-block  8
    $$$$$:  577-block  9
    $$$$$:  577-block 10
    $$$$$:  577-block 11
    $$$$$:  577-block 12
    $$$$$:  577-block 13
    $$$$$:  577-block 14
    $$$$$:  577-block 15
        -:  578:
        -:  579:    // Transaction Methods
function _ZN8drug_lib6common8database10PqxxClient17start_transactionEv called 12210896 returned 100% blocks executed 40%
 12210896:  580:    void PqxxClient::start_transaction()
        -:  581:    {
 12210896:  582:        if (this->in_transaction_)
 12210896:  582-block  0
branch  0 taken 6
branch  1 taken 12210890
        -:  583:        {
 12210890:  584:            throw TransactionException("Transaction already started.", db_err::TRANSACTION_START_FAILED);
 12210890:  584-block  0
branch  0 taken 12210890
branch  1 taken 0
 12210890:  584-block  1
branch  2 taken 12210890
branch  3 taken 0
 12210890:  584-block  2
    $$$$$:  584-block  3
 12210890:  584-block  4
 12210890:  584-block  5
branch  4 taken 12210890
branch  5 taken 0
    $$$$$:  584-block  6
 12210890:  584-block  7
 12210890:  584-block  8
        -:  585:        }
        -:  586:        try
        -:  587:        {
        6:  588:            std::lock_guard lock(this->conn_mutex_);
        6:  588-block  0
branch  0 taken 6
branch  1 taken 0
        6:  589:            this->open_transaction_ = std::make_unique<pqxx::work>(*this->conn_);
        6:  589-block  0
branch  0 taken 6
branch  1 taken 0
        6:  590:            this->in_transaction_ = true;
        6:  591:        }
        6:  591-block  0
    $$$$$:  591-block  1
    $$$$$:  591-block  2
branch  0 never executed
branch  1 never executed
        -:  592:        catch (const pqxx::sql_error& e)
        -:  593:        {
    #####:  594:            throw TransactionException(e.what(), db_err::QUERY_EXECUTION_FAILED);
    $$$$$:  594-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  594-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  594-block  2
    $$$$$:  594-block  3
    $$$$$:  594-block  4
    $$$$$:  594-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  594-block  6
    #####:  595:        }
    $$$$$:  595-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  595-block  1
    $$$$$:  595-block  2
 12210896:  596:    }
    $$$$$:  596-block  0
    $$$$$:  596-block  1
    $$$$$:  596-block  2
        6:  596-block  3
        -:  597:
function _ZN8drug_lib6common8database10PqxxClient18commit_transactionEv called 5 returned 100% blocks executed 16%
        5:  598:    void PqxxClient::commit_transaction()
        -:  599:    {
        5:  600:        if (!this->in_transaction_)
        5:  600-block  0
branch  0 taken 5
branch  1 taken 0
        -:  601:        {
    #####:  602:            throw TransactionException("No active transaction to commit.", db_err::TRANSACTION_COMMIT_FAILED);
    $$$$$:  602-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  602-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  602-block  2
    $$$$$:  602-block  3
    $$$$$:  602-block  4
    $$$$$:  602-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  602-block  6
    $$$$$:  602-block  7
    $$$$$:  602-block  8
        -:  603:        }
        -:  604:        try
        -:  605:        {
        5:  606:            std::lock_guard lock(this->conn_mutex_);
        5:  606-block  0
branch  0 taken 5
branch  1 taken 0
        5:  607:            this->open_transaction_->commit();
        5:  607-block  0
branch  0 taken 5
branch  1 taken 0
        5:  608:            this->open_transaction_.reset();
        5:  609:            this->in_transaction_ = false;
        5:  610:        }
        5:  610-block  0
    $$$$$:  610-block  1
    $$$$$:  610-block  2
branch  0 never executed
branch  1 never executed
        -:  611:        catch (const pqxx::sql_error& e)
        -:  612:        {
    #####:  613:            throw TransactionException(e.what(), db_err::QUERY_EXECUTION_FAILED);
    $$$$$:  613-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  613-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  613-block  2
    $$$$$:  613-block  3
    $$$$$:  613-block  4
    $$$$$:  613-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  613-block  6
    #####:  614:        }
    $$$$$:  614-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  614-block  1
    $$$$$:  614-block  2
        5:  615:    }
    $$$$$:  615-block  0
    $$$$$:  615-block  1
    $$$$$:  615-block  2
        5:  615-block  3
        -:  616:
function _ZN8drug_lib6common8database10PqxxClient20rollback_transactionEv called 1 returned 100% blocks executed 16%
        1:  617:    void PqxxClient::rollback_transaction()
        -:  618:    {
        1:  619:        if (!this->in_transaction_)
        1:  619-block  0
branch  0 taken 1
branch  1 taken 0
        -:  620:        {
    #####:  621:            throw TransactionException("No active transaction to rollback.", db_err::TRANSACTION_ROLLBACK_FAILED);
    $$$$$:  621-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  621-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  621-block  2
    $$$$$:  621-block  3
    $$$$$:  621-block  4
    $$$$$:  621-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  621-block  6
    $$$$$:  621-block  7
    $$$$$:  621-block  8
        -:  622:        }
        -:  623:        try
        -:  624:        {
        1:  625:            std::lock_guard lock(this->conn_mutex_);
        1:  625-block  0
branch  0 taken 1
branch  1 taken 0
        1:  626:            this->open_transaction_->abort();
        1:  626-block  0
branch  0 taken 1
branch  1 taken 0
        1:  627:            this->open_transaction_.reset();
        1:  628:            this->in_transaction_ = false;
        1:  629:        }
        1:  629-block  0
    $$$$$:  629-block  1
    $$$$$:  629-block  2
branch  0 never executed
branch  1 never executed
        -:  630:        catch (const pqxx::sql_error& e)
        -:  631:        {
    #####:  632:            throw TransactionException(e.what(), db_err::QUERY_EXECUTION_FAILED);
    $$$$$:  632-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  632-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  632-block  2
    $$$$$:  632-block  3
    $$$$$:  632-block  4
    $$$$$:  632-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  632-block  6
    #####:  633:        }
    $$$$$:  633-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  633-block  1
    $$$$$:  633-block  2
        1:  634:    }
    $$$$$:  634-block  0
    $$$$$:  634-block  1
    $$$$$:  634-block  2
        1:  634-block  3
        -:  635:
        -:  636:
        -:  637:    // Table Management
function _ZN8drug_lib6common8database10PqxxClient12create_tableESt17basic_string_viewIcSt11char_traitsIcEERKNS1_6RecordE called 21 returned 100% blocks executed 70%
       21:  638:    void PqxxClient::create_table(const std::string_view table_name, const Record& field_list)
        -:  639:    {
       21:  640:        const std::string table = escape_identifier(table_name);
       21:  641:        std::ostringstream query_stream;
       21:  641-block  0
branch  0 taken 21
branch  1 taken 0
       21:  642:        query_stream << "CREATE TABLE " << table << " (";
       21:  642-block  0
branch  0 taken 21
branch  1 taken 0
       21:  642-block  1
branch  2 taken 21
branch  3 taken 0
       21:  642-block  2
branch  4 taken 21
branch  5 taken 0
        -:  643:
       84:  644:        for (const auto& field : field_list)
       21:  644-block  0
branch  0 taken 21
branch  1 taken 0
       21:  644-block  1
branch  2 taken 21
branch  3 taken 0
       21:  644-block  2
       84:  644-block  3
branch  4 taken 21
branch  5 taken 63
       63:  644-block  4
       63:  644-block  5
        -:  645:        {
       63:  646:            std::string name = escape_identifier(field->get_name());
       63:  646-block  0
branch  0 taken 63
branch  1 taken 0
       63:  646-block  1
branch  2 taken 63
branch  3 taken 0
       63:  647:            std::string type = field->get_sql_type();
       63:  647-block  0
branch  0 taken 0
branch  1 taken 63
       63:  648:            query_stream << name << " " << type << ", ";
       63:  648-block  0
branch  0 taken 63
branch  1 taken 0
       63:  648-block  1
branch  2 taken 63
branch  3 taken 0
       63:  648-block  2
branch  4 taken 63
branch  5 taken 0
       63:  648-block  3
branch  6 taken 63
branch  7 taken 0
       63:  649:        }
    $$$$$:  649-block  0
    $$$$$:  649-block  1
        -:  650:
       21:  651:        std::string query = query_stream.str();
       21:  651-block  0
branch  0 taken 21
branch  1 taken 0
       21:  652:        query.erase(query.size() - 2); // Remove last comma and space
       21:  652-block  0
branch  0 taken 21
branch  1 taken 0
       21:  653:        query += ");";
       21:  653-block  0
branch  0 taken 21
branch  1 taken 0
        -:  654:
       21:  655:        execute_query(query);
       21:  655-block  0
branch  0 taken 21
branch  1 taken 0
       21:  656:    }
    $$$$$:  656-block  0
    $$$$$:  656-block  1
    $$$$$:  656-block  2
       21:  656-block  3
    $$$$$:  656-block  4
    $$$$$:  656-block  5
    $$$$$:  656-block  6
    $$$$$:  656-block  7
        -:  657:
function _ZN8drug_lib6common8database10PqxxClient12remove_tableESt17basic_string_viewIcSt11char_traitsIcEE called 21 returned 100% blocks executed 44%
       21:  658:    void PqxxClient::remove_table(const std::string_view table_name)
        -:  659:    {
       21:  660:        const std::string table = escape_identifier(table_name);
       21:  661:        const std::string query = "DROP TABLE IF EXISTS " + table + ";";
       21:  661-block  0
branch  0 taken 21
branch  1 taken 0
       21:  661-block  1
branch  2 taken 21
branch  3 taken 0
    $$$$$:  661-block  2
       21:  662:        execute_query(query);
       21:  662-block  0
branch  0 taken 21
branch  1 taken 0
       21:  663:    }
       21:  663-block  0
    $$$$$:  663-block  1
    $$$$$:  663-block  2
    $$$$$:  663-block  3
    $$$$$:  663-block  4
        -:  664:
function _ZN8drug_lib6common8database10PqxxClient11check_tableESt17basic_string_viewIcSt11char_traitsIcEE called 43 returned 100% blocks executed 40%
       43:  665:    bool PqxxClient::check_table(const std::string_view table_name)
        -:  666:    {
       43:  667:        const std::string table = this->conn_->esc(std::string(table_name));
       43:  667-block  0
branch  0 taken 43
branch  1 taken 0
       43:  667-block  1
branch  2 taken 43
branch  3 taken 0
    $$$$$:  667-block  2
    $$$$$:  667-block  3
    $$$$$:  667-block  4
       43:  668:        const std::string query = "SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = "
    $$$$$:  668-block  0
    $$$$$:  668-block  1
       43:  669:            + this->conn_->quote(table) + ");";
       43:  669-block  0
branch  0 taken 43
branch  1 taken 0
       43:  669-block  1
branch  2 taken 43
branch  3 taken 0
       43:  669-block  2
branch  4 taken 43
branch  5 taken 0
       43:  670:        const pqxx::result res = execute_query_with_result(query);
       43:  670-block  0
branch  0 taken 43
branch  1 taken 0
       43:  671:        return res[0][0].as<bool>();
       43:  671-block  0
branch  0 taken 43
branch  1 taken 0
       43:  672:    }
       43:  672-block  0
    $$$$$:  672-block  1
    $$$$$:  672-block  2
    $$$$$:  672-block  3
    $$$$$:  672-block  4
    $$$$$:  672-block  5
    $$$$$:  672-block  6
    $$$$$:  672-block  7
    $$$$$:  672-block  8
        -:  673:
        -:  674:    // Data Manipulation Implementation
function _ZN8drug_lib6common8database10PqxxClient21insert_implementationESt17basic_string_viewIcSt11char_traitsIcEERKSt6vectorINS1_6RecordESaIS8_EE called 12 returned 100% blocks executed 50%
       12:  675:    void PqxxClient::insert_implementation(const std::string_view table_name, const std::vector<Record>& rows)
        -:  676:    {
       12:  677:        auto [query, params] = construct_insert_query(table_name, rows);
       12:  678:        execute_query(query, params);
       12:  678-block  0
branch  0 taken 12
branch  1 taken 0
       12:  679:    }
       12:  679-block  0
    $$$$$:  679-block  1
    $$$$$:  679-block  2
        -:  680:
function _ZN8drug_lib6common8database10PqxxClient21insert_implementationESt17basic_string_viewIcSt11char_traitsIcEEOSt6vectorINS1_6RecordESaIS8_EE called 100052 returned 100% blocks executed 50%
   100052:  681:    void PqxxClient::insert_implementation(const std::string_view table_name, std::vector<Record>&& rows)
        -:  682:    {
   100052:  683:        auto [query, params] = construct_insert_query(table_name, std::move(rows));
   100052:  684:        execute_query(query, params);
   100052:  684-block  0
branch  0 taken 100052
branch  1 taken 0
   100052:  685:    }
   100052:  685-block  0
    $$$$$:  685-block  1
    $$$$$:  685-block  2
        -:  686:
        -:  687:    // Upsert Data Implementation
function _ZN8drug_lib6common8database10PqxxClient21upsert_implementationESt17basic_string_viewIcSt11char_traitsIcEERKSt6vectorINS1_6RecordESaIS8_EERKS7_ISt10shared_ptrINS1_9FieldBaseEESaISF_EE called 2 returned 100% blocks executed 60%
        2:  688:    void PqxxClient::upsert_implementation(const std::string_view table_name,
        -:  689:                                           const std::vector<Record>& rows,
        -:  690:                                           const std::vector<std::shared_ptr<FieldBase>>& replace_fields)
        -:  691:    {
        2:  692:        auto [query, params] = construct_insert_query(table_name, rows);
        2:  693:        build_conflict_clause_for_force_insert(query, table_name, replace_fields);
        2:  693-block  0
branch  0 taken 2
branch  1 taken 0
        2:  694:        execute_query(query, params);
        2:  694-block  0
branch  0 taken 2
branch  1 taken 0
        2:  695:    }
        2:  695-block  0
    $$$$$:  695-block  1
    $$$$$:  695-block  2
        -:  696:
function _ZN8drug_lib6common8database10PqxxClient21upsert_implementationESt17basic_string_viewIcSt11char_traitsIcEEOSt6vectorINS1_6RecordESaIS8_EERKS7_ISt10shared_ptrINS1_9FieldBaseEESaISE_EE called 0 returned 0% blocks executed 0%
    #####:  697:    void PqxxClient::upsert_implementation(const std::string_view table_name,
        -:  698:                                           std::vector<Record>&& rows,
        -:  699:                                           const std::vector<std::shared_ptr<FieldBase>>& replace_fields)
        -:  700:    {
    #####:  701:        auto [query, params] = construct_insert_query(table_name, rows);
    #####:  702:        build_conflict_clause_for_force_insert(query, table_name, replace_fields);
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
    #####:  703:        execute_query(query, params);
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    #####:  704:    }
    $$$$$:  704-block  0
    $$$$$:  704-block  1
    $$$$$:  704-block  2
        -:  705:
function _ZNK8drug_lib6common8database10PqxxClient22create_fts_index_queryESt17basic_string_viewIcSt11char_traitsIcEERNSt7__cxx1119basic_ostringstreamIcS5_SaIcEEE called 21 returned 100% blocks executed 50%
       21:  706:    void PqxxClient::create_fts_index_query(const std::string_view table_name, std::ostringstream& index_query) const
        -:  707:    {
       21:  708:        const std::string table = escape_identifier(table_name);
        -:  709:
        -:  710:        // Build the concatenated fields expression
       21:  711:        std::ostringstream fields_stream;
       21:  711-block  0
branch  0 taken 21
branch  1 taken 0
       21:  712:        std::vector<std::shared_ptr<FieldBase>> fts_fields;
        -:  713:        {
       21:  714:            std::lock_guard lock(this->conn_mutex_);
       21:  714-block  0
branch  0 taken 21
branch  1 taken 0
        -:  715:            try
        -:  716:            {
       21:  717:                fts_fields = this->fts_fields_.at(table_name.data());
       21:  717-block  0
branch  0 taken 21
branch  1 taken 0
       21:  717-block  1
branch  2 taken 21
branch  3 taken 0
       21:  717-block  2
branch  4 taken 21
branch  5 taken 0
    $$$$$:  717-block  3
    $$$$$:  717-block  4
       21:  718:            }
       21:  718-block  0
    $$$$$:  718-block  1
branch  0 never executed
branch  1 never executed
        -:  719:            catch (std::out_of_range&)
        -:  720:            {
    #####:  721:                throw QueryException(
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  721-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  721-block  2
    $$$$$:  721-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  721-block  4
    #####:  722:                    "For this table fts index is not set up or disabled. Or invalid table name credentials",
    $$$$$:  722-block  0
branch  0 never executed
branch  1 never executed
        -:  723:                    db_err::INVALID_DATA);
    #####:  724:            }
    $$$$$:  724-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  724-block  1
    $$$$$:  724-block  2
       21:  725:        }
    $$$$$:  725-block  0
       63:  726:        for (const auto& field : fts_fields)
       21:  726-block  0
       63:  726-block  1
branch  0 taken 21
branch  1 taken 42
       42:  726-block  2
       42:  726-block  3
        -:  727:        {
       42:  728:            fields_stream << "coalesce(" << escape_identifier(field->get_name()) << "::text, '') || ' ' || ";
       42:  728-block  0
branch  0 taken 42
branch  1 taken 0
       42:  728-block  1
branch  2 taken 42
branch  3 taken 0
       42:  728-block  2
branch  4 taken 42
branch  5 taken 0
       42:  728-block  3
branch  6 taken 42
branch  7 taken 0
       42:  728-block  4
branch  8 taken 42
branch  9 taken 0
    $$$$$:  728-block  5
        -:  729:        }
       21:  730:        std::string fields_concatenated = fields_stream.str();
       21:  730-block  0
branch  0 taken 21
branch  1 taken 0
       21:  731:        fields_concatenated.erase(fields_concatenated.size() - 11); // Remove last " || ' ' || "
       21:  731-block  0
branch  0 taken 21
branch  1 taken 0
        -:  732:
       42:  733:        index_query << "CREATE INDEX IF NOT EXISTS " << make_fts_index_name(table_name) << " ON " << table
       21:  733-block  0
branch  0 taken 21
branch  1 taken 0
       21:  733-block  1
branch  2 taken 21
branch  3 taken 0
       21:  733-block  2
branch  4 taken 21
branch  5 taken 0
       21:  733-block  3
branch  6 taken 21
branch  7 taken 0
       21:  733-block  4
branch  8 taken 21
branch  9 taken 0
    $$$$$:  733-block  5
       21:  734:            << " USING gin (to_tsvector('simple', " << fields_concatenated << "));";
       21:  734-block  0
branch  0 taken 21
branch  1 taken 0
       21:  734-block  1
branch  2 taken 21
branch  3 taken 0
       21:  734-block  2
branch  4 taken 21
branch  5 taken 0
       21:  735:    }
    $$$$$:  735-block  0
    $$$$$:  735-block  1
    $$$$$:  735-block  2
    $$$$$:  735-block  3
       21:  735-block  4
    $$$$$:  735-block  5
    $$$$$:  735-block  6
    $$$$$:  735-block  7
    $$$$$:  735-block  8
    $$$$$:  735-block  9
        -:  736:
function _ZN8drug_lib6common8database10PqxxClient15setup_fts_indexESt17basic_string_viewIcSt11char_traitsIcEESt6vectorISt10shared_ptrINS1_9FieldBaseEESaISA_EE called 20 returned 100% blocks executed 25%
       20:  737:    void PqxxClient::setup_fts_index(
        -:  738:        const std::string_view table_name,
        -:  739:        std::vector<std::shared_ptr<FieldBase>> fields)
        -:  740:    {
       20:  741:        if (fields.empty())
       20:  741-block  0
branch  0 taken 20
branch  1 taken 0
        -:  742:        {
    #####:  743:            throw QueryException("Invalid number of fts fields. Expected at least one element",
    $$$$$:  743-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  743-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  743-block  2
    $$$$$:  743-block  3
    $$$$$:  743-block  4
    $$$$$:  743-block  5
branch  4 never executed
branch  5 never executed
    $$$$$:  743-block  6
    $$$$$:  743-block  7
    $$$$$:  743-block  8
        -:  744:                                 db_err::INVALID_QUERY);
        -:  745:        }
        -:  746:        {
       20:  747:            std::lock_guard lock(this->conn_mutex_);
       20:  748:            this->fts_fields_[table_name.data()] = std::move(fields);
       20:  748-block  0
branch  0 taken 20
branch  1 taken 0
       20:  748-block  1
branch  2 taken 20
branch  3 taken 0
    $$$$$:  748-block  2
       20:  749:        }
    $$$$$:  749-block  0
        -:  750:        try
        -:  751:        {
       20:  752:            std::ostringstream index_query;
       20:  752-block  0
branch  0 taken 20
branch  1 taken 0
       20:  753:            create_fts_index_query(table_name, index_query);
       20:  753-block  0
branch  0 taken 20
branch  1 taken 0
       20:  754:            execute_query(index_query.str());
       20:  754-block  0
branch  0 taken 20
branch  1 taken 0
       20:  754-block  1
branch  2 taken 20
branch  3 taken 0
    $$$$$:  754-block  2
       20:  755:        }
       20:  755-block  0
    $$$$$:  755-block  1
    $$$$$:  755-block  2
branch  0 never executed
branch  1 never executed
        -:  756:        catch (const std::exception& e)
        -:  757:        {
    #####:  758:            throw adapt_exception(e);
    $$$$$:  758-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  758-block  1
    $$$$$:  758-block  2
    $$$$$:  758-block  3
    #####:  759:        }
    $$$$$:  759-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  759-block  1
    $$$$$:  759-block  2
       20:  760:    }
    $$$$$:  760-block  0
    $$$$$:  760-block  1
    $$$$$:  760-block  2
    $$$$$:  760-block  3
    $$$$$:  760-block  4
       20:  760-block  5
        -:  761:
function _ZNK8drug_lib6common8database10PqxxClient14drop_fts_indexESt17basic_string_viewIcSt11char_traitsIcEE called 2 returned 100% blocks executed 37%
        2:  762:    void PqxxClient::drop_fts_index(const std::string_view table_name) const
        -:  763:    {
        -:  764:        try
        -:  765:        {
        2:  766:            std::ostringstream index_query;
        2:  766-block  0
branch  0 taken 2
branch  1 taken 0
        2:  767:            index_query << "DROP INDEX IF EXISTS " << make_fts_index_name(table_name) << ";";
        2:  767-block  0
branch  0 taken 2
branch  1 taken 0
        2:  767-block  1
branch  2 taken 2
branch  3 taken 0
        2:  767-block  2
branch  4 taken 2
branch  5 taken 0
        2:  767-block  3
branch  6 taken 2
branch  7 taken 0
    $$$$$:  767-block  4
        2:  768:            execute_query(index_query.str());
        2:  768-block  0
branch  0 taken 2
branch  1 taken 0
        2:  768-block  1
branch  2 taken 2
branch  3 taken 0
    $$$$$:  768-block  2
        2:  769:        }
        2:  769-block  0
    $$$$$:  769-block  1
    $$$$$:  769-block  2
branch  0 never executed
branch  1 never executed
    $$$$$:  769-block  3
        -:  770:        catch (const std::exception& e)
        -:  771:        {
    #####:  772:            throw adapt_exception(e);
    $$$$$:  772-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  772-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  772-block  2
    #####:  773:        }
    $$$$$:  773-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  773-block  1
    $$$$$:  773-block  2
        2:  774:    }
    $$$$$:  774-block  0
    $$$$$:  774-block  1
    $$$$$:  774-block  2
        2:  774-block  3
        -:  775:
function _ZN8drug_lib6common8database10PqxxClient16remove_fts_indexESt17basic_string_viewIcSt11char_traitsIcEE called 0 returned 0% blocks executed 0%
    #####:  776:    void PqxxClient::remove_fts_index(const std::string_view table_name)
        -:  777:    {
        -:  778:        {
    #####:  779:            std::lock_guard lock(this->conn_mutex_);
    #####:  780:            this->fts_fields_[std::string(table_name)].clear();
    $$$$$:  780-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  780-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  780-block  2
    #####:  781:        }
    $$$$$:  781-block  0
    $$$$$:  781-block  1
    #####:  782:        drop_fts_index(table_name);
    #####:  783:    }
    $$$$$:  783-block  0
    $$$$$:  783-block  1
        -:  784:
function _ZNK8drug_lib6common8database10PqxxClient17restore_fts_indexESt17basic_string_viewIcSt11char_traitsIcEE called 1 returned 100% blocks executed 15%
        1:  785:    void PqxxClient::restore_fts_index(const std::string_view table_name) const
        -:  786:    {
        -:  787:        try
        -:  788:        {
        1:  789:            std::ostringstream index_query;
        1:  789-block  0
branch  0 taken 1
branch  1 taken 0
        1:  790:            create_fts_index_query(table_name, index_query);
        1:  790-block  0
branch  0 taken 1
branch  1 taken 0
        1:  791:            execute_query(index_query.str());
        1:  791-block  0
branch  0 taken 1
branch  1 taken 0
        1:  791-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:  791-block  2
        1:  792:        }
        1:  792-block  0
    $$$$$:  792-block  1
    $$$$$:  792-block  2
branch  0 never executed
branch  1 never executed
    $$$$$:  792-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:  792-block  4
        -:  793:        catch (const QueryException& e)
        -:  794:        {
    #####:  795:            if (e.get_error() == errors::db_error_code::INVALID_DATA)
    $$$$$:  795-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  795-block  1
branch  2 never executed
branch  3 never executed
        -:  796:            {
    #####:  797:                throw QueryException(
    $$$$$:  797-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  797-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  797-block  2
    $$$$$:  797-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  797-block  4
    $$$$$:  797-block  5
    #####:  798:                    "Tried to restore fts index, but fts fields were not set up. Use setup FTS function",
    $$$$$:  798-block  0
branch  0 never executed
branch  1 never executed
        -:  799:                    errors::db_error_code::INVALID_DATA);
        -:  800:            }
    #####:  801:            throw adapt_exception(e);
    $$$$$:  801-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  801-block  1
    $$$$$:  801-block  2
    $$$$$:  801-block  3
    #####:  802:        }
    $$$$$:  802-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  802-block  1
        -:  803:        catch (const std::exception& e)
        -:  804:        {
    #####:  805:            throw adapt_exception(e);
    $$$$$:  805-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  805-block  1
    $$$$$:  805-block  2
    $$$$$:  805-block  3
    #####:  806:        }
    $$$$$:  806-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  806-block  1
    $$$$$:  806-block  2
        1:  807:    }
    $$$$$:  807-block  0
    $$$$$:  807-block  1
    $$$$$:  807-block  2
    $$$$$:  807-block  3
    $$$$$:  807-block  4
        1:  807-block  5
        -:  808:
        -:  809:    // Data Retrieval
function _ZNK8drug_lib6common8database10PqxxClient6selectESt17basic_string_viewIcSt11char_traitsIcEERKNS1_10ConditionsE called 8 returned 100% blocks executed 50%
        8:  810:    std::vector<Record> PqxxClient::select(
        -:  811:        const std::string_view table_name,
        -:  812:        const Conditions& conditions) const
        -:  813:    {
        8:  814:        if (conditions.empty())
        8:  814-block  0
branch  0 taken 8
branch  1 taken 0
        -:  815:        {
    #####:  816:            throw QueryException("Invalid number of conditions. For selecting all data call another function",
    $$$$$:  816-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  816-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  816-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  816-block  3
    $$$$$:  816-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  816-block  5
    $$$$$:  816-block  6
    $$$$$:  816-block  7
        -:  817:                                 db_err::INVALID_QUERY);
        -:  818:        }
        8:  819:        std::vector<Record> results;
        8:  820:        const std::string table = escape_identifier(table_name);
        8:  820-block  0
branch  0 taken 8
branch  1 taken 0
        8:  821:        std::ostringstream query_stream;
        8:  821-block  0
branch  0 taken 8
branch  1 taken 0
        -:  822:
        8:  823:        pqxx::params params;
        8:  824:        query_stream << "SELECT * FROM " << table;
        8:  824-block  0
branch  0 taken 8
branch  1 taken 0
        8:  824-block  1
branch  2 taken 8
branch  3 taken 0
        -:  825:
        8:  826:        uint32_t param_index = 1;
        8:  827:        conditions_to_query(table_name, query_stream, params, param_index, conditions);
        8:  827-block  0
branch  0 taken 8
branch  1 taken 0
        -:  828:
        8:  829:        const pqxx::result res = execute_query_with_result(query_stream.str(), params);
        8:  829-block  0
branch  0 taken 8
branch  1 taken 0
        8:  829-block  1
branch  2 taken 8
branch  3 taken 0
    $$$$$:  829-block  2
        8:  830:        results.reserve(res.size());
        8:  830-block  0
branch  0 taken 8
branch  1 taken 0
    44736:  831:        for (const auto& row : res)
        8:  831-block  0
    44736:  831-block  1
branch  0 taken 44736
branch  1 taken 0
    44736:  831-block  2
branch  2 taken 8
branch  3 taken 44728
        8:  831-block  3
    44728:  831-block  4
branch  4 taken 44728
branch  5 taken 0
    44728:  831-block  5
    44728:  831-block  6
branch  6 taken 44728
branch  7 taken 0
    44728:  831-block  7
    $$$$$:  831-block  8
        -:  832:        {
    44728:  833:            Record record;
    44728:  834:            record.reserve(row.size());
    44728:  834-block  0
branch  0 taken 44728
branch  1 taken 0
   178912:  835:            for (const auto& field : row)
    44728:  835-block  0
   178912:  835-block  1
branch  0 taken 44728
branch  1 taken 134184
    44728:  835-block  2
   134184:  835-block  3
   134184:  835-block  4
    $$$$$:  835-block  5
        -:  836:            {
   134184:  837:                record.push_back(process_field(field));
   134184:  837-block  0
branch  0 taken 134184
branch  1 taken 0
   134184:  837-block  1
branch  2 taken 134184
branch  3 taken 0
    $$$$$:  837-block  2
   134184:  838:            }
    44728:  839:            results.push_back(std::move(record));
    44728:  839-block  0
branch  0 taken 44728
branch  1 taken 0
    44728:  840:        }
    $$$$$:  840-block  0
        8:  841:        return results;
        8:  842:    }
    $$$$$:  842-block  0
    $$$$$:  842-block  1
    $$$$$:  842-block  2
    $$$$$:  842-block  3
    $$$$$:  842-block  4
    $$$$$:  842-block  5
    $$$$$:  842-block  6
    $$$$$:  842-block  7
        8:  842-block  8
branch  0 taken 8
branch  1 taken 0
    $$$$$:  842-block  9
    $$$$$:  842-block 10
    $$$$$:  842-block 11
    $$$$$:  842-block 12
        8:  842-block 13
    $$$$$:  842-block 14
        -:  843:
function _ZNK8drug_lib6common8database10PqxxClient4viewESt17basic_string_viewIcSt11char_traitsIcEERKNS1_10ConditionsE called 5 returned 100% blocks executed 44%
        5:  844:    std::vector<std::unique_ptr<ViewRecord>> PqxxClient::view(const std::string_view table_name,
        -:  845:                                                              const Conditions& conditions) const
        -:  846:    {
        5:  847:        if (conditions.empty())
        5:  847-block  0
branch  0 taken 5
branch  1 taken 0
        -:  848:        {
    #####:  849:            throw QueryException("Invalid number of conditions. For selecting all data call another function",
    $$$$$:  849-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  849-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  849-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  849-block  3
    $$$$$:  849-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  849-block  5
    $$$$$:  849-block  6
    $$$$$:  849-block  7
        -:  850:                                 db_err::INVALID_QUERY);
        -:  851:        }
        5:  852:        std::vector<std::unique_ptr<ViewRecord>> results;
        5:  853:        const std::string table = escape_identifier(table_name);
        5:  853-block  0
branch  0 taken 5
branch  1 taken 0
        5:  854:        std::ostringstream query_stream;
        5:  854-block  0
branch  0 taken 5
branch  1 taken 0
        -:  855:
        5:  856:        pqxx::params params;
        5:  857:        query_stream << "SELECT * FROM " << table;
        5:  857-block  0
branch  0 taken 5
branch  1 taken 0
        5:  857-block  1
branch  2 taken 5
branch  3 taken 0
        5:  858:        uint32_t param_index = 1;
        5:  859:        conditions_to_query(table_name, query_stream, params, param_index, conditions);
        5:  859-block  0
branch  0 taken 5
branch  1 taken 0
        5:  860:        pqxx::result res = execute_query_with_result(query_stream.str(), params);
        5:  860-block  0
branch  0 taken 5
branch  1 taken 0
        5:  860-block  1
branch  2 taken 5
branch  3 taken 0
    $$$$$:  860-block  2
        5:  861:        results.reserve(res.size());
        5:  861-block  0
branch  0 taken 5
branch  1 taken 0
    44924:  862:        for (auto&& row : std::move(res))
        5:  862-block  0
    44924:  862-block  1
branch  0 taken 44924
branch  1 taken 0
    44924:  862-block  2
branch  2 taken 44919
branch  3 taken 5
        5:  862-block  3
    44919:  862-block  4
branch  4 taken 44919
branch  5 taken 0
    44919:  862-block  5
    44919:  862-block  6
branch  6 taken 44919
branch  7 taken 0
    44919:  862-block  7
    $$$$$:  862-block  8
        -:  863:        {
    44919:  864:            auto record = std::make_unique<PqxxViewRecord>();
    44919:  864-block  0
branch  0 taken 0
branch  1 taken 44919
    44919:  865:            record->set_row(std::move(row));
    44919:  865-block  0
branch  0 taken 0
branch  1 taken 44919
    44919:  866:            results.push_back(std::move(record));
    44919:  866-block  0
branch  0 taken 44919
branch  1 taken 0
    $$$$$:  866-block  1
    44919:  867:        }
    $$$$$:  867-block  0
    $$$$$:  867-block  1
        5:  868:        return results;
        5:  869:    }
    $$$$$:  869-block  0
    $$$$$:  869-block  1
    $$$$$:  869-block  2
    $$$$$:  869-block  3
    $$$$$:  869-block  4
    $$$$$:  869-block  5
    $$$$$:  869-block  6
    $$$$$:  869-block  7
        5:  869-block  8
branch  0 taken 5
branch  1 taken 0
    $$$$$:  869-block  9
    $$$$$:  869-block 10
    $$$$$:  869-block 11
    $$$$$:  869-block 12
        5:  869-block 13
    $$$$$:  869-block 14
        -:  870:
function _ZNK8drug_lib6common8database10PqxxClient6selectESt17basic_string_viewIcSt11char_traitsIcEE called 10 returned 100% blocks executed 60%
       10:  871:    std::vector<Record> PqxxClient::select(const std::string_view table_name) const
        -:  872:    {
       10:  873:        std::vector<Record> results;
       10:  874:        const std::string table = escape_identifier(table_name);
       10:  874-block  0
branch  0 taken 10
branch  1 taken 0
       10:  875:        std::ostringstream query_stream;
       10:  875-block  0
branch  0 taken 10
branch  1 taken 0
       10:  876:        query_stream << "SELECT * FROM " << table << ";";
       10:  876-block  0
branch  0 taken 10
branch  1 taken 0
       10:  876-block  1
branch  2 taken 10
branch  3 taken 0
       10:  876-block  2
branch  4 taken 10
branch  5 taken 0
       10:  877:        const pqxx::result res = execute_query_with_result(query_stream.str());
       10:  877-block  0
branch  0 taken 10
branch  1 taken 0
       10:  877-block  1
branch  2 taken 10
branch  3 taken 0
    $$$$$:  877-block  2
       10:  878:        results.reserve(res.size());
       10:  878-block  0
branch  0 taken 10
branch  1 taken 0
   262160:  879:        for (const auto& row : res)
       10:  879-block  0
   262160:  879-block  1
branch  0 taken 262160
branch  1 taken 0
   262160:  879-block  2
branch  2 taken 10
branch  3 taken 262150
       10:  879-block  3
   262150:  879-block  4
branch  4 taken 262150
branch  5 taken 0
   262150:  879-block  5
   262150:  879-block  6
branch  6 taken 262150
branch  7 taken 0
   262150:  879-block  7
    $$$$$:  879-block  8
        -:  880:        {
   262150:  881:            Record record;
   262150:  882:            record.reserve(row.size());
   262150:  882-block  0
branch  0 taken 262150
branch  1 taken 0
  1048600:  883:            for (const auto& field : row)
   262150:  883-block  0
  1048600:  883-block  1
branch  0 taken 262150
branch  1 taken 786450
   262150:  883-block  2
   786450:  883-block  3
   786450:  883-block  4
    $$$$$:  883-block  5
        -:  884:            {
   786450:  885:                record.push_back(process_field(field));
   786450:  885-block  0
branch  0 taken 786450
branch  1 taken 0
   786450:  885-block  1
branch  2 taken 786450
branch  3 taken 0
    $$$$$:  885-block  2
   786450:  886:            }
   262150:  887:            results.push_back(std::move(record));
   262150:  887-block  0
branch  0 taken 262150
branch  1 taken 0
   262150:  888:        }
    $$$$$:  888-block  0
       10:  889:        return results;
       10:  890:    }
    $$$$$:  890-block  0
    $$$$$:  890-block  1
    $$$$$:  890-block  2
    $$$$$:  890-block  3
    $$$$$:  890-block  4
    $$$$$:  890-block  5
    $$$$$:  890-block  6
       10:  890-block  7
branch  0 taken 10
branch  1 taken 0
    $$$$$:  890-block  8
    $$$$$:  890-block  9
    $$$$$:  890-block 10
    $$$$$:  890-block 11
       10:  890-block 12
    $$$$$:  890-block 13
    $$$$$:  890-block 14
        -:  891:
function _ZNK8drug_lib6common8database10PqxxClient4viewESt17basic_string_viewIcSt11char_traitsIcEE called 2430 returned 100% blocks executed 53%
     2430:  892:    std::vector<std::unique_ptr<ViewRecord>> PqxxClient::view(const std::string_view table_name) const
        -:  893:    {
     2430:  894:        std::vector<std::unique_ptr<ViewRecord>> results;
     2430:  895:        const std::string table = escape_identifier(table_name);
     2430:  895-block  0
branch  0 taken 2430
branch  1 taken 0
     2430:  896:        std::ostringstream query_stream;
     2430:  896-block  0
branch  0 taken 2430
branch  1 taken 0
     2430:  897:        query_stream << "SELECT * FROM " << table << ";";
     2430:  897-block  0
branch  0 taken 2430
branch  1 taken 0
     2430:  897-block  1
branch  2 taken 2430
branch  3 taken 0
     2430:  897-block  2
branch  4 taken 2430
branch  5 taken 0
     2430:  898:        pqxx::result res = execute_query_with_result(query_stream.str());
     2430:  898-block  0
branch  0 taken 2430
branch  1 taken 0
     2430:  898-block  1
branch  2 taken 2430
branch  3 taken 0
    $$$$$:  898-block  2
     2430:  899:        results.reserve(res.size());
     2430:  899-block  0
branch  0 taken 2430
branch  1 taken 0
 39259219:  900:        for (auto&& row : std::move(res))
     2430:  900-block  0
 39259219:  900-block  1
branch  0 taken 39259219
branch  1 taken 0
 39259219:  900-block  2
branch  2 taken 39256789
branch  3 taken 2430
     2430:  900-block  3
 39256789:  900-block  4
branch  4 taken 39256789
branch  5 taken 0
 39256789:  900-block  5
 39256789:  900-block  6
branch  6 taken 39256789
branch  7 taken 0
 39256789:  900-block  7
    $$$$$:  900-block  8
        -:  901:        {
 39256789:  902:            auto record = std::make_unique<PqxxViewRecord>();
 39256789:  902-block  0
branch  0 taken 0
branch  1 taken 39256789
 39256789:  903:            record->set_row(std::move(row));
 39256789:  903-block  0
branch  0 taken 0
branch  1 taken 39256789
 39256789:  904:            results.push_back(std::move(record));
 39256789:  904-block  0
branch  0 taken 39256789
branch  1 taken 0
    $$$$$:  904-block  1
 39256789:  905:        }
    $$$$$:  905-block  0
    $$$$$:  905-block  1
     2430:  906:        return results;
     2430:  907:    }
    $$$$$:  907-block  0
    $$$$$:  907-block  1
    $$$$$:  907-block  2
    $$$$$:  907-block  3
    $$$$$:  907-block  4
    $$$$$:  907-block  5
    $$$$$:  907-block  6
     2430:  907-block  7
branch  0 taken 2430
branch  1 taken 0
    $$$$$:  907-block  8
    $$$$$:  907-block  9
    $$$$$:  907-block 10
    $$$$$:  907-block 11
     2430:  907-block 12
    $$$$$:  907-block 13
    $$$$$:  907-block 14
        -:  908:
function _ZN8drug_lib6common8database10PqxxClient14truncate_tableESt17basic_string_viewIcSt11char_traitsIcEE called 2 returned 100% blocks executed 53%
        2:  909:    void PqxxClient::truncate_table(const std::string_view table_name)
        -:  910:    {
        2:  911:        const std::string table = escape_identifier(table_name);
        2:  912:        std::ostringstream query_stream;
        2:  912-block  0
branch  0 taken 2
branch  1 taken 0
        2:  913:        query_stream << "TRUNCATE TABLE " << table << ";";
        2:  913-block  0
branch  0 taken 2
branch  1 taken 0
        2:  913-block  1
branch  2 taken 2
branch  3 taken 0
        2:  913-block  2
branch  4 taken 2
branch  5 taken 0
        2:  914:        execute_query(query_stream.str());
        2:  914-block  0
branch  0 taken 2
branch  1 taken 0
        2:  914-block  1
branch  2 taken 2
branch  3 taken 0
    $$$$$:  914-block  2
        2:  915:    }
        2:  915-block  0
    $$$$$:  915-block  1
    $$$$$:  915-block  2
    $$$$$:  915-block  3
    $$$$$:  915-block  4
    $$$$$:  915-block  5
        -:  916:
function _ZN8drug_lib6common8database10PqxxClient6removeESt17basic_string_viewIcSt11char_traitsIcEERKNS1_10ConditionsE called 1 returned 100% blocks executed 34%
        1:  917:    void PqxxClient::remove(const std::string_view table_name, const Conditions& conditions)
        -:  918:    {
        1:  919:        if (conditions.empty())
        1:  919-block  0
branch  0 taken 1
branch  1 taken 0
        -:  920:        {
    #####:  921:            throw QueryException("Invalid number of conditions. For removing all data call another function",
    $$$$$:  921-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  921-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  921-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  921-block  3
    $$$$$:  921-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  921-block  5
    $$$$$:  921-block  6
    $$$$$:  921-block  7
        -:  922:                                 db_err::INVALID_QUERY);
        -:  923:        }
        1:  924:        const std::string table = escape_identifier(table_name);
        1:  925:        std::ostringstream query_stream;
        1:  925-block  0
branch  0 taken 1
branch  1 taken 0
        1:  926:        pqxx::params params;
        1:  927:        query_stream << "DELETE FROM " << table;
        1:  927-block  0
branch  0 taken 1
branch  1 taken 0
        1:  927-block  1
branch  2 taken 1
branch  3 taken 0
        1:  928:        uint32_t param_index = 1;
        1:  929:        conditions_to_query(table_name, query_stream, params, param_index, conditions);
        1:  929-block  0
branch  0 taken 1
branch  1 taken 0
        -:  930:
        1:  931:        execute_query(query_stream.str(), params);
        1:  931-block  0
branch  0 taken 1
branch  1 taken 0
        1:  931-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:  931-block  2
        1:  932:    }
    $$$$$:  932-block  0
        1:  932-block  1
    $$$$$:  932-block  2
    $$$$$:  932-block  3
    $$$$$:  932-block  4
    $$$$$:  932-block  5
        -:  933:
function _ZNK8drug_lib6common8database10PqxxClient5countESt17basic_string_viewIcSt11char_traitsIcEE called 1 returned 100% blocks executed 53%
        1:  934:    uint32_t PqxxClient::count(const std::string_view table_name) const
        -:  935:    {
        1:  936:        const std::string table = escape_identifier(table_name);
        1:  937:        std::ostringstream query_stream;
        1:  937-block  0
branch  0 taken 1
branch  1 taken 0
        1:  938:        query_stream << "SELECT COUNT(*) FROM " << table << ";";
        1:  938-block  0
branch  0 taken 1
branch  1 taken 0
        1:  938-block  1
branch  2 taken 1
branch  3 taken 0
        1:  938-block  2
branch  4 taken 1
branch  5 taken 0
        -:  939:        // Execute the query
        1:  940:        const pqxx::result res = execute_query_with_result(query_stream.str());
        1:  940-block  0
branch  0 taken 1
branch  1 taken 0
        1:  940-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:  940-block  2
        -:  941:
        1:  942:        return res[0][0].as<uint32_t>();
        1:  942-block  0
branch  0 taken 1
branch  1 taken 0
        1:  943:    }
        1:  943-block  0
    $$$$$:  943-block  1
    $$$$$:  943-block  2
    $$$$$:  943-block  3
    $$$$$:  943-block  4
    $$$$$:  943-block  5
    $$$$$:  943-block  6
    $$$$$:  943-block  7
        -:  944:
function _ZNK8drug_lib6common8database10PqxxClient5countESt17basic_string_viewIcSt11char_traitsIcEERKNS1_10ConditionsE called 1 returned 100% blocks executed 33%
        1:  945:    uint32_t PqxxClient::count(const std::string_view table_name,
        -:  946:                               const Conditions& conditions) const
        -:  947:    {
        1:  948:        if (conditions.empty())
        1:  948-block  0
branch  0 taken 1
branch  1 taken 0
        -:  949:        {
    #####:  950:            throw QueryException("Invalid number of conditions. For count all data call another function",
    $$$$$:  950-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  950-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  950-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  950-block  3
    $$$$$:  950-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  950-block  5
    $$$$$:  950-block  6
    $$$$$:  950-block  7
        -:  951:                                 db_err::INVALID_QUERY);
        -:  952:        }
        1:  953:        const std::string table = escape_identifier(table_name);
        1:  954:        std::ostringstream query_stream;
        1:  954-block  0
branch  0 taken 1
branch  1 taken 0
        -:  955:        // Start building the query
        1:  956:        query_stream << "SELECT COUNT(*) FROM " << table;
        1:  956-block  0
branch  0 taken 1
branch  1 taken 0
        1:  956-block  1
branch  2 taken 1
branch  3 taken 0
        -:  957:        // Add conditions if any
        1:  958:        pqxx::params params;
        1:  959:        uint32_t param_index = 1;
        1:  960:        conditions_to_query(table_name, query_stream, params, param_index, conditions);
        1:  960-block  0
branch  0 taken 1
branch  1 taken 0
        1:  961:        const pqxx::result res = execute_query_with_result(query_stream.str(), params);
        1:  961-block  0
branch  0 taken 1
branch  1 taken 0
        1:  961-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:  961-block  2
        1:  962:        return res[0][0].as<uint32_t>();
        1:  962-block  0
branch  0 taken 1
branch  1 taken 0
        1:  963:    }
    $$$$$:  963-block  0
        1:  963-block  1
    $$$$$:  963-block  2
    $$$$$:  963-block  3
    $$$$$:  963-block  4
    $$$$$:  963-block  5
    $$$$$:  963-block  6
    $$$$$:  963-block  7
    $$$$$:  963-block  8
    $$$$$:  963-block  9
        -:  964:
        -:  965:
function _ZN8drug_lib6common8database10PqxxClient19make_fts_index_nameB5cxx11ESt17basic_string_viewIcSt11char_traitsIcEE called 23 returned 100% blocks executed 71%
       23:  966:    std::string PqxxClient::make_fts_index_name(const std::string_view table_name)
        -:  967:    {
       23:  968:        std::ostringstream fts_ind;
       23:  969:        fts_ind << "fts_" << table_name << "_idx";
       23:  969-block  0
branch  0 taken 23
branch  1 taken 0
       23:  969-block  1
branch  2 taken 23
branch  3 taken 0
       23:  969-block  2
branch  4 taken 23
branch  5 taken 0
       23:  970:        return fts_ind.str();
       23:  970-block  0
branch  0 taken 23
branch  1 taken 0
       23:  971:    }
       23:  971-block  0
    $$$$$:  971-block  1
    $$$$$:  971-block  2
        -:  972:}
