        -:    0:Source:/home/neo/.vcpkg-clion/vcpkg/installed/x64-linux/include/boost/container/detail/next_capacity.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/common/db/postgres/pqxx_impl/CMakeFiles/DrugLib_Common_Database_PqxxClient.dir/source/pqxx_client.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://////////////////////////////////////////////////////////////////////////////
        -:    2://
        -:    3:// (C) Copyright Ion Gaztanaga 2014-2015. Distributed under the Boost
        -:    4:// Software License, Version 1.0. (See accompanying file
        -:    5:// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    6://
        -:    7:// See http://www.boost.org/libs/container for documentation.
        -:    8://
        -:    9://////////////////////////////////////////////////////////////////////////////
        -:   10:#ifndef BOOST_CONTAINER_DETAIL_NEXT_CAPACITY_HPP
        -:   11:#define BOOST_CONTAINER_DETAIL_NEXT_CAPACITY_HPP
        -:   12:
        -:   13:#ifndef BOOST_CONFIG_HPP
        -:   14:#  include <boost/config.hpp>
        -:   15:#endif
        -:   16:
        -:   17:#if defined(BOOST_HAS_PRAGMA_ONCE)
        -:   18:#  pragma once
        -:   19:#endif
        -:   20:
        -:   21:#include <boost/container/detail/config_begin.hpp>
        -:   22:#include <boost/container/detail/workaround.hpp>
        -:   23:
        -:   24:// container
        -:   25:#include <boost/container/throw_exception.hpp>
        -:   26:// container/detail
        -:   27:#include <boost/container/detail/min_max.hpp>
        -:   28:
        -:   29:namespace boost {
        -:   30:namespace container {
        -:   31:namespace dtl {
        -:   32:
        -:   33:template<unsigned Minimum, unsigned Numerator, unsigned Denominator>
        -:   34:struct grow_factor_ratio
        -:   35:{
        -:   36:   BOOST_CONTAINER_STATIC_ASSERT(Numerator > Denominator);
        -:   37:   BOOST_CONTAINER_STATIC_ASSERT(Numerator   < 100);
        -:   38:   BOOST_CONTAINER_STATIC_ASSERT(Denominator < 100);
        -:   39:   BOOST_CONTAINER_STATIC_ASSERT(Denominator == 1 || (0 != Numerator % Denominator));
        -:   40:
        -:   41:   template<class SizeType>
function _ZNK5boost9container3dtl17grow_factor_ratioILj0ELj8ELj5EEclImEET_S5_S5_S5_ called 180 returned 100% blocks executed 42%
      180:   42:   SizeType operator()(const SizeType cur_cap, const SizeType add_min_cap, const SizeType max_cap) const
        -:   43:   {
      180:   44:      const SizeType overflow_limit  = ((SizeType)-1) / Numerator;
        -:   45:
      180:   46:      SizeType new_cap = 0;
        -:   47:
      180:   48:      if(cur_cap <= overflow_limit){
      180:   48-block  0
branch  0 taken 180
branch  1 taken 0
      180:   49:         new_cap = SizeType(cur_cap * Numerator / Denominator);
      180:   50:      }
      180:   50-block  0
    #####:   51:      else if(Denominator == 1 || (SizeType(new_cap = cur_cap) / Denominator) > overflow_limit){
    $$$$$:   51-block  0
branch  0 never executed
branch  1 never executed
    #####:   52:         new_cap = (SizeType)-1;
    #####:   53:      }
    $$$$$:   53-block  0
        -:   54:      else{
    #####:   55:         new_cap = SizeType(new_cap*Numerator);
    $$$$$:   55-block  0
        -:   56:      }
      180:   57:      return max_value<SizeType>
      180:   57-block  0
      180:   58:               ( SizeType(Minimum)
      180:   59:               , max_value<SizeType>
      180:   60:                  ( SizeType(cur_cap+add_min_cap)
      180:   61:                  , min_value<SizeType>(max_cap, new_cap))
        -:   62:               );
        -:   63:   }
        -:   64:};
        -:   65:
        -:   66:}  //namespace dtl {
        -:   67:
        -:   68:struct growth_factor_50
        -:   69:   : dtl::grow_factor_ratio<0, 3, 2>
        -:   70:{};
        -:   71:
        -:   72:struct growth_factor_60
        -:   73:   : dtl::grow_factor_ratio<0, 8, 5>
        -:   74:{};
        -:   75:
        -:   76:struct growth_factor_100
        -:   77:   : dtl::grow_factor_ratio<0, 2, 1>
        -:   78:{};
        -:   79:
        -:   80:template<class SizeType>
function _ZN5boost9container25clamp_by_stored_size_typeImEEvRT_S2_ called 180 returned 100% blocks executed 100%
      180:   81:inline void clamp_by_stored_size_type(SizeType &, SizeType)
      180:   82:{}
      180:   82-block  0
        -:   83:
        -:   84:template<class SizeType, class SomeStoredSizeType>
        -:   85:inline void clamp_by_stored_size_type(SizeType &s, SomeStoredSizeType)
        -:   86:{
        -:   87:   if (s >= SomeStoredSizeType(-1) ) 
        -:   88:      s = SomeStoredSizeType(-1);
        -:   89:}
        -:   90:
        -:   91:}  //namespace container {
        -:   92:}  //namespace boost {
        -:   93:
        -:   94:#include <boost/container/detail/config_end.hpp>
        -:   95:
        -:   96:#endif   //#ifndef BOOST_CONTAINER_DETAIL_NEXT_CAPACITY_HPP
