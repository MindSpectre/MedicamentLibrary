        -:    0:Source:/home/neo/MedicamentLibrary/common/stopwatch/include/stopwatch.hpp
        -:    0:Graph:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_StopWatch.dir/unit_tests/stopwatch/test_stopwatch.cpp.gcno
        -:    0:Data:/home/neo/MedicamentLibrary/cmake-build-ninja--vcpkg-dbg-rel-coverage/tests/CMakeFiles/DrugLib_Tests_Unit_StopWatch.dir/unit_tests/stopwatch/test_stopwatch.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <chrono>
        -:    4:#include <iomanip>
        -:    5:#include <iostream>
        -:    6:#include <string>
        -:    7:#include <vector>
        -:    8:
        -:    9:namespace drug_lib::common
        -:   10:{
        -:   11:    /**
        -:   12:     * @brief Stopwatch class used for measuring time intervals.
        -:   13:     *
        -:   14:     * @tparam T The time unit used for measuring intervals (milliseconds by default).
        -:   15:     */
        -:   16:    template <typename T = std::chrono::milliseconds>
        -:   17:    class Stopwatch
        -:   18:    {
        -:   19:    public:
        -:   20:        /**
        -:   21:         * @brief Checks if time is counted from the previous flag.
        -:   22:         *
        -:   23:         * @return true if countdown is from the previous flag.
        -:   24:         */
function _ZNK8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE18is_count_from_prevEv called 2 returned 100% blocks executed 100%
        2:   25:        [[nodiscard]] bool is_count_from_prev() const
        -:   26:        {
        2:   27:            return countdown_from_prev_;
        2:   27-block  0
        -:   28:        }
        -:   29:
        -:   30:        /**
        -:   31:         * @brief Sets countdown from the previous flag.
        -:   32:         *
        -:   33:         * @param state Boolean value to set countdown from previous flag.
        -:   34:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE23set_countdown_from_prevEb called 2 returned 100% blocks executed 100%
        2:   35:        void set_countdown_from_prev(const bool state)
        -:   36:        {
        2:   37:            countdown_from_prev_ = state;
        2:   38:        }
        2:   38-block  0
        -:   39:
        -:   40:        /**
        -:   41:         * @brief Checks if time is counted from the start time.
        -:   42:         *
        -:   43:         * @return true if countdown is from the start time.
        -:   44:         */
function _ZNK8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE19is_count_from_startEv called 2 returned 100% blocks executed 100%
        2:   45:        [[nodiscard]] bool is_count_from_start() const
        -:   46:        {
        2:   47:            return countdown_from_start_;
        2:   47-block  0
        -:   48:        }
        -:   49:
        -:   50:        /**
        -:   51:         * @brief Sets countdown from the start time.
        -:   52:         *
        -:   53:         * @param state Boolean value to set countdown from start.
        -:   54:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE24set_countdown_from_startEb called 2 returned 100% blocks executed 100%
        2:   55:        void set_countdown_from_start(const bool state)
        -:   56:        {
        2:   57:            countdown_from_start_ = state;
        2:   58:        }
        2:   58-block  0
        -:   59:
        -:   60:        /**
        -:   61:         * @brief Constructor that initializes the stopwatch and reserves memory for flags.
        -:   62:         *
        -:   63:         * @param name Name of measure
        -:   64:         * @param flags_cnt_reserve The initial reserved size of the flags vector.
        -:   65:         */
        -:   66:        // Constructor
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm called 8 returned 100% blocks executed 42%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm called 1 returned 100% blocks executed 42%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEEC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm called 1 returned 100% blocks executed 42%
       20:   67:        explicit Stopwatch(std::string name = "", const std::size_t flags_cnt_reserve = 30) : running_name_(
        8:   67-block  0
branch  0 taken 8
branch  1 taken 0
        8:   67-block  1
branch  2 taken 8
branch  3 taken 0
        1:   67-block  2
branch  4 taken 1
branch  5 taken 0
        1:   67-block  3
branch  6 taken 1
branch  7 taken 0
        1:   67-block  4
branch  8 taken 1
branch  9 taken 0
        1:   67-block  5
branch 10 taken 1
branch 11 taken 0
        -:   68:            std::move(name))
        -:   69:        {
       10:   70:            flags_.reserve(flags_cnt_reserve);
        8:   70-block  0
branch  0 taken 8
branch  1 taken 0
        1:   70-block  1
branch  2 taken 1
branch  3 taken 0
        1:   70-block  2
branch  4 taken 1
branch  5 taken 0
       10:   71:        }
        8:   71-block  0
    $$$$$:   71-block  1
    $$$$$:   71-block  2
    $$$$$:   71-block  3
    $$$$$:   71-block  4
        1:   71-block  5
    $$$$$:   71-block  6
    $$$$$:   71-block  7
    $$$$$:   71-block  8
    $$$$$:   71-block  9
        1:   71-block 10
    $$$$$:   71-block 11
    $$$$$:   71-block 12
    $$$$$:   71-block 13
    $$$$$:   71-block 14
        -:   72:
        -:   73:        /**
        -:   74:        * @brief Destructor that automatically prints the times.
        -:   75:        */
        -:   76:        // Destructor automatically flushes the times
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEED2Ev called 8 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEED2Ev called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEED2Ev called 1 returned 100% blocks executed 100%
       10:   77:        ~Stopwatch() noexcept
        -:   78:        {
       10:   79:            print();
       10:   80:        }
        8:   80-block  0
        1:   80-block  1
        1:   80-block  2
        -:   81:
        -:   82:        /**
        -:   83:        * @brief Starts or resets the stopwatch.
        -:   84:        */
        -:   85:        // Start or reset the stopwatch
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE5startENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE5startENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE5startENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
       11:   86:        void start(std::string name = "") noexcept
        -:   87:        {
       11:   88:            running_name_ = std::move(name);
       11:   89:            start_time_ = now();
       11:   90:            flags_.clear();
       11:   91:        }
        9:   91-block  0
        1:   91-block  1
        1:   91-block  2
        -:   92:
        -:   93:        /**
        -:   94:         * @brief Stops the stopwatch and prints the times.
        -:   95:         */
        -:   96:        // Finish and print the times
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE6finishEv called 3 returned 100% blocks executed 66%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE6finishEv called 1 returned 100% blocks executed 66%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE6finishEv called 1 returned 100% blocks executed 66%
        5:   97:        void finish() noexcept
        -:   98:        {
        5:   99:            flag("Finish");
        3:   99-block  0
branch  0 taken 3
branch  1 taken 0
    $$$$$:   99-block  1
        1:   99-block  2
branch  2 taken 1
branch  3 taken 0
    $$$$$:   99-block  3
        1:   99-block  4
branch  4 taken 1
branch  5 taken 0
    $$$$$:   99-block  5
        5:  100:            print();
        5:  101:        }
        3:  101-block  0
        1:  101-block  1
        1:  101-block  2
        -:  102:
        -:  103:        /**
        -:  104:         * @brief Prints all flags and time differences.
        -:  105:         */
        -:  106:        // Flush the times (printing all flags and time differences)
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE5printEv called 11 returned 100% blocks executed 90%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE5printEv called 2 returned 100% blocks executed 90%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE5printEv called 2 returned 100% blocks executed 90%
       15:  107:        void print() noexcept
        -:  108:        {
       15:  109:            if (flags_.empty())
       11:  109-block  0
branch  0 taken 4
branch  1 taken 7
        2:  109-block  1
branch  2 taken 1
branch  3 taken 1
        2:  109-block  2
branch  4 taken 1
branch  5 taken 1
        6:  110:                return;
        4:  110-block  0
        1:  110-block  1
        1:  110-block  2
        9:  111:            std::cout << "Running: " << running_name_ << '\n' << "Stopwatch times (in " << time_unit_name() << "):\n";
        7:  111-block  0
branch  0 taken 7
branch  1 taken 0
        7:  111-block  1
branch  2 taken 7
branch  3 taken 0
        7:  111-block  2
branch  4 taken 7
branch  5 taken 0
        7:  111-block  3
branch  6 taken 7
branch  7 taken 0
        7:  111-block  4
branch  8 taken 7
branch  9 taken 0
        7:  111-block  5
branch 10 taken 7
branch 11 taken 0
        7:  111-block  6
branch 12 taken 7
branch 13 taken 0
    $$$$$:  111-block  7
        1:  111-block  8
branch 14 taken 1
branch 15 taken 0
        1:  111-block  9
branch 16 taken 1
branch 17 taken 0
        1:  111-block 10
branch 18 taken 1
branch 19 taken 0
        1:  111-block 11
branch 20 taken 1
branch 21 taken 0
        1:  111-block 12
branch 22 taken 1
branch 23 taken 0
        1:  111-block 13
branch 24 taken 1
branch 25 taken 0
        1:  111-block 14
branch 26 taken 1
branch 27 taken 0
    $$$$$:  111-block 15
        1:  111-block 16
branch 28 taken 1
branch 29 taken 0
        1:  111-block 17
branch 30 taken 1
branch 31 taken 0
        1:  111-block 18
branch 32 taken 1
branch 33 taken 0
        1:  111-block 19
branch 34 taken 1
branch 35 taken 0
        1:  111-block 20
branch 36 taken 1
branch 37 taken 0
        1:  111-block 21
branch 38 taken 1
branch 39 taken 0
        1:  111-block 22
branch 40 taken 1
branch 41 taken 0
    $$$$$:  111-block 23
        9:  112:            auto previous = start_time_;
      126:  113:            for (size_t i = 0; i < flags_.size(); ++i)
        7:  113-block  0
      120:  113-block  1
branch  0 taken 7
branch  1 taken 113
      113:  113-block  2
        1:  113-block  3
        3:  113-block  4
branch  2 taken 1
branch  3 taken 2
        2:  113-block  5
        1:  113-block  6
        3:  113-block  7
branch  4 taken 1
branch  5 taken 2
        2:  113-block  8
        -:  114:            {
      117:  115:                if (flags_[i].name_.empty())
      113:  115-block  0
branch  0 taken 0
branch  1 taken 113
        2:  115-block  1
branch  2 taken 0
branch  3 taken 2
        2:  115-block  2
branch  4 taken 0
branch  5 taken 2
    #####:  116:                    std::cout << "Flag " << i + 1;
    $$$$$:  116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  116-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  116-block  2
    $$$$$:  116-block  3
branch  4 never executed
branch  5 never executed
    $$$$$:  116-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  116-block  5
    $$$$$:  116-block  6
branch  8 never executed
branch  9 never executed
    $$$$$:  116-block  7
branch 10 never executed
branch 11 never executed
    $$$$$:  116-block  8
        -:  117:                else
      117:  118:                    std::cout << flags_[i].name_;
      113:  118-block  0
branch  0 taken 113
branch  1 taken 0
        2:  118-block  1
branch  2 taken 2
branch  3 taken 0
        2:  118-block  2
branch  4 taken 2
branch  5 taken 0
      117:  119:                if (countdown_from_prev_)
      113:  119-block  0
branch  0 taken 111
branch  1 taken 2
        2:  119-block  1
branch  2 taken 2
branch  3 taken 0
        2:  119-block  2
branch  4 taken 2
branch  5 taken 0
      230:  120:                    std::cout << "  |  " << std::chrono::duration_cast<T>(flags_[i].point_ - previous).count() <<
      111:  120-block  0
branch  0 taken 111
branch  1 taken 0
      111:  120-block  1
branch  2 taken 111
branch  3 taken 0
      111:  120-block  2
branch  4 taken 111
branch  5 taken 0
      111:  120-block  3
branch  6 taken 111
branch  7 taken 0
      111:  120-block  4
branch  8 taken 111
branch  9 taken 0
      111:  120-block  5
        2:  120-block  6
branch 10 taken 2
branch 11 taken 0
        2:  120-block  7
branch 12 taken 2
branch 13 taken 0
        2:  120-block  8
branch 14 taken 2
branch 15 taken 0
        2:  120-block  9
branch 16 taken 2
branch 17 taken 0
        2:  120-block 10
branch 18 taken 2
branch 19 taken 0
        2:  120-block 11
branch 20 taken 2
branch 21 taken 0
        2:  120-block 12
        2:  120-block 13
branch 22 taken 2
branch 23 taken 0
        2:  120-block 14
branch 24 taken 2
branch 25 taken 0
        2:  120-block 15
branch 26 taken 2
branch 27 taken 0
        2:  120-block 16
branch 28 taken 2
branch 29 taken 0
        2:  120-block 17
branch 30 taken 2
branch 31 taken 0
        2:  120-block 18
      115:  121:                        time_unit_name_short();
      111:  121-block  0
branch  0 taken 111
branch  1 taken 0
        2:  121-block  1
branch  2 taken 2
branch  3 taken 0
        2:  121-block  2
branch  4 taken 2
branch  5 taken 0
      117:  122:                if (countdown_from_start_)
      113:  122-block  0
branch  0 taken 113
branch  1 taken 0
        2:  122-block  1
branch  2 taken 2
branch  3 taken 0
        2:  122-block  2
branch  4 taken 2
branch  5 taken 0
      234:  123:                    std::cout << "  |  " << std::chrono::duration_cast<T>(flags_[i].point_ - start_time_).count() <<
      113:  123-block  0
branch  0 taken 113
branch  1 taken 0
      113:  123-block  1
branch  2 taken 113
branch  3 taken 0
      113:  123-block  2
branch  4 taken 113
branch  5 taken 0
      113:  123-block  3
branch  6 taken 113
branch  7 taken 0
      113:  123-block  4
branch  8 taken 113
branch  9 taken 0
      113:  123-block  5
        2:  123-block  6
branch 10 taken 2
branch 11 taken 0
        2:  123-block  7
branch 12 taken 2
branch 13 taken 0
        2:  123-block  8
branch 14 taken 2
branch 15 taken 0
        2:  123-block  9
branch 16 taken 2
branch 17 taken 0
        2:  123-block 10
branch 18 taken 2
branch 19 taken 0
        2:  123-block 11
branch 20 taken 2
branch 21 taken 0
        2:  123-block 12
        2:  123-block 13
branch 22 taken 2
branch 23 taken 0
        2:  123-block 14
branch 24 taken 2
branch 25 taken 0
        2:  123-block 15
branch 26 taken 2
branch 27 taken 0
        2:  123-block 16
branch 28 taken 2
branch 29 taken 0
        2:  123-block 17
branch 30 taken 2
branch 31 taken 0
        2:  123-block 18
      117:  124:                        time_unit_name_short();
      113:  124-block  0
branch  0 taken 113
branch  1 taken 0
        2:  124-block  1
branch  2 taken 2
branch  3 taken 0
        2:  124-block  2
branch  4 taken 2
branch  5 taken 0
      117:  125:                std::cout << "\n";
      113:  125-block  0
branch  0 taken 113
branch  1 taken 0
        2:  125-block  1
branch  2 taken 2
branch  3 taken 0
        2:  125-block  2
branch  4 taken 2
branch  5 taken 0
      117:  126:                previous = flags_[i].point_;
      117:  127:            }
      113:  127-block  0
        2:  127-block  1
        2:  127-block  2
        9:  128:            std::cout << std::endl;
        7:  128-block  0
branch  0 taken 7
branch  1 taken 0
        1:  128-block  1
branch  2 taken 1
branch  3 taken 0
        1:  128-block  2
branch  4 taken 1
branch  5 taken 0
        9:  129:            flags_.clear();
       15:  130:        }
        7:  130-block  0
       11:  130-block  1
        1:  130-block  2
        2:  130-block  3
        1:  130-block  4
        2:  130-block  5
        -:  131:
        -:  132:        /**
        -:  133:          * @brief Resets the stopwatch, clears flags, and sets a new start time.
        -:  134:          */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE5resetEv called 1 returned 100% blocks executed 66%
        1:  135:        void reset() noexcept
        -:  136:        {
        1:  137:            start();
        1:  137-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:  137-block  1
        1:  138:        }
        1:  138-block  0
        -:  139:
        -:  140:        /**
        -:  141:         * @brief Adds a new flag using the postfix increment operator.
        -:  142:         *
        -:  143:         * @return Reference to the Stopwatch object.
        -:  144:         */
        -:  145:        Stopwatch& operator++(int)
        -:  146:        {
        -:  147:            flag("");
        -:  148:            return *this;
        -:  149:        }
        -:  150:
        -:  151:        /**
        -:  152:         * @brief Adds a new flag using the prefix increment operator.
        -:  153:         *
        -:  154:         * @return Reference to the Stopwatch object.
        -:  155:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEEppEv called 1 returned 100% blocks executed 100%
        1:  156:        Stopwatch& operator++()
        -:  157:        {
        1:  158:            flag("");
        1:  159:            return *this;
        1:  159-block  0
        -:  160:        }
        -:  161:
        -:  162:        /**
        -:  163:        * @brief Removes the last flag using the postfix decrement operator.
        -:  164:        *
        -:  165:        * @return Reference to the Stopwatch object.
        -:  166:        */
        -:  167:        Stopwatch& operator--(int)
        -:  168:        {
        -:  169:            if (!flags_.empty())
        -:  170:            {
        -:  171:                flags_.pop_back();
        -:  172:            }
        -:  173:            return *this;
        -:  174:        }
        -:  175:
        -:  176:        /**
        -:  177:         * @brief Removes the last flag using the prefix decrement operator.
        -:  178:         *
        -:  179:         * @return Reference to the Stopwatch object.
        -:  180:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEEmmEv called 3 returned 100% blocks executed 100%
        3:  181:        Stopwatch& operator--()
        -:  182:        {
        3:  183:            if (!flags_.empty())
        3:  183-block  0
branch  0 taken 0
branch  1 taken 3
        -:  184:            {
        3:  185:                flags_.pop_back();
        3:  186:            }
        3:  186-block  0
        3:  187:            return *this;
        3:  187-block  0
        -:  188:        }
        -:  189:
        -:  190:        /**
        -:  191:           * @brief Adds a new flag with the specified name.
        -:  192:           *
        -:  193:           * @tparam string_mv The type of the name parameter (must be convertible to std::string).
        -:  194:           * @param name The name of the flag.
        -:  195:           */
        -:  196:        template <typename string_mv>
        -:  197:        std::enable_if_t<std::is_same_v<std::remove_cvref_t<string_mv>, std::string> || std::is_convertible_v<
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA11_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 4 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA9_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 4 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA17_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA7_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 5 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA13_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 2 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA12_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeESE_Esr3stdE16is_convertible_vISH_SE_EEvE4typeEOSH_ called 100 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE4flagIRA23_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE4flagIRA22_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4flagIRA1_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE4flagIRA7_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE4flagIRA7_KcEENSt9enable_ifIXoosr3stdE9is_same_vINSt12remove_cvrefIT_E4typeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEsr3stdE16is_convertible_vISE_SM_EEvE4typeEOSE_ called 1 returned 100% blocks executed 100%
      122:  198:                             string_mv, std::string>, void> flag(string_mv&& name)
        -:  199:        {
      122:  200:            flags_.emplace_back(std::forward<string_mv>(name), now());
      122:  201:        }
        4:  201-block  0
        4:  201-block  1
        1:  201-block  2
        5:  201-block  3
        2:  201-block  4
        1:  201-block  5
      100:  201-block  6
        1:  201-block  7
        1:  201-block  8
        1:  201-block  9
        1:  201-block 10
        1:  201-block 11
        -:  202:
        -:  203:        // Overload -- operator to remove the last flag
        -:  204:
        -:  205:    private:
       10:  206:        bool countdown_from_prev_ = true;
       10:  207:        bool countdown_from_start_ = true;
        -:  208:        std::string running_name_;
        -:  209:
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagD2Ev called 218 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagC2EOS8_ called 100 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE4FlagC2EOS8_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE4FlagD2Ev called 2 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE4FlagC2EOS8_ called 0 returned 0% blocks executed 0%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE4FlagD2Ev called 2 returned 100% blocks executed 100%
        -:  210:        struct Flag
        -:  211:        {
        -:  212:            std::string name_;
        -:  213:            std::chrono::time_point<std::chrono::high_resolution_clock> point_;
        -:  214:
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE4FlagC2EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS2_10time_pointINS2_3_V212system_clockENS3_IlS4_ILl1ELl1000000000EEEEEE called 118 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE4FlagC2EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS2_10time_pointINS2_3_V212system_clockENS3_IlS4_ILl1ELl1000000000EEEEEE called 2 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE4FlagC2EONSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS2_10time_pointINS2_3_V212system_clockES6_EE called 2 returned 100% blocks executed 100%
      122:  215:            Flag(std::string&& name,
      122:  216:                 const std::chrono::time_point<std::chrono::high_resolution_clock> point) : name_(std::move(name)),
      122:  217:                point_(point)
        -:  218:            {
      122:  219:            }
      118:  219-block  0
        2:  219-block  1
        2:  219-block  2
        -:  220:
        -:  221:            Flag(const std::string& name,
        -:  222:                 const std::chrono::time_point<std::chrono::high_resolution_clock> point) : name_(name),
        -:  223:                point_(point)
        -:  224:            {
        -:  225:            }
        -:  226:        };
        -:  227:
        -:  228:        /**
        -:  229:         * @brief Gets the current time.
        -:  230:         *
        -:  231:         * @return The current time point.
        -:  232:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE3nowEv called 127 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE3nowEv called 3 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE3nowEv called 3 returned 100% blocks executed 100%
      133:  233:        static constexpr auto now() noexcept
        -:  234:        {
      133:  235:            return std::chrono::high_resolution_clock::now();
      127:  235-block  0
        3:  235-block  1
        3:  235-block  2
        -:  236:        }
        -:  237:
        -:  238:        /**
        -:  239:         * @brief Gets the name of the time unit as a string.
        -:  240:         *
        -:  241:         * @return The name of the time unit (e.g., milliseconds).
        -:  242:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE14time_unit_nameEv called 7 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE14time_unit_nameEv called 1 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE14time_unit_nameEv called 1 returned 100% blocks executed 100%
        9:  243:        [[nodiscard]] static constexpr const char* time_unit_name()
        -:  244:        {
        -:  245:            if constexpr (std::is_same_v<T, std::chrono::milliseconds>)
        -:  246:            {
        7:  247:                return "milliseconds";
        7:  247-block  0
        -:  248:            }
        -:  249:            else if constexpr (std::is_same_v<T, std::chrono::microseconds>)
        -:  250:            {
        1:  251:                return "microseconds";
        1:  251-block  0
        -:  252:            }
        -:  253:            else if constexpr (std::is_same_v<T, std::chrono::nanoseconds>)
        -:  254:            {
        1:  255:                return "nanoseconds";
        1:  255-block  0
        -:  256:            }
        -:  257:            else if constexpr (std::is_same_v<T, std::chrono::seconds>)
        -:  258:            {
        -:  259:                return "seconds";
        -:  260:            }
        -:  261:            else
        -:  262:            {
        -:  263:                static_assert(sizeof(T) == 0, "Unsupported field type for time");
        -:  264:            }
        -:  265:            return {};
        -:  266:        }
        -:  267:
        -:  268:        /**
        -:  269:         * @brief Gets the short name of the time unit.
        -:  270:         *
        -:  271:         * @return The short name of the time unit (e.g., mls for milliseconds).
        -:  272:         */
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000EEEEE20time_unit_name_shortEv called 224 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEE20time_unit_name_shortEv called 4 returned 100% blocks executed 100%
function _ZN8drug_lib6common9StopwatchINSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEEE20time_unit_name_shortEv called 4 returned 100% blocks executed 100%
      232:  273:        [[nodiscard]] static constexpr const char* time_unit_name_short()
        -:  274:        {
        -:  275:            if constexpr (std::is_same_v<T, std::chrono::milliseconds>)
        -:  276:            {
      224:  277:                return "mls";
      224:  277-block  0
        -:  278:            }
        -:  279:            else if constexpr (std::is_same_v<T, std::chrono::microseconds>)
        -:  280:            {
        4:  281:                return "mcs";
        4:  281-block  0
        -:  282:            }
        -:  283:            else if constexpr (std::is_same_v<T, std::chrono::nanoseconds>)
        -:  284:            {
        4:  285:                return "ns";
        4:  285-block  0
        -:  286:            }
        -:  287:            else if constexpr (std::is_same_v<T, std::chrono::seconds>)
        -:  288:            {
        -:  289:                return "s";
        -:  290:            }
        -:  291:            else
        -:  292:            {
        -:  293:                static_assert(sizeof(T) == 0, "Unsupported field type for time");
        -:  294:            }
        -:  295:            return {};
        -:  296:        }
        -:  297:
        -:  298:        std::chrono::time_point<std::chrono::high_resolution_clock> start_time_;
        -:  299:        std::vector<Flag> flags_;
        -:  300:    };
        -:  301:}
