version: '3.8'

services:
  postgres:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: docker/database/Dockerfile
    container_name: postgres-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 5

  gateway:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/services/drogon/gateway/Dockerfile
    container_name: gateway-container
    image: neurospectrelin/gateway:1.0.0
    ports:
      - "3000:3000"
    networks:
      - app_network

  librarian_service:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/services/drogon/librarian_service/Dockerfile
    container_name: librarian-service-container
    image: neurospectrelin/librarian_service:1.0.0
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app_network

  search_service:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/services/drogon/search_service/Dockerfile
    container_name: search-service-container
    image: neurospectrelin/search_service:1.0.0
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8001"
    networks:
      - app_network

  authenticator_service:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/services/drogon/authenticator_service/Dockerfile
    container_name: authenticator-service-container
    image: neurospectrelin/authenticator_service:1.0.0
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local

networks:
  app_network:
    driver: bridge

